<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0071)http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time.h -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-tw"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		
		<meta name="author" content="BestSteve">
		<title>C 標準函式庫</title>
		<style type="text/css">
/*<![CDATA[*/
body
{
	font-family: "Microsoft JhengHei", PMingLiU, Sans-Serif;
	margin: 0;
	padding: 0;
}
h1
{
	text-align: center;
	margin: 0;
	padding: 0;
}
h3
{
	margin-top: 1em;
	margin-bottom: 1em;
	text-align: center;
}
code
{
	font-family: "Courier New", Monospace;
	font-size: medium;
}
var
{
	color: rgb(0,128,0);
	background-color: white;
}
em
{
	border-bottom: 1px solid red;
}
strong
{
	color: black;
	background-color: rgb(255,255,224);
	border: 1px solid red;
}
acronym
{
	border-bottom: 1px dotted black;
}
.note
{
	font-size: 12px;
	line-height: 1.0;
}
#container
{
	margin: 0;
	padding: 0;
}
#title
{
	position: absolute;
	top: 10px;
	left: 10px;
	right: 10px;
	height: 40px;
	margin: 0;
	padding: 0;
}
#contents
{
	position: fixed;
	width: 160px;
	left: 10px;
	top: 60px;
	margin: 0;
	padding: 0;
	color: black;
	background-color: rgb(240,248,255);
}
#commet
{
	list-style-type: none;
	margin: 0;
	padding: 0;
	font-size: small;
}
#main
{
	position: absolute;
	top: 60px;
	left: 190px;
	right: 10px;
	margin: 0;
	padding: 0;
}
.to_contents
{
	display: none;
}
.volid_standard
{
	border: 0;
	width: 88px;
	height: 31px;
	float: left;
}
/*]]>*/
		</style>
<!--[if IE 6]>
<style type="text/css">
#title
{
	width: 99%;
}
#contents
{
	position: absolute;
}
.to_contents
{
	display: block;
}
</style>
<![endif]-->
	</head>
	<body>
		<div id="container">
		<div id="title"><h1>C 標準函式庫</h1></div>
		<div id="contents">
			<h3><a name="contents">目錄</a></h3><a name="contents">
			</a><ul><a name="contents">
				</a><li><a name="contents">
					</a><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#assert.h" title="偵錯用巨集"><code>&lt;assert.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ctype.h" title="字元類別測試函式"><code>&lt;ctype.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno.h" title="回報部份函式的錯誤"><code>&lt;errno.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#float.h" title="浮點數的各種儲存極限"><code>&lt;float.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#limits.h" title="數值的各種儲存極限"><code>&lt;limits.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#locale.h" title="語言本地化資訊"><code>&lt;locale.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#math.h" title="數學運算函式"><code>&lt;math.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#setjmp.h" title="自訂流程跳躍"><code>&lt;setjmp.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#signal.h" title="終端機訊號發送與處理"><code>&lt;signal.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdarg.h" title="不定數目參數的處理"><code>&lt;stdarg.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stddef.h" title="常用值與常用型態定義"><code>&lt;stddef.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.h" title="輸入與輸出函式"><code>&lt;stdio.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.h" title="常用函式"><code>&lt;stdlib.h&gt;</code></a>
				</li>
				<li>
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.h" title="字串處理用函式"><code>&lt;string.h&gt;</code></a>
				</li>
				<li>
					<a href="CStandardLibrary.htm" title="日期時間處理用函式"><code>&lt;time.h&gt;</code></a>
				</li>
			</ul>
			<ul id="commet">
				<li>上次修改：2007.09.30</li>
				<li>作者：<a href="http://www.utas.edu.au/infosys/info/documentation/C/CStdLib.html">Ross L Richardson</a></li>
				<li>翻譯：BestSteve</li>
			</ul>
			<a href="http://validator.w3.org/check?uri=referer">
				<img class="volid_standard" id="valid_xhtml" src="valid-xhtml10" alt="Valid XHTML 1.0 Strict">
			</a>
			<a href="http://jigsaw.w3.org/css-validator/check/referer">
				<img class="volid_standard" src="vcss" alt="Valid CSS!">
			</a>
		</div>
		<div id="main">
			<h2>
				<a name="assert.h" id="assert.h">&lt;assert.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code>void assert(int <var>expression</var>);</code>
				</dt>
				<dd>
				用來偵測錯誤的<em>巨集</em>（當引入<code>&lt;assert.h&gt;</code>後在<code>NDEBUG</code>被定義時忽略。）如果<var>expression</var>等於零，就會在<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stderr">stderr</a></code>輸出訊息，並且呼叫<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#abort">abort</a>結束程式。訊息裡的程式檔名與行號是來自於預處理程式的預設巨集<code>__FILE__</code>和<code>__LINE__</code>.
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="ctype.h" id="ctype.h">&lt;ctype.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code>int isalnum(int <var>c</var>);</code>
				</dt>
				<dd>
					<code>isalpha(<var>c</var>)</code> 或 <code>isdigit(<var>c</var>)</code>。
				</dd>
				<dt>
					<code>int isalpha(int <var>c</var>);</code>
				</dt>
				<dd>
					<code>isupper(<var>c</var>)</code> 或 <code>islower(<var>c</var>)</code>。
				</dd>
				<dt>
					<code>int iscntrl(int <var>c</var>);</code>
				</dt>
				<dd>
					是否為控制字元。在<acronym title="American Standard Code for Information Interchange">ASCII</acronym>中，控制字元為<code>0x00</code>（<code>NUL</code>）至<code>0x1F</code>（<code>US</code>），還有<code>0x7F</code>（<code>DEL</code>）。
				</dd>
				<dt>
					<code>int isdigit(int <var>c</var>);</code>
				</dt>
				<dd>
					是否為數值字元。
				</dd>
				<dt>
					<code>int isgraph(int <var>c</var>);</code>
				</dt>
				<dd>
					是否為非空白的可列印字元。
				</dd>
				<dt>
					<code>int islower(int <var>c</var>);</code>
				</dt>
				<dd>
					是否為小寫字母字元。
				</dd>
				<dt>
					<code>int isprint(int <var>c</var>);</code>
				</dt>
				<dd>
					是否為可列印字元（包括空白）。在ASCII，可列印字元為<code>0x20</code>（<code>' '</code>）至<code>0x7E</code>（<code>'~'</code>）
				</dd>
				<dt>
					<code>int ispunct(int <var>c</var>);</code>
				</dt>
				<dd>
					是否為非空白字元、字母字元、數字字元的可列印字元。
				</dd>
				<dt>
					<code>int isspace(int <var>c</var>);</code>
				</dt>
				<dd>
					是否為空白字元、換頁字元、換行字元、回車字元、水平製表字元、垂直製表字元。
				</dd>
				<dt>
					<code>int isupper(int <var>c</var>);</code>
				</dt>
				<dd>
					是否為大寫寫字母字元。
				</dd>
				<dt>
					<code>int isxdigit(int <var>c</var>);</code>
				</dt>
				<dd>
					是否為十六進位數值字元。
				</dd>
				<dt>
					<code>int tolower(int <var>c</var>);</code>
				</dt>
				<dd>
					傳回等價小寫字母字元。
				</dd>
				<dt>
					<code>int toupper(int <var>c</var>);</code>
				</dt>
				<dd>
					傳回等價大寫字母字元。
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="errno.h" id="errno.h">&lt;errno.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code><a name="errno" id="errno">errno</a></code>
				</dt>
				<dd>
					用來讓標準函式庫的<strong>某些</strong>函式發生錯誤時設定成特定的正值。
				</dd>
				<dt>
					<code><a name="EDOM" id="EDOM">EDOM</a></code>
				</dt>
				<dd>
					代表不在定義域錯誤的值。
				</dd>
				<dt>
					<code><a name="ERANGE" id="ERANGE">ERANGE</a></code>
				</dt>
				<dd>
					代表溢位錯誤的值。
				</dd>
			</dl>
			<p class="note">
				註：
			</p>
			<ul class="note">
				<li>
					宣告其他錯誤值是允許的。
				</li>
				<li>
					要檢查標準函式庫函式設定的<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a>時，必須要在函式呼叫前將<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a>設為0。
				</li>
			</ul>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="float.h" id="float.h">&lt;float.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code><a name="FLT_RADIX" id="FLT_RADIX">FLT_RADIX</a></code>
				</dt>
				<dd>
					浮點數的基數
				</dd>
				<dt>
					<code>FLT_ROUNDS</code>
				</dt>
				<dd>
					浮點數的捨去模式
					<dl>
						<dt>-1</dt>
						<dd>未定</dd>
						<dt>0</dt>
						<dd>往0捨去</dd>
						<dt>1</dt>
						<dd>往最近的值捨去</dd>
						<dt>2</dt>
						<dd>往正無限大捨去</dd>
						<dt>3</dt>
						<dd>往負無限大捨去</dd>
					</dl>
				</dd>
			</dl>
			<p class="note">
				前置詞「<code>FLT</code>」用於<code>float</code>型態，「<code>DBL</code>」用於<code>double</code>，而「<code>LDBL</code>」用於<code>long double</code>型態。
			</p>
			<dl>
				<dt>
					<code>FLT_DIG</code>
				</dt>
				<dt>
					<code>DBL_DIG</code>
				</dt>
				<dt>
					<code>LDBL_DIG</code>
				</dt>
				<dd>
					精確度（十進位數字）。
				</dd>
				<dt>
					<code>FLT_EPSILON</code>
				</dt>
				<dt>
					<code>DBL_EPSILON</code>
				</dt>
				<dt>
					<code>LDBL_EPSILON</code>
				</dt>
				<dd>
					最小的數<var>x</var>使得<code>1.0 + <var>x</var> != 1.0</code>成立。
				</dd>
				<dt>
					<code>FLT_MANT_DIG</code>
				</dt>
				<dt>
					<code>DBL_MANT_DIG</code>
				</dt>
				<dt>
					<code>LDBL_MANT_DIG</code>
				</dt>
				<dd>
					number of digits, base
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FLT_RADIX">FLT_RADIX</a></code>, in
					mantissa
				</dd>
				<dt>
					<code>FLT_MAX</code>
				</dt>
				<dt>
					<code>DBL_MAX</code>
				</dt>
				<dt>
					<code>LDBL_MAX</code>
				</dt>
				<dd>
					最大值
				</dd>
				<dt>
					<code>FLT_MAX_EXP</code>
				</dt>
				<dt>
					<code>DBL_MAX_EXP</code>
				</dt>
				<dt>
					<code>LDBL_MAX_EXP</code>
				</dt>
				<dd>
					largest positive integer exponent to which
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FLT_RADIX">FLT_RADIX</a></code> can
					be raised and remain representable
				</dd>
				<dt>
					<code>FLT_MIN</code>
				</dt>
				<dt>
					<code>DBL_MIN</code>
				</dt>
				<dt>
					<code>LDBL_MIN</code>
				</dt>
				<dd>
					minimum normalised number
				</dd>
				<dt>
					<code>FLT_MIN_EXP</code>
				</dt>
				<dt>
					<code>DBL_MIN_EXP</code>
				</dt>
				<dt>
					<code>LDBL_MIN_EXP</code>
				</dt>
				<dd>
					smallest negative integer exponent to which
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FLT_RADIX">FLT_RADIX</a></code> can
					be raised and remain representable
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="limits.h" id="limits.h">&lt;limits.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code>CHAR_BIT</code>
				</dt>
				<dd>
					型態<code>char</code>中有幾bit。
				</dd>
				<dt>
					<code>CHAR_MAX</code>
				</dt>
				<dd>
					型態<code>char</code>的最大值。
				</dd>
				<dt>
					<code>CHAR_MIN</code>
				</dt>
				<dd>
					型態<code>char</code>的最小值。
				</dd>
				<dt>
					<code>SCHAR_MAX</code>
				</dt>
				<dd>
					型態<code>signed char</code>的最大值。
				</dd>
				<dt>
					<code>SCHAR_MIN</code>
				</dt>
				<dd>
					型態<code>signed char</code>的最小值。
				</dd>
				<dt>
					<code>UCHAR_MAX</code>
				</dt>
				<dd>
					型態<code>unsigned char</code>的最大值。
				</dd>
				<dt>
					<code>SHRT_MAX</code>
				</dt>
				<dd>
					型態<code>short</code>的最大值。
				</dd>
				<dt>
					<code>SHRT_MIN</code>
				</dt>
				<dd>
					型態<code>short</code>的最小值。
				</dd>
				<dt>
					<code>USHRT_MAX</code>
				</dt>
				<dd>
					型態<code>unsigned short</code>的最大值。
				</dd>
				<dt>
					<code>INT_MAX</code>
				</dt>
				<dd>
					型態<code>int</code>的最大值。
				</dd>
				<dt>
					<code>INT_MIN</code>
				</dt>
				<dd>
					型態<code>int</code>的最小值。
				</dd>
				<dt>
					<code>UINT_MAX</code>
				</dt>
				<dd>
					型態<code>unsigned int</code>的最大值。
				</dd>
				<dt>
					<code><a name="LONG_MAX" id="LONG_MAX">LONG_MAX</a></code>
				</dt>
				<dd>
					型態<code>long</code>的最大值。
				</dd>
				<dt>
					<code><a name="LONG_MIN" id="LONG_MIN">LONG_MIN</a></code>
				</dt>
				<dd>
					型態<code>long</code>的最小值。
				</dd>
				<dt>
					<code><a name="ULONG_MAX" id="ULONG_MAX">ULONG_MAX</a></code>
				</dt>
				<dd>
					型態<code>unsigned long</code>的最大值。
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="locale.h" id="locale.h">&lt;locale.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code><a name="lconv" id="lconv">struct lconv</a></code>
				</dt>
				<dd>
					描述貨幣格式和其他數值：
					<dl>
						<dt>
							<code>char* <a name="decimal_point" id="decimal_point">decimal_point</a>;</code>
						</dt>
						<dd>
							非貨幣值的小數點。
						</dd>
						<dt>
							<code>char* grouping;</code>
						</dt>
						<dd>
							sizes of digit groups for non-monetary values
						</dd>
						<dt>
							<code>char* thousands_sep;</code>
						</dt>
						<dd>
							separator for digit groups for non-monetary values (left of "decimal point")
						</dd>
						<dt>
							<code>char* currency_symbol;</code>
						</dt>
						<dd>
							貨幣符號。
						</dd>
						<dt>
							<code>char* int_curr_symbol;</code>
						</dt>
						<dd>
							ISO 4217國際貨幣代號。
						</dd>
						<dt>
							<code>char* mon_decimal_point;</code>
						</dt>
						<dd>
							貨幣值的小數點。
						</dd>
						<dt>
							<code>char* mon_grouping;</code>
						</dt>
						<dd>
							sizes of digit groups for monetary values
						</dd>
						<dt>
							<code>char* mon_thousands_sep;</code>
						</dt>
						<dd>
							separator for digit groups for monetary values (left of "decimal point")
						</dd>
						<dt>
							<code>char* negative_sign;</code>
						</dt>
						<dd>
							貨幣值的負數記號。
						</dd>
						<dt>
							<code>char* positive_sign;</code>
						</dt>
						<dd>
							貨幣值的正數記號。
						</dd>
						<dt>
							<code>char frac_digits;</code>
						</dt>
						<dd>
							貨幣值顯示小數點以下幾位。
						</dd>
						<dt>
							<code>char int_frac_digits;</code>
						</dt>
						<dd>
							國際貨幣值顯示小數點以下幾位。
						</dd>
						<dt>
							<code>char n_cs_precedes;</code>
						</dt>
						<dd>
							貨幣符號在負數貨幣值的前方（<code>1</code>）或後方（<code>0</code>）。
						</dd>
						<dt>
							<code>char n_sep_by_space;</code>
						</dt>
						<dd>
							whether currency symbol is (<code>1</code>) or is not (<code>0</code>) separated by space from negative monetary values
						</dd>
						<dt>
							<code><a name="n_sign_posn" id="n_sign_posn">char
							n_sign_posn</a>;</code>
						</dt>
						<dd>
							format for negative monetary values:
							<dl>
								<dt>
									<code>0</code>
								</dt>
								<dd>
									parentheses surround quantity and currency symbol
								</dd>
								<dt>
									<code>1</code>
								</dt>
								<dd>
									sign precedes quantity and currency symbol
								</dd>
								<dt>
									<code>2</code>
								</dt>
								<dd>
									sign follows quantity and currency
									symbol
								</dd>
								<dt>
									<code>3</code>
								</dt>
								<dd>
									sign immediately precedes currency symbol
								</dd>
								<dt>
									<code>4</code>
								</dt>
								<dd>
									sign immediately follows currency symbol
								</dd>
							</dl>
						</dd>
						<dt>
							<code>char p_cs_precedes;</code>
						</dt>
						<dd>
							貨幣符號在正數貨幣值的前方（<code>1</code>）或後方（<code>0</code>）。
						</dd>
						<dt>
							<code>char p_sep_by_space;</code>
						</dt>
						<dd>
							whether currency symbol is (<code>1</code>) or is not (<code>0</code>) separated by space from non-negative monetary values
						</dd>
						<dt>
							<code>char p_sign_posn;</code>
						</dt>
						<dd>
							format for non-negative monetary values, with values as for
							<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#n_sign_posn">n_sign_posn</a></code>
						</dd>
					</dl>
					Implementations may change field order and include additional fields. <em>Standard C Library</em> functions use only <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#decimal_point">decimal_point</a></code>.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#lconv">struct lconv</a>* localeconv(void);</code>
				</dt>
				<dd>
					returns pointer to formatting information for current locale
				</dd>
				<dt>
					<code>char* setlocale(int <var><a name="category" id="category">category</a></var>, const char* locale);</code>
				</dt>
				<dd>
					Sets components of locale according to specified <code><var><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#category">category</a></var></code> and <code><var>locale</var></code>. Returns string describing new locale or null on error. (Implementations are permitted to define values of <code><var><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#category">category</a></var></code> additional to those describe here.)
				</dd>
				<dt>
					<code>LC_ALL</code>
				</dt>
				<dd>
					<code><var><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#category">category</a></var></code> argument for all categories
				</dd>
				<dt>
					<code>LC_NUMERIC</code>
				</dt>
				<dd>
					<code><var><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#category">category</a></var></code> for numeric formatting information
				</dd>
				<dt>
					<code>LC_MONETARY</code>
				</dt>
				<dd>
					<code><var><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#category">category</a></var></code> for monetary formatting information
				</dd>
				<dt>
					<code>LC_COLLATE</code>
				</dt>
				<dd>
					<code><var><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#category">category</a></var></code> for information affecting collating functions
				</dd>
				<dt>
					<code>LC_CTYPE</code>
				</dt>
				<dd>
					<code><var><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#category">category</a></var></code> for information affecting <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ctype.h">character class tests</a> functions
				</dd>
				<dt>
					<code>LC_TIME</code>
				</dt>
				<dd>
					<code><var><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#category">category</a></var></code> for information affecting time conversions functions
				</dd>
				<dt>
					<code>NULL</code>
				</dt>
				<dd>
					空指標常數。
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="math.h" id="math.h">&lt;math.h&gt;</a>
			</h2>
			<p class="note">
				發生定義域錯誤時，<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a></code>會被設成<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EDOM">EDOM</a></code>。發生溢位錯誤時，<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a></code>會被設成<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ERANGE">ERANGE</a></code>。溢位時傳回和結果同正負號的<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#HUGE_VAL">HUGE_VAL</a></code>，而下溢時傳回0。角度單位為徑度。
			</p>
			<dl>
				<dt>
					<code><a name="HUGE_VAL" id="HUGE_VAL">HUGE_VAL</a></code>
				</dt>
				<dd>
					發生溢位錯誤時傳回的值（和結果同正負號）。
				</dd>
				<dt>
					<code>double exp(double <var>x</var>);</code>
				</dt>
				<dd>
					<code><var>x</var></code>的指數。
				</dd>
				<dt>
					<code>double log(double <var>x</var>);</code>
				</dt>
				<dd>
					<code><var>x</var></code>的自然對數。
				</dd>
				<dt>
					<code>double log10(double <var>x</var>);</code>
				</dt>
				<dd>
					<code><var>x</var></code>以10為底的對數。
				</dd>
				<dt>
					<code>double pow(double <var>x</var>, double <var>y</var>);</code>
				</dt>
				<dd>
					<code><var>x</var></code>的<code><var>y</var></code>次方。
				</dd>
				<dt>
					<code>double sqrt(double <var>x</var>);</code>
				</dt>
				<dd>
					<code><var>x</var></code>的平方根。
				</dd>
				<dt>
					<code>double ceil(double <var>x</var>);</code>
				</dt>
				<dd>
					比<code><var>x</var></code>大的最小整數。
				</dd>
				<dt>
					<code>double floor(double <var>x</var>);</code>
				</dt>
				<dd>
					比<code><var>x</var></code>小的最大整數。
				</dd>
				<dt>
					<code>double fabs(double <var>x</var>);</code>
				</dt>
				<dd>
					<code><var>x</var></code>的絕對值。
				</dd>
				<dt>
					<code>double ldexp(double <var>x</var>, int
					<var>n</var>);</code>
				</dt>
				<dd>
					<code><var>x</var></code> times 2 to the power <code><var>n</var></code>
				</dd>
				<dt>
					<code>double frexp(double <var>x</var>, int* <var>exp</var>);</code>
				</dt>
				<dd>
					if <code><var>x</var></code> non-zero, returns value, with absolute value in interval [1/2, 1), and assigns to <code>*<var>exp</var></code> integer such that product of return value and 2 raised to the power <code>*<var>exp</var></code> equals <code><var>x</var></code>; if <code><var>x</var></code> zero, both return value and <code>*<var>exp</var></code> are zero
				</dd>
				<dt>
					<code>double modf(double <var>x</var>, double*
					<var>ip</var>);</code>
				</dt>
				<dd>
					returns fractional part and assigns to
					<code>*<var>ip</var></code> integral part of
					<code><var>x</var></code>, both with same sign as
					<code><var>x</var></code>
				</dd>
				<dt>
					<code>double fmod(double <var>x</var>, double
					<var>y</var>);</code>
				</dt>
				<dd>
					if <code><var>y</var></code> non-zero,
					floating-point remainder of
					<code><var>x</var>/<var>y</var></code>, with same
					sign as <code><var>x</var></code>; if
					<code><var>y</var></code> zero, result is
					implementation-defined
				</dd>
				<dt>
					<code>double sin(double <var>x</var>);</code>
				</dt>
				<dd>
					sine of <code><var>x</var></code>
				</dd>
				<dt>
					<code>double cos(double <var>x</var>);</code>
				</dt>
				<dd>
					cosine of <code><var>x</var></code>
				</dd>
				<dt>
					<code>double tan(double <var>x</var>);</code>
				</dt>
				<dd>
					tangent of <code><var>x</var></code>
				</dd>
				<dt>
					<code>double asin(double <var>x</var>);</code>
				</dt>
				<dd>
					arc-sine of <code><var>x</var></code>
				</dd>
				<dt>
					<code>double acos(double <var>x</var>);</code>
				</dt>
				<dd>
					arc-cosine of <code><var>x</var></code>
				</dd>
				<dt>
					<code>double atan(double <var>x</var>);</code>
				</dt>
				<dd>
					arc-tangent of <code><var>x</var></code>
				</dd>
				<dt>
					<code>double atan2(double <var>y</var>, double
					<var>x</var>);</code>
				</dt>
				<dd>
					arc-tangent of
					<code><var>y</var>/<var>x</var></code>
				</dd>
				<dt>
					<code>double sinh(double <var>x</var>);</code>
				</dt>
				<dd>
					hyperbolic sine of <code><var>x</var></code>
				</dd>
				<dt>
					<code>double cosh(double <var>x</var>);</code>
				</dt>
				<dd>
					hyperbolic cosine of <code><var>x</var></code>
				</dd>
				<dt>
					<code>double tanh(double <var>x</var>);</code>
				</dt>
				<dd>
					hyperbolic tangent of <code><var>x</var></code>
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="setjmp.h" id="setjmp.h">&lt;setjmp.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code><a name="jmp_buf" id="jmp_buf">jmp_buf</a></code>
				</dt>
				<dd>
					type of object holding context information
				</dd>
				<dt>
					<code>int setjmp(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#jmp_buf">jmp_buf</a>
					<var>env</var>);</code>
				</dt>
				<dd>
					Saves context information in
					<code><var>env</var></code> and returns zero.
					Subsequent call to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#longjmp">longjmp</a></code> with
					same <var>env</var> returns non-zero.
				</dd>
				<dt>
					<code>void longjmp(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#jmp_buf">jmp_buf</a>
					<var>env</var>, int <var>val</var>);</code>
				</dt>
				<dd>
					Restores context saved by most recent call to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#setjmp">setjmp</a></code> with
					specified <code><var>env</var></code>. Execution
					resumes as a second return from
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#setjmp">setjmp</a></code>, with
					returned value <code><var>val</var></code> if
					specified value non-zero, or 1 otherwise.
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="signal.h" id="signal.h">&lt;signal.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code><a name="sigabrt" id="sigabrt">SIGABRT</a></code>
				</dt>
				<dd>
					abnormal termination
				</dd>
				<dt>
					<code>SIGFPE</code>
				</dt>
				<dd>
					arithmetic error
				</dd>
				<dt>
					<code>SIGILL</code>
				</dt>
				<dd>
					invalid execution
				</dd>
				<dt>
					<code>SIGINT</code>
				</dt>
				<dd>
					(asynchronous) interactive attention
				</dd>
				<dt>
					<code>SIGSEGV</code>
				</dt>
				<dd>
					illegal storage access
				</dd>
				<dt>
					<code>SIGTERM</code>
				</dt>
				<dd>
					(asynchronous) termination request
				</dd>
				<dt>
					<code><a name="SIG_DFL" id="SIG_DFL">SIG_DFL</a></code>
				</dt>
				<dd>
					specifies default signal handling
				</dd>
				<dt>
					<code><a name="SIG_ERR" id="SIG_ERR">SIG_ERR</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#signal">signal</a></code> return
					value indicating error
				</dd>
				<dt>
					<code><a name="SIG_IGN" id="SIG_IGN">SIG_IGN</a></code>
				</dt>
				<dd>
					specifies that signal should be ignored
				</dd>
				<dt>
					<code>void (*<a name="signal" id="signal">signal</a>(int <var>sig</var>, void
					(*<var>handler</var>)(int)))(int);</code>
				</dt>
				<dd>
					Install handler for subsequent signal
					<var>sig</var>. If <code><var>handler</var></code>
					is <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#SIG_DFL">SIG_DFL</a></code>,
					implementation-defined default behaviour will be
					used; if
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#SIG_IGN">SIG_IGN</a></code>, signal
					will be ignored; otherwise function pointed to by
					<code><var>handler</var></code> will be invoked
					with argument <var>sig</var>. In the last case,
					handling is <strong>restored to default
					behaviour</strong> before
					<code><var>handler</var></code> is called. If
					<code><var>handler</var></code> returns, execution
					resumes where signal occurred.
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#signal">signal</a></code> returns
					the previous handler or <code>SIG_ERR</code> on
					error. Initial state is implementation-defined.
					Implementations may may define signals additional
					to those listed here.
				</dd>
				<dt>
					<code><a name="raise" id="raise">int raise(int
					<var>sig</var>);</a></code>
				</dt>
				<dd>
					Sends signal <code><var>sig</var></code>. Returns
					zero on success.
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="stdarg.h" id="stdarg.h">&lt;stdarg.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code><a name="va_list" id="va_list">va_list</a></code>
				</dt>
				<dd>
					type of object holding context information
				</dd>
				<dt>
					<code>void <a name="va_start" id="va_start">va_start</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_list">va_list</a>
					<var>ap</var>, <var>lastarg</var>);</code>
				</dt>
				<dd>
					Initialisation macro which must be called once
					before any unnamed argument is accessed. Stores
					context information in <code><var>ap</var></code>.
					<code><var>lastarg</var></code> is the last named
					parameter of the function.
				</dd>
				<dt>
					<code><var>type</var> <a name="vaarg" id="vaarg">va_arg</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_list">va_list</a>
					<var>ap</var>, <var>type</var>);</code>
				</dt>
				<dd>
					Yields value of the type
					(<code><var>type</var></code>) and value of the
					next unnamed argument.
				</dd>
				<dt>
					<code>void <a name="va_end" id="va_end">va_end</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_list">va_list</a>
					<var>ap</var>);</code>
				</dt>
				<dd>
					Termination macro which must be called once after
					argument processing and before exit from function.
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="stddef.h" id="stddef.h">&lt;stddef.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code>NULL</code>
				</dt>
				<dd>
					Null pointer constant.
				</dd>
				<dt>
					<code>offsetof(<var>stype</var>,
					<var>m</var>)</code>
				</dt>
				<dd>
					Offset (in bytes) of member
					<code><var>m</var></code> from start of structure
					type <code><var>stype</var></code>.
				</dd>
				<dt>
					<code>ptrdiff_t</code>
				</dt>
				<dd>
					Type for objects declared to store result of
					subtracting pointers.
				</dd>
				<dt>
					<code>size_t</code>
				</dt>
				<dd>
					Type for objects declared to store result of
					<code>sizeof</code> operator.
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="stdio.h" id="stdio.h">&lt;stdio.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code><a name="BUFSIZ" id="BUFSIZ">BUFSIZ</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#setbuf">setbuf</a></code>函式使用的預設緩衝區大小。
				</dd>
				<dt>
					<code><a name="EOF" id="EOF">EOF</a></code>
				</dt>
				<dd>
					表示資料流結束或資料流讀取錯誤的值。
				</dd>
				<dt>
					<code>FILENAME_MAX</code>
				</dt>
				<dd>
					檔案名稱的長度上限。
				</dd>
				<dt>
					<code>FOPEN_MAX</code>
				</dt>
				<dd>
					同時可開啟檔案的數目上限。
				</dd>
				<dt>
					<code><a name="L_tmpnam" id="L_tmpnam">L_tmpnam</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#tmpnam">tmpnam</a></code>函式需要多大的字元陣列來儲存暫存檔檔名。
				</dd>
				<dt>
					<code><a name="stdio.NULL" id="stdio.NULL">NULL</a></code>
				</dt>
				<dd>
					空指標常數。
				</dd>
				<dt>
					<code><a name="SEEK_CUR" id="SEEK_CUR">SEEK_CUR</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fseek">fseek</a></code>函式的<code><var>origin</var></code>參數值，代表檔案目前位置。
				</dd>
				<dt>
					<code><a name="SEEK_END" id="SEEK_END">SEEK_END</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fseek">fseek</a></code>函式的<code><var>origin</var></code>參數值，代表檔案結尾。
				</dd>
				<dt>
					<code><a name="SEEK_SET" id="SEEK_SET">SEEK_SET</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fseek">fseek</a></code>函式的<code><var>origin</var></code>參數值，代表檔案開頭。
				</dd>
				<dt>
					<code><a name="TMP_MAX" id="TMP_MAX">TMP_MAX</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#tmpnam">tmpnam</a></code>函式最少能產生多少不重複的暫存檔檔名。
				</dd>
				<dt>
					<code><a name="_IOFBF" id="_IOFBF">_IOFBF</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#setvbuf">setvbuf</a></code>函式的<code><var>mode</var></code>參數值，代表緩衝器填滿後釋出。
				</dd>
				<dt>
					<code><a name="_IOLBF" id="_IOLBF">_IOLBF</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#setvbuf">setvbuf</a></code>函式的<code><var>mode</var></code>參數值，代表緩衝器遇到換行後釋出。
				</dd>
				<dt>
					<code><a name="_IONBF" id="_IONBF">_IONBF</a></code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#setvbuf">setvbuf</a></code>函式的<code><var>mode</var></code>參數值，代表不使用緩衝器。
				</dd>
				<dt>
					<code><a name="stdin" id="stdin">stdin</a></code>
				</dt>
				<dd>
					指向標準輸入字元流的檔案指標。程式開始執行時會被自動開啟。
				</dd>
				<dt>
					<code><a name="stdout" id="stdout">stdout</a></code>
				</dt>
				<dd>
					指向標準輸出字元流的檔案指標。程式開始執行時會被自動開啟。
				</dd>
				<dt>
					<code><a name="stderr" id="stderr">stderr</a></code>
				</dt>
				<dd>
					指向標準錯誤輸出字元流的檔案指標。程式開始執行時會被自動開啟。
				</dd>
				<dt>
					<code><a name="FILE" id="FILE">FILE</a></code>
				</dt>
				<dd>
					宣告含有控制字元流所需資訊的物件類型。
				</dd>
				<dt>
					<code><a name="fpos_t" id="fpos_t">fpos_t</a></code>
				</dt>
				<dd>
					宣告檔案游標位置資訊的物件類型。
				</dd>
				<dt>
					<code><a name="stdio.size_t" id="stdio.size_t">size_t</a></code>
				</dt>
				<dd>
					宣告用來儲存<code>sizeof</code>運算子結果的物件類型。
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>* <a name="fopen" id="fopen">fopen</a>(const char* <var>filename</var>, const char* <var>mode</var>);</code>
				</dt>
				<dd>
					開啟檔名為<code><var>filename</var></code>的檔案並傳回字元流，失敗時傳回<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.NULL">NULL</a></code>。<code><var>mode</var></code> 可以是以下選項：
					<dl>
						<dt>
							<code>"r"</code>
						</dt>
						<dd>
							以純文字檔案方式讀取。
						</dd>
						<dt>
							<code>"w"</code>
						</dt>
						<dd>
							以純文字檔案方式寫入。
						</dd>
						<dt>
							<code>"a"</code>
						</dt>
						<dd>
							以純文字檔案方式添加在尾端。
						</dd>
						<dt>
							<code>"r+"</code>
						</dt>
						<dd>
							以純文字檔案方式更新（讀取、寫入）。
						</dd>
						<dt>
							<code>"w+"</code>
						</dt>
						<dd>
							以純文字檔案方式更新，清除原始檔案內容（如果有的話）。
						</dd>
						<dt>
							<code>"a+"</code>
						</dt>
						<dd>
							以純文字檔案方式添加在尾端，在尾端讀取和寫入。
						</dd>
					</dl>或是在以上字串插入<code>b</code>（要在第一個字元以後），表示以二進位檔案方式。
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>* freopen(const char* <var>filename</var>, const char* <var>mode</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>* <var>stream</var>);</code>
				</dt>
				<dd>
					關閉<code><var>stream</var></code>指向的檔案，然後以指定的模式開啟檔名為<code><var>filename</var></code>的檔案，將<code><var>stream</var></code>與之連結。傳回<code><var>stream</var></code>，錯誤時傳回<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.NULL">NULL</a></code>。
				</dd>
				<dt>
					<code>int <a name="fflush" id="fflush">fflush</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>* <var>stream</var>);</code>
				</dt>
				<dd>
					釋出字元流<code><var>stream</var></code>的緩衝器，成功時傳回0或失敗時傳回<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EOF">EOF</a>。對不可輸出的字元流使用時，效果未定義。<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fflush">fflush</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.NULL">NULL</a>)</code>會釋出所有輸出用字元流的緩衝器。
				</dd>
				<dt>
					<code>int <a name="fclose" id="fclose">fclose</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>* <var>stream</var>);</code>
				</dt>
				<dd>
					關閉<code><var>stream</var></code>指向的字元流（如果是輸出用字元流，則先釋出緩衝區）。錯誤時傳回<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EOF">EOF</a></code>，否則傳回0。
				</dd>
				<dt>
					<code>int <a name="remove" id="remove">remove</a>(const char* <var>filename</var>);</code>
				</dt>
				<dd>
					移除指定檔案。錯誤時傳回非0的值。
				</dd>
				<dt>
					<code>int <a name="rename" id="rename">rename</a>(const char* <var>oldname</var>, const char* <var>newname</var>);</code>
				</dt>
				<dd>
					把檔案<code><var>oldname</var></code>更名成<code><var>newname</var></code>。失敗時傳回非0的值。
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>* <a name="tmpfile" id="tmpfile">tmpfile</a>();</code>
				</dt>
				<dd>
					建立暫存檔案（模式為<code>"wb+"</code>），此檔案被關閉或程式正常結束時會被刪除。傳回字元流，失敗時傳回<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.NULL">NULL</a></code>。
				</dd>
				<dt>
					<code>char* <a name="tmpname" id="tmpname">tmpname</a>(char <var>s</var>[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#L_tmpnam">L_tmpnam</a>]);</code>
				</dt>
				<dd>
					對<code><var>s</var></code>寫入（如果<code><var>s</var></code>不是<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.NULL">NULL</a></code>）並傳回一個唯一的暫存檔檔名。此檔名對於前<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#TMP_MAX">TMP_MAX</a></code>次函數呼叫的結果都是不同的。
				</dd>
				<dt>
					<code>int <a name="setvbuf" id="setvbuf">setvbuf</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>* <var>stream</var>, char* <var>buf</var>, int <var>mode</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a> <var>size</var>);</code>
				</dt>
				<dd>
					Controls buffering for stream <code><var>stream</var></code>. <code><var>mode</var></code> is <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#_IOFBF">_IOFBF</a></code> for full buffering, <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#_IOLBF">_IOLBF</a></code> for line buffering, <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#_IONBF">_IONBF</a></code> for no buffering. Non-null <code><var>buf</var></code> specifies buffer of size <code><var>size</var></code> to be used; otherwise, a buffer is allocated. Returns non-zero on error. Call must be before any other operation on stream.
				</dd>
				<dt>
					<code>void <a name="setbuf" id="setbuf">setbuf</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>, char* <var>buf</var>);</code>
				</dt>
				<dd>
					Controls buffering for stream <var>stream</var>.
					For null <code><var>buf</var></code>, turns off
					buffering, otherwise equivalent to
					<code>(void)<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#setvbuf">setvbuf</a>(<var>stream</var>,&nbsp;<var>
					buf</var>,&nbsp;<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#_IOFBF">_IOFBF</a>,&nbsp;<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#BUFSIZ">
					BUFSIZ</a>)</code>.
				</dd>
				<dt>
					<code>int <a name="fprintf" id="fprintf">fprintf</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>, const char* <var>format</var>,
					...);</code>
				</dt>
				<dd>
					根據字串<code><var>format</var></code>轉換參數，並且輸出到字元流<code><var>stream</var></code>。傳回輸出的字元數目，發生錯誤時傳回負數。轉換指令包含：
					<ul>
						<li>
							<code>%</code>
						</li>
						<li>
							(可選擇) 旗標：
							<dl>
								<dt>
									<code>-</code>
								</dt>
								<dd>
									靠左對齊
								</dd>
								<dt>
									<code>+</code>
								</dt>
								<dd>
									永遠有正負號
								</dd>
								<dt>
									<em>space</em>
								</dt>
								<dd>
									正號時加上空白
								</dd>
								<dt>
									<code>0</code>
								</dt>
								<dd>
									以0填空格
								</dd>
								<dt>
									<code>#</code>
								</dt>
								<dd>
									Alternate form: for conversion
									character <code>o</code>, first
									digit will be zero, for
									[<code>xX</code>], prefix
									<code>0x</code> or <code>0X</code>
									to non-zero value, for
									[<code>eEfgG</code>], always
									decimal point, for
									[<code>gG</code>] trailing zeros
									not removed.
								</dd>
							</dl>
						</li>
						<li>
							(可選擇) 最小寬度：如果標示為 <code>*</code> ，則從下個參數取值(型態必須要是<code>int</code>)。
						</li>
						<li>
							(可選擇) <code>.</code> (分開精確度標示與最小寬度標示)：
						</li>
						<li>
							(可選擇) 精確度：對於轉換字元<code>s</code>，代表該字串最多輸出多少字元，對於[<code>eEf</code>]，代表小數點後的位數，對於[<code>gG</code>]，代表有效位數，對於整數，代表最少要輸出幾位數。如果標示為 <code>*</code> ，則從下個參數取值(型態必須要是<code>int</code>)。
						</li>
						<li>
							(可選擇) 型態長度修飾字：
							<dl>
								<dt>
									<code>h</code>
								</dt>
								<dd>
									<code>short</code>或是<code>unsigned short</code>
								</dd>
								<dt>
									<code>l</code>
								</dt>
								<dd>
									<code>long</code>或是<code>unsigned long</code>
								</dd>
								<dt>
									<code>L</code>
								</dt>
								<dd>
									<code>long double</code>
								</dd>
							</dl>
						</li>
						<li>
							轉換字元：
							<dl>
								<dt>
									<code>d,i</code>
								</dt>
								<dd>
									型態<code>int</code>的參數，視為有正負號的十進位數輸出
								</dd>
								<dt>
									<code>o</code>
								</dt>
								<dd>
									型態<code>int</code>的參數，視為有正負號的八進位數輸出
								</dd>
								<dt>
									<code>x,X</code>
								</dt>
								<dd>
									型態<code>int</code>的參數，視為有正負號的十六進位數輸出
								</dd>
								<dt>
									<code>u</code>
								</dt>
								<dd>
									型態<code>int</code>的參數，視為無正負號的十進位數輸出
								</dd>
								<dt>
									<code>c</code>
								</dt>
								<dd>
									型態<code>int</code>的參數，視為單一字元輸出
								</dd>
								<dt>
									<code>s</code>
								</dt>
								<dd>
									型態<code>char*</code>的參數
								</dd>
								<dt>
									<code>f</code>
								</dt>
								<dd>
									型態<code>double</code>的參數，以[<code>-</code>]<var>mmm</var><code>.</code><var>ddd</var>的格式輸出
								</dd>
								<dt>
									<code>e,E</code>
								</dt>
								<dd>
									型態<code>double</code>的參數，以[<code>-</code>]<var>m</var><code>.</code><var>dddddd</var>(<code>e</code>|<code>E</code>)(<code>+</code>|<code>-</code>)<var>xx</var>的格式輸出
								</dd>
								<dt>
									<code>g,G</code>
								</dt>
								<dd>
									型態<code>double</code>的參數
								</dd>
								<dt>
									<code>p</code>
								</dt>
								<dd>
									型態<code>void*</code>的參數，以指標位址輸出
								</dd>
								<dt>
									<code>n</code>
								</dt>
								<dd>
									型態<code>int*</code>的參數：到目前為止已輸出的字元數目將<em>寫回</em>此參數
								</dd>
								<dt>
									<code>%</code>
								</dt>
								<dd>
									不需要參數；輸出%
								</dd>
							</dl>
						</li>
					</ul>
				</dd>
				<dt>
					<code>int <a name="printf" id="printf">printf</a>(const char*
					<var>format</var>, ...);</code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#printf">printf</a>(f, ...)</code>等價於<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fprintf">fprintf</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdout">stdout</a>, f, ...)</code>
				</dd>
				<dt>
					<code>int <a name="sprintf" id="sprintf">sprintf</a>(char* <var>s</var>, const
					char* <var>format</var>, ...);</code>
				</dt>
				<dd>
					Like <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fprintf">fprintf</a>, but output
					written into string <code><var>s</var></code>,
					which <strong>must be large enough to hold the
					output</strong>, rather than to a stream. Output is
					<code>NUL</code>-terminated. Returns length
					(excluding the terminating <code>NUL</code>).
				</dd>
				<dt>
					<code>int <a name="vfprintf" id="vfprintf">vfprintf</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>, const char* <var>format</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_list">va_list</a>
					<var>arg</var>);</code>
				</dt>
				<dd>
					Equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fprintf">fprintf</a></code> with
					variable argument list replaced by
					<code><var>arg</var></code>, which must have been
					initialised by the
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_start">va_start</a></code> macro
					(and may have been used in calls to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_arg">va_arg</a></code>).
				</dd>
				<dt>
					<code>int <a name="vprintf" id="vprintf">vprintf</a>(const char*
					<var>format</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_list">va_list</a>
					<var>arg</var>);</code>
				</dt>
				<dd>
					Equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#printf">printf</a></code> with
					variable argument list replaced by
					<code><var>arg</var></code>, which must have been
					initialised by the
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_start">va_start</a></code> macro
					(and may have been used in calls to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_arg">va_arg</a></code>).
				</dd>
				<dt>
					<code>int vsprintf(char* <var>s</var>, const char*
					<var>format</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_list">va_list</a>
					<var>arg</var>);</code>
				</dt>
				<dd>
					Equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#sprintf">sprintf</a></code> with
					variable argument list replaced by
					<code><var>arg</var></code>, which must have been
					initialised by the
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_start">va_start</a></code> macro
					(and may have been used in calls to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#va_arg">va_arg</a></code>).
				</dd>
				<dt>
					<code>int <a name="fscanf" id="fscanf">fscanf</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>, const char* <var>format</var>,
					...);</code>
				</dt>
				<dd>
					Performs formatted input conversion, reading from
					stream <code><var>stream</var></code> according to
					format <code><var>format</var></code>. The function
					returns when <code><var>format</var></code> is
					fully processed. Returns number of items converted
					and assigned, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EOF">EOF</a></code> if end-of-file
					or error occurs before any conversion. Each of the
					arguments following <code><var>format</var></code>
					<strong>must be a pointer</strong>. Format string
					may contain:
					<ul>
						<li>
							blanks and tabs, which are ignored
						</li>
						<li>
							ordinary characters, which are expected to
							match next non-white-space of input
						</li>
						<li>
							conversion specifications, consisting of:
							<ul>
								<li>
									<code>%</code>
								</li>
								<li>
									(optional) assignment suppression
									character "<code>*</code>"
								</li>
								<li>
									(optional) maximum field width
								</li>
								<li>
									(optional) target width indicator:
									<dl>
										<dt>
											<code>h</code>
										</dt>
										<dd>
											argument is pointer to
											<code>short</code> rather
											than <code>int</code>
										</dd>
										<dt>
											<code>l</code>
										</dt>
										<dd>
											argument is pointer to
											<code>long</code> rather
											than <code>int</code>, or
											<code>double</code> rather
											than <code>float</code>
										</dd>
										<dt>
											<code>L</code>
										</dt>
										<dd>
											argument is pointer to
											<code>long double</code>
											rather than
											<code>float</code>
										</dd>
									</dl>
								</li>
								<li>
									conversion character: 
									<dl>
										<dt>
											<code>d</code>
										</dt>
										<dd>
											decimal integer;
											<code>int*</code> parameter
											required
										</dd>
										<dt>
											<code>i</code>
										</dt>
										<dd>
											integer; <code>int*</code>
											parameter required;
											decimal, octal or hex
										</dd>
										<dt>
											<code>o</code>
										</dt>
										<dd>
											octal integer;
											<code>int*</code> parameter
											required
										</dd>
										<dt>
											<code>u</code>
										</dt>
										<dd>
											unsigned decimal integer;
											<code>unsigned int*</code>
											parameter required
										</dd>
										<dt>
											<code>x</code>
										</dt>
										<dd>
											hexadecimal integer;
											<code>int*</code> parameter
											required
										</dd>
										<dt>
											<code>c</code>
										</dt>
										<dd>
											characters;
											<code>char*</code>
											parameter required;
											white-space is not skipped,
											and
											<code>NUL</code>-termination
											is not performed
										</dd>
										<dt>
											<code>s</code>
										</dt>
										<dd>
											string of non-white-space;
											<code>char*</code>
											parameter required; string
											is
											<code>NUL</code>-terminated
										</dd>
										<dt>
											<code>e,f,g</code>
										</dt>
										<dd>
											floating-point number;
											<code>float*</code>
											parameter required
										</dd>
										<dt>
											<code>p</code>
										</dt>
										<dd>
											pointer value;
											<code>void*</code>
											parameter required
										</dd>
										<dt>
											<code>n</code>
										</dt>
										<dd>
											chars read so far;
											<code>int*</code> parameter
											required
										</dd>
										<dt>
											<code>[<var>...</var>]</code>
										</dt>
										<dd>
											longest non-empty string
											from specified set;
											<code>char*</code>
											parameter required; string
											is
											<code>NUL</code>-terminated
										</dd>
										<dt>
											<code>[^<var>...</var>]</code>
										</dt>
										<dd>
											longest non-empty string
											not from specified set;
											<code>char*</code>
											parameter required; string
											is
											<code>NUL</code>-terminated
										</dd>
										<dt>
											<code>%</code>
										</dt>
										<dd>
											literal <code>%</code>; no
											assignment
										</dd>
									</dl>
								</li>
							</ul>
						</li>
					</ul>
				</dd>
				<dt>
					<code>int <a name="scanf" id="scanf">scanf</a>(const char* <var>format</var>,
					...);</code>
				</dt>
				<dd>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#scanf">scanf</a>(f, ...)</code> is
					equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fscanf">fscanf</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdin">
					stdin</a>, f, ...)</code>
				</dd>
				<dt>
					<code>int sscanf(char* <var>s</var>, const char*
					<var>format</var>, ...);</code>
				</dt>
				<dd>
					Like <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fscanf">fscanf</a></code>, but
					input read from string <code><var>s</var></code>.
				</dd>
				<dt>
					<code>int <a name="fgetc" id="fgetc">fgetc</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Returns next character from (input) stream
					<code><var>stream</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EOF">EOF</a></code> on end-of-file
					or error.
				</dd>
				<dt>
					<code>char* <a name="fgets" id="fgets">fgets</a>(char* <var>s</var>, int
					<var>n</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Copies characters from (input) stream
					<code><var>stream</var></code> to
					<code><var>s</var></code>, stopping when
					<code><var>n</var></code>-1 characters copied,
					newline copied, end-of-file reached or error
					occurs. If no error, <code><var>s</var></code> is
					<code>NUL</code>-terminated. Returns
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.NULL">NULL</a></code> on
					end-of-file or error, <code><var>s</var></code>
					otherwise.
				</dd>
				<dt>
					int <code><a name="fputc" id="fputc">fputc</a>(int
					<var>c</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Writes <code><var>c</var></code>, to stream
					<code><var>stream</var></code>. Returns
					<code><var>c</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EOF">EOF</a></code> on error.
				</dd>
				<dt>
					<code>char* <a name="fputs" id="fputs">fputs</a>(const char* <var>s</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Writes <code><var>s</var></code>, to (output)
					stream stream. Returns non-negative on success or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EOF">EOF</a></code> on error.
				</dd>
				<dt>
					<code>int <a name="getc" id="getc">getc</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fgetc">fgetc</a></code> except that
					it may be a macro.
				</dd>
				<dt>
					<code>int <a name="getchar" id="getchar">getchar</a>(void);</code>
				</dt>
				<dd>
					Equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#getc">getc</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdin">stdin</a>)</code>.
				</dd>
				<dt>
					<code>char* <a name="gets" id="gets">gets</a>(char*
					<var>s</var>);</code>
				</dt>
				<dd>
					Copies characters from
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdin">stdin</a></code> into
					<code><var>s</var></code> until newline
					encountered, end-of-file reached, or error occurs.
					Does not copy newline. <code>NUL</code>-terminates
					<code><var>s</var></code>. Returns
					<code><var>s</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.NULL">NULL</a></code> on
					end-of-file or error. <strong>Should not be used
					because of the potential for buffer
					overflow.</strong>
				</dd>
				<dt>
					<code>int <a name="putc" id="putc">putc</a>(int
					<var>c</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fputc">fputc</a></code> except that
					it may be a macro.
				</dd>
				<dt>
					<code>int <a name="putchar" id="putchar">putchar</a>(int <var>c</var>);</code>
				</dt>
				<dd>
					<code>putchar(<var>c</var>)</code> is equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#putc">putc</a>(<var>c</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdout">stdout</a>)</code>.
				</dd>
				<dt>
					<code>int <a name="puts" id="puts">puts</a>(const
					char* <var>s</var>);</code>
				</dt>
				<dd>
					Writes <code><var>s</var></code> (excluding
					terminating <code>NUL</code>) and a newline to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdout">stdout</a></code>. Returns
					non-negative on success,
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EOF">EOF</a></code> on error.
				</dd>
				<dt>
					<code>int <a name="ungetc" id="ungetc">ungetc</a>(int <var>c</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Pushes <code><var>c</var></code> (which must not be
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EOF">EOF</a></code>), onto (input)
					stream <code><var>stream</var></code> such that it
					will be returned by the next read. Only one
					character of pushback is guaranteed (for each
					stream). Returns <code><var>c</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EOF">EOF</a></code> on error.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a>
					<a name="fread" id="fread">fread</a>(void*
					<var>ptr</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a>
					<var>size</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a>
					<var>nobj</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Reads (at most) <code><var>nobj</var></code>
					objects of size <code><var>size</var></code> from
					stream <code><var>stream</var></code> into
					<code><var>ptr</var></code> and returns number of
					objects read.
					(<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#feof">feof</a></code> and
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ferror">ferror</a></code> can be
					used to check status.)
				</dd>
				<dt>
					<code>size_t <a name="fwrite" id="fwrite">fwrite</a>(const void* <var>ptr</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a> <var>size</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a> <var>nobj</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Writes to stream <code><var>stream</var></code>,
					<code><var>nobj</var></code> objects of size
					<code><var>size</var></code> from array
					<code><var>ptr</var></code>. Returns number of
					objects written.
				</dd>
				<dt>
					<code>int <a name="fseek" id="fseek">fseek</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>, long <var>offset</var>, int
					<var>origin</var>);</code>
				</dt>
				<dd>
					Sets file position for stream
					<code><var>stream</var></code> and clears
					end-of-file indicator. For a binary stream, file
					position is set to <code><var>offset</var></code>
					bytes from the position indicated by
					<code><var>origin</var></code>: beginning of file
					for <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#SEEK_SET">SEEK_SET</a></code>,
					current position for
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#SEEK_CUR">SEEK_CUR</a></code>, or
					end of file for
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#SEEK_END">SEEK_END</a></code>.
					Behaviour is similar for a text stream, but
					<code><var>offset</var></code> must be zero or, for
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#SEEK_SET">SEEK_SET</a></code> only,
					a value returned by
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ftell">ftell</a></code>. Returns
					non-zero on error.
				</dd>
				<dt>
					<code>long <a name="ftell" id="ftell">ftell</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Returns current file position for stream
					<code><var>stream</var></code>, or <code>-1</code>
					on error.
				</dd>
				<dt>
					<code>void <a name="rewind" id="rewind">rewind</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fseek">fseek</a>(<var>stream</var>,
					0L, SEEK_SET);
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#clearerr">clearerr</a>(<var>stream</var>)</code>.
				</dd>
				<dt>
					<code>int <a name="fgetpos" id="fgetpos">fgetpos</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fpos_t">fpos_t</a>*
					<var>ptr</var>);</code>
				</dt>
				<dd>
					Stores current file position for stream
					<code><var>stream</var></code> in
					<code>*<var>ptr</var></code>. Returns non-zero on
					error.
				</dd>
				<dt>
					<code>int <a name="fsetpos" id="fsetpos">fsetpos</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>, const
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fpos_t">fpos_t</a>*
					<var>ptr</var>);</code>
				</dt>
				<dd>
					Sets current position of stream <var>stream</var>
					to <code>*<var>ptr</var></code>. Returns non-zero
					on error.
				</dd>
				<dt>
					<code>void <a name="clearerr" id="clearerr">clearerr</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Clears end-of-file and error indicators for stream
					<code><var>stream</var></code>.
				</dd>
				<dt>
					<code>int <a name="feof" id="feof">feof</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Returns non-zero if end-of-file indicator is set
					for stream <code><var>stream</var></code>.
				</dd>
				<dt>
					<code>int <a name="ferror" id="ferror">ferror</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#FILE">FILE</a>*
					<var>stream</var>);</code>
				</dt>
				<dd>
					Returns non-zero if error indicator is set for
					stream <code><var>stream</var></code>.
				</dd>
				<dt>
					<code>void <a name="perror" id="perror">perror</a>(const char*
					<var>s</var>);</code>
				</dt>
				<dd>
					Prints <code><var>s</var></code> (if non-null) and
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#strerror">strerror</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">
					errno</a>)</code> to standard error as would:
					<pre><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#fprintf">fprintf</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stderr">stderr</a>, "%s: %s\n", (<var>s</var> != <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.NULL">NULL</a> ? <var>s</var> : ""), <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#strerror">strerror</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a>))
					</pre>
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="stdlib.h" id="stdlib.h">&lt;stdlib.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code><a name="EXIT_FAILURE" id="EXIT_FAILURE">EXIT_FAILURE</a></code>
				</dt>
				<dd>
					Value for <code><var>status</var></code> argument
					to <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#exit">exit</a></code> indicating
					failure.
				</dd>
				<dt>
					<code><a name="EXIT_SUCCESS" id="EXIT_SUCCESS">EXIT_SUCCESS</a></code>
				</dt>
				<dd>
					Value for <code><var>status</var></code> argument
					to <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#exit">exit</a></code> indicating
					success.
				</dd>
				<dt>
					<code><a name="RAND_MAX" id="RAND_MAX">RAND_MAX</a></code>
				</dt>
				<dd>
					Maximum value returned by
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#rand">rand</a>()</code>.
				</dd>
				<dt>
					<code><a name="stdlib.NULL" id="stdlib.NULL">NULL</a></code>
				</dt>
				<dd>
					Null pointer constant.
				</dd>
				<dt>
					<code><a name="div_t" id="div_t">div_t</a></code>
				</dt>
				<dd>
					Return type of
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#div">div</a>()</code>. Structure
					having members:
					<dl>
						<dt>
							<code>int quot;</code>
						</dt>
						<dd>
							quotient
						</dd>
						<dt>
							<code>int rem;</code>
						</dt>
						<dd>
							remainder
						</dd>
					</dl>
				</dd>
				<dt>
					<code><a name="ldiv_t" id="ldiv_t">ldiv_t</a></code>
				</dt>
				<dd>
					Return type of
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ldiv">ldiv</a>()</code>. Structure
					having members:
					<dl>
						<dt>
							<code>long quot;</code>
						</dt>
						<dd>
							quotient
						</dd>
						<dt>
							<code>long rem;</code>
						</dt>
						<dd>
							remainder
						</dd>
					</dl>
				</dd>
				<dt>
					<code><a name="stdlib.size_t" id="stdlib.size_t">size_t</a></code>
				</dt>
				<dd>
					Type for objects declared to store result of
					<code>sizeof</code> operator.
				</dd>
				<dt>
					<code>int abs(int <var>n</var>);</code>
				</dt>
				<dt>
					<code>long labs(long <var>n</var>);</code>
				</dt>
				<dd>
					Returns absolute value of
					<code><var>n</var></code>.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#div_t">div_t</a> <a name="div" id="div">div</a>(int <var>num</var>, int
					<var>denom</var>);</code>
				</dt>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ldiv_t">ldiv_t</a> <a name="ldiv" id="ldiv">ldiv</a>(long <var>num</var>, long
					<var>denom</var>);</code>
				</dt>
				<dd>
					Returns quotient and remainder of
					<code><var>num</var>/<var>denom</var></code>.
				</dd>
				<dt>
					<code>double atof(const char* <var>s</var>);</code>
				</dt>
				<dd>
					Equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#strtod">strtod</a>(<var>s</var>,
					(char**)<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a>)</code>
					except that <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a></code>
					is not necessarily set on conversion error.
				</dd>
				<dt>
					<code>int atoi(const char* <var>s</var>);</code>
				</dt>
				<dd>
					Equivalent to
					<code>(int)<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#strtol">strtol</a>(<var>s</var>,
					(char**)<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a>, 10)</code>
					except that <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a></code>
					is not necessarily set on conversion error.
				</dd>
				<dt>
					<code>long atol(const char* <var>s</var>);</code>
				</dt>
				<dd>
					Equivalent to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#strtol">strtol</a>(<var>s</var>,
					(char**)<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a>, 10)</code>
					except that <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a></code>
					is not necessarily set on conversion error.
				</dd>
				<dt>
					<code>double <a name="strtod" id="strtod">strtod</a>(const char* <var>s</var>,
					char** <var>endp</var>);</code>
				</dt>
				<dd>
					Converts initial characters (ignoring leading white
					space) of <code><var>s</var></code> to type
					<code>double</code>. If
					<code><var>endp</var></code> non-null, stores
					pointer to unconverted suffix in
					<code>*<var>endp</var></code>. On overflow, sets
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a></code> to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ERANGE">ERANGE</a></code> and
					returns
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#HUGE_VAL">HUGE_VAL</a></code> with
					the appropriate sign; on underflow, sets
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a></code> to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ERANGE">ERANGE</a></code> and
					returns zero; otherwise returns converted value.
				</dd>
				<dt>
					<code>long <a name="strtol" id="strtol">strtol</a>(const char* <var>s</var>,
					char** <var>endp</var>, int
					<var>base</var>);</code>
				</dt>
				<dd>
					Converts initial characters (ignoring leading white
					space) of <code><var>s</var></code> to type
					<code>long</code>. If <code><var>endp</var></code>
					non-nu ll, stores pointer to unconverted suffix in
					<code>*<var>endp</var></code>. If
					<code><var>base</var></code> between 2 and 36, that
					base used for conversion; if zero, leading (after
					any sign) <code>0X</code> or <code>0x</code>
					implies hexadecimal, leading <code>0</code> (after
					any sign) implies octal, otherwise decimal assumed.
					Leading <code>0X</code> or <code>0x</code>
					permitted for base hexadecimal. On overflow, sets
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#errno">errno</a></code> to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ERANGE">ERANGE</a></code> and
					returns
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#LONG_MAX">LONG_MAX</a></code> or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#LONG_MIN">LONG_MIN</a></code> (as
					appropriate for sign); otherwise returns converted
					value.
				</dd>
				<dt>
					<code>unsigned long <a name="strtoul" id="strtoul">strtoul</a>(const char* <var>s</var>,
					char** <var>endp</var>, int
					<var>base</var>);</code>
				</dt>
				<dd>
					As for <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#strtol">strtol</a></code>
					except result is <code>unsigned long</code> and
					value on overflow is
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#ULONG_MAX">ULONG_MAX</a></code>.
				</dd>
				<dt>
					<code>void*
					calloc(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.size_t">size_t</a>
					<var>nobj</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.size_t">size_t</a>
					<var>size</var>);</code>
				</dt>
				<dd>
					Returns pointer to <em>zero-initialised</em>
					newly-allocated space for an array of
					<code><var>nobj</var></code> objects each of size
					<code><var>size</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a></code> on
					error.
				</dd>
				<dt>
					<code>void*
					malloc(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.size_t">size_t</a>
					<var>size</var>);</code>
				</dt>
				<dd>
					Returns pointer to <em>uninitialised</em>
					newly-allocated space for an object of size
					<var>size</var>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a></code> on
					error.
				</dd>
				<dt>
					<code>void* realloc(void* <var>p</var>, size_t
					<var>size</var>);</code>
				</dt>
				<dd>
					Returns pointer to newly-allocated space for an
					object of size <code><var>size</var></code>,
					initialised, to minimum of old and new sizes, to
					existing contents of <code><var>p</var></code> (if
					non-null), or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a></code> on
					error. On success, old object deallocated,
					otherwise unchanged.
				</dd>
				<dt>
					<code>void free(void* <var>p</var>);</code>
				</dt>
				<dd>
					If <code><var>p</var></code> non-null, deallocates
					space to which it points.
				</dd>
				<dt>
					<code>void <a name="abort" id="abort">abort</a>();</code>
				</dt>
				<dd>
					Terminates program abnormally, by calling
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#raise">raise</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#sigabrt">
					SIGABRT</a>)</code>.
				</dd>
				<dt>
					<code>void <a name="exit" id="exit">exit</a>(int
					<var>status</var>);</code>
				</dt>
				<dd>
					Terminates program normally. Functions installed
					using <code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#atexit">atexit</a></code> are
					called (in reverse order to that in which
					installed), open files are flushed, open streams
					are closed and control is returned to environment.
					<code><var>status</var></code> is returned to
					environment in implementation-dependent manner.
					Zero or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EXIT_SUCCESS">EXIT_SUCCESS</a></code>
					indicates successful termination and
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#EXIT_FAILURE">EXIT_FAILURE</a></code>
					indicates unsuccessful termination. Implementations
					may define other values.
				</dd>
				<dt>
					<code>int <a name="atexit" id="atexit">atexit</a>(void
					(*<var>fcm</var>)(void));</code>
				</dt>
				<dd>
					Registers <code><var>fcn</var></code> to be called
					when program terminates normally (or when
					<code>main</code> returns). Returns non-zero on
					failure.
				</dd>
				<dt>
					<code>int system(const char* <var>s</var>);</code>
				</dt>
				<dd>
					If <code><var>s</var></code> is not
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a></code>,
					passes <code><var>s</var></code> to environment for
					execution, and returns status reported by command
					processor; if <code><var>s</var></code> is
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a></code>,
					non-zero returned if environment has a command
					processor.
				</dd>
				<dt>
					<code>char* getenv(const char*
					<var>name</var>);</code>
				</dt>
				<dd>
					Returns string associated with name
					<code><var>name</var></code> from implementation's
					environment, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a></code> if no
					such string exists.
				</dd>
				<dt>
					<code>void* bsearch(const void* <var>key</var>,
					const void* <var>base</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a> <var>n</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a> <var>size</var>,
					int (*<var>cmp</var>)(const void* keyval, const
					void* datum));</code>
				</dt>
				<dd>
					Searches ordered array <code><var>base</var></code>
					(of <code><var>n</var></code> objects each of size
					<code><var>size</var></code>) for item matching
					<code><var>key</var></code> according to comparison
					function <code><var>cmp</var></code>.
					<code><var>cmp</var></code> must return negative
					value if first argument is less than second, zero
					if equal and positive if greater. Items of
					<code><var>base</var></code> are assumed to be in
					ascending order (according to
					<code><var>cmp</var></code>). Returns a pointer to
					an item matching <code><var>key</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdlib.NULL">NULL</a></code> if
					none found.
				</dd>
				<dt>
					<code>void qsort(void* <var>base</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a> <var>n</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#stdio.size_t">size_t</a> <var>size</var>,
					int (*<var>cmp</var>)(const void*, const
					void*));</code>
				</dt>
				<dd>
					Arranges into ascending order array
					<code><var>base</var></code> (of
					<code><var>n</var></code> objects each of size
					<code><var>size</var></code>) according to
					comparison function <code><var>cmp</var></code>.
					<code><var>cmp</var></code> must return negative
					value if first argument is less than second, zero
					if equal and positive if greater.
				</dd>
				<dt>
					<code>int <a name="rand" id="rand">rand</a>(void);</code>
				</dt>
				<dd>
					Returns pseudo-random number in range
					<code>0</code> to
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#RAND_MAX">RAND_MAX</a></code>.
				</dd>
				<dt>
					<code>void srand(unsigned int
					<var>seed</var>);</code>
				</dt>
				<dd>
					Uses <code><var>seed</var></code> as seed for new
					sequence of pseudo-random numbers. Initial seed is
					<code>1</code>.
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="string.h" id="string.h">&lt;string.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code><a name="string.NULL" id="string.NULL">NULL</a></code>
				</dt>
				<dd>
					Null pointer constant.
				</dd>
				<dt>
					<code><a name="string.size_t" id="string.size_t">size_t</a></code>
				</dt>
				<dd>
					Type for objects declared to store result of
					<code>sizeof</code> operator.
				</dd>
				<dt>
					<code>char* strcpy(char* <var>s</var>, const char*
					<var>ct</var>);</code>
				</dt>
				<dd>
					Copies <code><var>ct</var></code> to
					<code><var>s</var></code> including terminating
					<code>NUL</code> and returns
					<code><var>s</var></code>.
				</dd>
				<dt>
					<code>char* strncpy(char* <var>s</var>, const char*
					<var>ct</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					<var>n</var>);</code>
				</dt>
				<dd>
					Copies at most <code><var>n</var></code> characters
					of <code><var>ct</var></code> to
					<code><var>s</var></code>. Pads with
					<code>NUL</code> characters if
					<code><var>ct</var></code> is of length less than
					<code><var>n</var></code>. <strong>Note that this
					may leave <code><var>s</var></code> without
					<code>NUL</code>-termination.</strong> Return
					<code><var>s</var></code>.
				</dd>
				<dt>
					<code>char* strcat(char* <var>s</var>, const char*
					<var>ct</var>);</code>
				</dt>
				<dd>
					Concatenate <code><var>ct</var></code> to
					<code><var>s</var></code> and return
					<code><var>s</var></code>.
				</dd>
				<dt>
					<code>char* strncat(char* <var>s</var>, const char*
					<var>ct</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					<var>n</var>);</code>
				</dt>
				<dd>
					Concatenate at most <code><var>n</var></code>
					characters of <code><var>ct</var></code> to
					<code><var>s</var></code>.
					<code>NUL</code>-terminates
					<code><var>s</var></code> and return it.
				</dd>
				<dt>
					<code>int strcmp(const char* <var>cs</var>, const
					char* <var>ct</var>);</code>
				</dt>
				<dd>
					Compares <code><var>cs</var></code> with
					<code><var>ct</var></code>, returning negative
					value if
					<code><var>cs</var>&lt;<var>ct</var></code>, zero
					if <code><var>cs</var>==<var>ct</var></code>,
					positive value if
					<code><var>cs</var>&gt;<var>ct</var></code>.
				</dd>
				<dt>
					<code>int strncmp(const char* <var>cs</var>, const
					char* <var>ct</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					<var>n</var>);</code>
				</dt>
				<dd>
					Compares at most (the first)
					<code><var>n</var></code> characters of
					<code><var>cs</var></code> and
					<code><var>ct</var></code>, returning negative
					value if
					<code><var>cs</var>&lt;<var>ct</var></code>, zero
					if <code><var>cs</var>==<var>ct</var></code>,
					positive value if
					<code><var>cs</var>&gt;<var>ct</var></code>.
				</dd>
				<dt>
					<code>int strcoll(const char* <var>cs</var>, const
					char* <var>ct</var>);</code>
				</dt>
				<dd>
					Compares <code><var>cs</var></code> with
					<code><var>ct</var></code> according to locale,
					returning negative value if
					<code><var>cs</var>&lt;<var>ct</var></code>, zero
					if <code><var>cs</var>==<var>ct</var></code>,
					positive value if
					<code><var>cs</var>&gt;<var>ct</var></code>.
				</dd>
				<dt>
					<code>char* strchr(const char* <var>cs</var>, int
					<var>c</var>);</code>
				</dt>
				<dd>
					Returns pointer to first occurrence of
					<code><var>c</var></code> in
					<code><var>cs</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.NULL">NULL</a></code> if not
					found.
				</dd>
				<dt>
					<code>char* strrchr(const char* <var>cs</var>, int
					<var>c</var>);</code>
				</dt>
				<dd>
					Returns pointer to last occurrence of
					<code><var>c</var></code> in
					<code><var>cs</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.NULL">NULL</a></code> if not
					found.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					strspn(const char* <var>cs</var>, const char*
					<var>ct</var>);</code>
				</dt>
				<dd>
					Returns length of prefix of
					<code><var>cs</var></code> which consists of
					characters which are in <code><var>ct</var></code>.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					strcspn(const char* <var>cs</var>, const char*
					<var>ct</var>);</code>
				</dt>
				<dd>
					Returns length of prefix of
					<code><var>cs</var></code> which consists of
					characters which are <em>not</em> in
					<code><var>ct</var></code>.
				</dd>
				<dt>
					<code>char* strpbrk(const char* <var>cs</var>,
					const char* <var>ct</var>);</code>
				</dt>
				<dd>
					Returns pointer to first occurrence in
					<code><var>cs</var></code> of any character of
					<code><var>ct</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.NULL">NULL</a></code> if
					none is found.
				</dd>
				<dt>
					<code>char* strstr(const char* <var>cs</var>, const
					char* <var>ct</var>);</code>
				</dt>
				<dd>
					Returns pointer to first occurrence of
					<code><var>ct</var></code> within
					<code><var>cs</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.NULL">NULL</a></code> if
					none is found.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					strlen(const char* <var>cs</var>);</code>
				</dt>
				<dd>
					Returns length of <code><var>cs</var></code>.
				</dd>
				<dt>
					<code><a name="strerror" id="strerror">char*
					strerror(int <var>n</var>);</a></code>
				</dt>
				<dd>
					Returns pointer to implementation-defined message
					string corresponding with error
					<code><var>n</var></code>.
				</dd>
				<dt>
					<code>char* strtok(char* <var>s</var>, const char*
					<var>t</var>);</code>
				</dt>
				<dd>
					Searches <code><var>s</var></code> for next token
					delimited by any character from
					<code><var>ct</var></code>.
					Non-<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.NULL">NULL</a></code>
					<code><var>s</var></code> indicates the first call
					of a sequence. If a token is found, it is
					<code>NUL</code>-terminated and returned, otherwise
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.NULL">NULL</a></code> is
					returned. <code><var>ct</var></code> need not be
					identical for each call in a sequence.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					strxfrm(char* <var>s</var>, const char*
					<var>ct</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					<var>n</var>);</code>
				</dt>
				<dd>
					Stores in <code><var>s</var></code> no more than
					<code><var>n</var></code> characters (including
					terminating <code>NUL</code>) of a string produced
					from <code><var>ct</var></code> according to a
					locale-specific transformation. Returns length of
					<em>entire</em> transformed string.
				</dd>
				<dt>
					<code>void* <a name="memcpy" id="memcpy">memcpy</a>(void* <var>s</var>, const
					void* <var>ct</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					<var>n</var>);</code>
				</dt>
				<dd>
					Copies <code><var>n</var></code> characters from
					<code><var>ct</var></code> to
					<code><var>s</var></code> and returns
					<code><var>s</var></code>.
					<strong><code><var>s</var></code> may be corrupted
					if objects overlap.</strong>
				</dd>
				<dt>
					<code>void* memmove(void* <var>s</var>, const void*
					<var>ct</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					<var>n</var>);</code>
				</dt>
				<dd>
					Copies <code><var>n</var></code> characters from
					<code><var>ct</var></code> to
					<code><var>s</var></code> and returns
					<code><var>s</var></code>.
					<strong><code><var>s</var></code> will not be
					corrupted if objects overlap.</strong>
				</dd>
				<dt>
					<code>int memcmp(const void* <var>cs</var>, const
					void* <var>ct</var>,
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					<var>n</var>);</code>
				</dt>
				<dd>
					Compares at most (the first)
					<code><var>n</var></code> characters of
					<code><var>cs</var></code> and
					<code><var>ct</var></code>, returning negative
					value if
					<code><var>cs</var>&lt;<var>ct</var></code>, zero
					if <code><var>cs</var>==<var>ct</var></code>,
					positive value if
					<code><var>cs</var>&gt;<var>ct</var></code>.
				</dd>
				<dt>
					<code>void* memchr(const void* <var>cs</var>, int
					<var>c</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					<var>n</var>);</code>
				</dt>
				<dd>
					Returns pointer to first occurrence of
					<code><var>c</var></code> in first
					<code><var>n</var></code> characters of
					<code><var>cs</var></code>, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.NULL">NULL</a></code> if not
					found.
				</dd>
				<dt>
					<code>void* memset(void* <var>s</var>, int
					<var>c</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#string.size_t">size_t</a>
					<var>n</var>);</code>
				</dt>
				<dd>
					Replaces each of the first
					<code><var>n</var></code> characters of
					<code><var>s</var></code> by
					<code><var>c</var></code> and returns
					<code><var>s</var></code>.
				</dd>
			</dl>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
			<hr>
			<h2>
				<a name="time.h" id="time.h">&lt;time.h&gt;</a>
			</h2>
			<dl>
				<dt>
					<code>CLOCKS_PER_SEC</code>
				</dt>
				<dd>
					The number of
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#clock_t">clock_t</a></code> units
					per second.
				</dd>
				<dt>
					<code><a name="time.NULL" id="time.NULL">NULL</a></code>
				</dt>
				<dd>
					Null pointer constant.
				</dd>
				<dt>
					<code><a name="clock_t" id="clock_t">clock_t</a></code>
				</dt>
				<dd>
					An arithmetic type elapsed processor representing
					time.
				</dd>
				<dt>
					<code><a name="time_t" id="time_t">time_t</a></code>
				</dt>
				<dd>
					An arithmetic type representing calendar time.
				</dd>
				<dt>
					<code><a name="tm" id="tm">struct tm</a></code>
				</dt>
				<dd>
					Represents the components of calendar time: 
					<dl>
						<dt>
							<code>int tm_sec;</code>
						</dt>
						<dd>
							seconds after the minute
						</dd>
						<dt>
							<code>int tm_min;</code>
						</dt>
						<dd>
							minutes after the hour
						</dd>
						<dt>
							<code>int tm_hour;</code>
						</dt>
						<dd>
							hours since midnight
						</dd>
						<dt>
							<code>int tm_mday;</code>
						</dt>
						<dd>
							day of the month
						</dd>
						<dt>
							<code>int tm_mon;</code>
						</dt>
						<dd>
							months <strong>since</strong> January
						</dd>
						<dt>
							<code>int tm_year;</code>
						</dt>
						<dd>
							years since 1900
						</dd>
						<dt>
							<code>int tm_wday;</code>
						</dt>
						<dd>
							days since Sunday
						</dd>
						<dt>
							<code>int tm_yday;</code>
						</dt>
						<dd>
							days since January 1
						</dd>
						<dt>
							<code>int tm_isdst;</code>
						</dt>
						<dd>
							Daylight Saving Time flag : is positive if
							DST is in effect, zero if not in effect,
							negative if information not known.
						</dd>
					</dl>Implementations may change field order and
					include additional fields.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#clock_t">clock_t</a>
					clock(void);</code>
				</dt>
				<dd>
					Returns elapsed processor time used by program or
					<code>-1</code> if not available.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time_t">time_t</a>
					time(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time_t">time_t</a>*
					<var>tp</var>);</code>
				</dt>
				<dd>
					Returns current calendar time or <code>-1</code> if
					not available. If <code><var>tp</var></code> is
					non-<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time.NULL">NULL</a></code>,
					return value is also assigned to
					<code>*<var>tp</var></code>.
				</dd>
				<dt>
					<code>double difftime(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time_t">time_t</a>
					<var>time2</var>, <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time_t">time_t</a>
					<var>time1</var>);</code>
				</dt>
				<dd>
					Returns the difference in seconds between
					<code><var>time2</var></code> and
					<code><var>time1</var></code>.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time_t">time_t</a>
					mktime(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#tm">struct tm</a>*
					<var>tp</var>);</code>
				</dt>
				<dd>
					If necessary, adjusts fields of
					<code>*<var>tp</var></code> to fall withing normal
					ranges. Returns the corresponding calendar time, or
					<code>-1</code> if it cannot be represented.
				</dd>
				<dt>
					<code>char* <a name="asctime" id="asctime">asctime</a>(const <a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#tm">struct
					tm</a>* <var>tp</var>);</code>
				</dt>
				<dd>
					Returns the given time as a string of the
					form:<br>
					<code>Sun Jan 3 13:08:42 1988\n\0</code>
				</dd>
				<dt>
					<code>char* ctime(const
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time_t">time_t</a>*
					<var>tp</var>);</code>
				</dt>
				<dd>
					Returns string equivalent to calendar time
					<code><var>tp</var></code> converted to local time.
					Equivalent to:<br>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#asctime">asctime</a>(<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#localtime">
					localtime</a>(tp))</code>
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#tm">struct tm</a>* gmtime(const
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time_t">time_t</a>*
					<var>tp</var>);</code>
				</dt>
				<dd>
					Returns calendar time <code>*<var>tp</var></code>
					converted to Coordinated Universal Time, or
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time.NULL">NULL</a></code> if not
					available.
				</dd>
				<dt>
					<code><a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#tm">struct tm</a>*
					<a name="localtime" id="localtime">localtime</a>(const
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#time_t">time_t</a>*
					<var>tp</var>);</code>
				</dt>
				<dd>
					Returns calendar time <code>*<var>tp</var></code>
					converted into local time.
				</dd>
				<dt>
					<code>size_t strftime(char* <var>s</var>, size_t
					<var>smax</var>, const char* <var>fmt</var>, const
					<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#tm">struct tm</a>* <var>tp</var>);</code>
				</dt>
				<dd>
					Formats <code>*<var>tp</var></code> into
					<code><var>s</var></code> according to
					<code><var>fmt</var></code>. Places no more than
					<code><var>smax</var></code> characters into
					<code><var>s</var></code>, and returns number of
					characters produced (excluding terminating
					<code>NUL</code>), or <code>0</code> if greater
					than <code><var>smax</var></code>. Formatting
					conversions (<code>%<var>c</var></code>) are:
					<dl>
						<dt>
							<code>A</code>
						</dt>
						<dd>
							name of weekday
						</dd>
						<dt>
							<code>a</code>
						</dt>
						<dd>
							abbreviated name of weekday
						</dd>
						<dt>
							<code>B</code>
						</dt>
						<dd>
							name of month
						</dd>
						<dt>
							<code>b</code>
						</dt>
						<dd>
							abbreviated name of month
						</dd>
						<dt>
							<code>c</code>
						</dt>
						<dd>
							local date and time representation
						</dd>
						<dt>
							<code>d</code>
						</dt>
						<dd>
							day of month
							[<code>01</code>-<code>31</code>]
						</dd>
						<dt>
							<code>H</code>
						</dt>
						<dd>
							hour (24-hour clock)
							[<code>00</code>-<code>23</code>]
						</dd>
						<dt>
							<code>I</code>
						</dt>
						<dd>
							hour (12-hour clock)
							[<code>01</code>-<code>12</code>]
						</dd>
						<dt>
							<code>j</code>
						</dt>
						<dd>
							day of year
							[<code>001</code>-<code>366</code>]
						</dd>
						<dt>
							<code>M</code>
						</dt>
						<dd>
							minute [<code>00</code>-<code>59</code>]
						</dd>
						<dt>
							<code>m</code>
						</dt>
						<dd>
							month [<code>01</code>-<code>12</code>]
						</dd>
						<dt>
							<code>p</code>
						</dt>
						<dd>
							local equivalent of "<code>AM</code>" or
							"<code>PM</code>"
						</dd>
						<dt>
							<code>S</code>
						</dt>
						<dd>
							second [<code>00</code>-<code>61</code>]
						</dd>
						<dt>
							<code>U</code>
						</dt>
						<dd>
							week number of year (Sunday as 1st day of
							week) [<code>00</code>-<code>53</code>]
						</dd>
						<dt>
							<code>W</code>
						</dt>
						<dd>
							week number of year (Monday as 1st day of
							week) [<code>00</code>-<code>53</code>]
						</dd>
						<dt>
							<code>w</code>
						</dt>
						<dd>
							weekday (Sunday as <code>0</code>)
							[<code>0</code>-<code>6</code>]
						</dd>
						<dt>
							<code>X</code>
						</dt>
						<dd>
							local time representation
						</dd>
						<dt>
							<code>x</code>
						</dt>
						<dd>
							local date representation
						</dd>
						<dt>
							<code>Y</code>
						</dt>
						<dd>
							year with century
						</dd>
						<dt>
							<code>y</code>
						</dt>
						<dd>
							year without century
							[<code>00</code>-<code>99</code>]
						</dd>
						<dt>
							<code>Z</code>
						</dt>
						<dd>
							name (if any) of time zone
						</dd>
						<dt>
							<code>%</code>
						</dt>
						<dd>
							<code>%</code>
						</dd>
					</dl>
				</dd>
			</dl>
			<p>
				<em>Local</em> time may differ from <em>calendar</em>
				time because of time zone.
			</p>
			<p class="to_contents">
				[<a href="http://www.cs.ccu.edu.tw/~hst95u/BestSteve/CStandardLibrary.html#contents">目錄</a>]
			</p>
		</div>
		</div>
	

</body><style type="text/css">embed[type*="application/x-shockwave-flash"],embed[src*=".swf"],object[type*="application/x-shockwave-flash"],object[codetype*="application/x-shockwave-flash"],object[src*=".swf"],object[codebase*="swflash.cab"],object[classid*="D27CDB6E-AE6D-11cf-96B8-444553540000"],object[classid*="d27cdb6e-ae6d-11cf-96b8-444553540000"],object[classid*="D27CDB6E-AE6D-11cf-96B8-444553540000"]{	display: none !important;}</style></html>