<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=gb_2312-80">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>第五章 使用Windows标准控件</TITLE>
<META NAME="Template" CONTENT="E:\Office95\Template\Manuscripts\16 开图书模板.dot">
</HEAD>
<BODY>

<FONT FACE="黑体" LANG="ZH-CN" SIZE=5><P ALIGN="CENTER"><A NAME="_Toc425697761">第七章</FONT><FONT FACE="Arial" SIZE=5> </FONT><FONT FACE="黑体" LANG="ZH-CN" SIZE=5>使用</FONT><FONT FACE="Arial" SIZE=5>ActiveX</FONT><FONT FACE="黑体" LANG="ZH-CN" SIZE=5>控件</A></P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">Windows</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>本身已经提供了很多的控件，我们已经在本书前面的章节中对这些控件作了一些介绍。但是，应用程序用户的需求是各种各样的，而且，程序员本身的创造力也不应该因此而受到制约。然而，经历过的人都会深深的体会到，仅仅凭借自己的力量，要想完成一个完善的功能强大的应用程序并非易事</FONT><FONT SIZE=3>――</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>不是不可以，只是非常之的艰难。绝大多数的优秀的应用程序，都凝结了很多优秀的程序员的天才的创造力和辛勤的劳动。因此，在很多时候，我们不得不对自己能不能够使用</FONT><FONT SIZE=3>Visual C++</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>写出一个既有强大的实用功能，又具有美观的用户界面的应用程序表示怀疑。很不幸，坦率的说，要自己从底层写起，一个这样的应用程序常常会埋葬无数的时间。但是，当我们从一个更大的范围来观察这一情况的时候，我们发现，事实上，就很多编程课题而言，无数的程序员在做的仅仅是一些重复的劳动。大量优秀的人才浪费在为同一个目的编写功能相同的软件上。这启发了我们，如果能够制定一套规则，程序员们在此规则的基础上开发各种各样的功能组件，这些功能组件可以方便的用于多个应用程序。</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>技术就是这样的一种技术。基于</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>技术的为数众多的软件组件都提供了满足某个规范的一系列编程接口，应用程序可以通过该编程接口使用由软件组件提供的各种功能，而无需知道这些功能在具体的软件组件里是如何实现的。这种方式也是我们早在本书一开始的时候所提到的面向对象的程序设计的一个主要特点。</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>技术本身是一种非常复杂的技术，尽管有很多的书籍在讲述这一内容时故意淡化这一点。要想通过很短的篇幅以很通俗的语言阐明这个技术本身几乎是一件不可能的事。从本书的写作意图和篇幅来考虑，我们不打算深入的讨论</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>本身和如何创建基于</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>技术的各种软件组件，而把关心的焦点放到如何应用</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件本身上。</P>
<P ALIGN="JUSTIFY">本章的焦点放到两个问题上：</P>

<UL>
<P ALIGN="JUSTIFY"><LI>什么是</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件</LI></P>
<P ALIGN="JUSTIFY"><LI>如何在应用程序中使用</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件</LI></P></UL>

</FONT><FONT FACE="仿宋_GB2312" LANG="ZH-CN" SIZE=4><P ALIGN="CENTER"><A NAME="_Toc425697762">第一节</FONT><FONT SIZE=4> </FONT><FONT FACE="仿宋_GB2312" LANG="ZH-CN" SIZE=4>什么是</FONT><FONT SIZE=4>ActiveX</FONT><FONT FACE="仿宋_GB2312" LANG="ZH-CN" SIZE=4>控件</A></P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY">什么是</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件？这个问题本身也并不容易说得清楚。在下面的内容中，我们将侧重的于控件使用者，而不是控件开发者的角度来说明这个问题。</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件过去被称作</FONT><FONT SIZE=3>OLE</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件，其开发基于通常对象模型</FONT><FONT SIZE=3>(Common Object Model</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，</FONT><FONT SIZE=3>COM)</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，它可以嵌入对话框或其它的</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件容器，如</FONT><FONT SIZE=3>Internet Explorer</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>和</FONT><FONT SIZE=3>Visual Basic</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>应用程序中使用。</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件取代了过去的</FONT><FONT SIZE=3>16</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>位的</FONT><FONT SIZE=3>Visual Basic</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件</FONT><FONT SIZE=3>(VBX)</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。</P>
<P ALIGN="JUSTIFY">更专业一点说，</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件是这样的一个基于</FONT><FONT SIZE=3>COM</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>的对象：它可以自己的窗口内绘制自身，可以用户的如单击鼠标或按下键盘之类的操作事件，此外是最重要的一点，使用</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件的应用程序可以通过该控件所包括的一系列的属性和方法</FONT><FONT SIZE=3>(</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>合起来称作接口</FONT><FONT SIZE=3>)</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>来操作该控件的行为。</P>
<P ALIGN="JUSTIFY"></P>
<P ALIGN="JUSTIFY">不要为</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件本身这个名词所误导，</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件并不仅仅限用于与用户的可视交互，它还可以用于其它用途，如访问数据库、监视数据等。</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件所能提供的功能要远远超过自定义控件的能力。这些能力包括很多新鲜而有趣的特性，比如将控件本身所提供的菜单嵌入到容器的菜单中等。</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件一般以</FONT><FONT SIZE=3>.OCX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>文件的形式提供，并在系统中进行注册。</P>
<P ALIGN="JUSTIFY">对于</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件这一复杂的课题，我们现在只打算给一个最简单的概念。下一步我们将通过一个示例来说明</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件在编程中的使用。事实上，使用实例来说话往往对初学者往往要更具效果。</P>
</FONT><FONT FACE="仿宋_GB2312" LANG="ZH-CN" SIZE=4><P ALIGN="CENTER"><A NAME="_Toc425697763">第二节</FONT><FONT SIZE=4> </FONT><FONT FACE="仿宋_GB2312" LANG="ZH-CN" SIZE=4>使用</FONT><FONT SIZE=4>ActiveXMovie</FONT><FONT FACE="仿宋_GB2312" LANG="ZH-CN" SIZE=4>控件的视频播放器</A></P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY">在下面的过程中，我们将通过使用</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件创建一个视频播放器，该播放器支持多种文件格式。按下面的步骤来创建示例程序</FONT><FONT SIZE=3>VideoPlayer</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>：</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">1.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>使用</FONT><FONT SIZE=3>AppWizard</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>创建一个基于对话框的</FONT><FONT SIZE=3>MFC</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>工程。所有步骤均使用</FONT><FONT SIZE=3>AppWizard</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>给出的默认设置。在这种情况下，应用程序自动提供了对</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件的支持。紧接着删除应用应用程序主对话框中的所有控件，包括“确定”和“取消”按钮。</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">2.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>在主对话框中单击鼠标右键，选择</FONT><FONT SIZE=3>Insert ActiveX Control</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>命令。随后弹出如图</FONT><FONT SIZE=3>7.1</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>所示的对话框。</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER"><IMG SRC="Image359.gif" tppabs="http://166.111.167.223/computer/cai/visual_c++_5.0_programming/Image359.gif" WIDTH=280 HEIGHT=199></P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER">图</FONT><FONT SIZE=1>7. 1 </FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>向对话框中插入</FONT><FONT SIZE=1>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>控件</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">3.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>在图</FONT><FONT SIZE=3>7.1</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>的列表框中选择</FONT><FONT SIZE=3>ActiveMovieControl Object</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，并单击</FONT><FONT SIZE=3>OK</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>按钮。</P>

<UL>
</FONT><FONT FACE="黑体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY"><LI>注意：</LI></P>
</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY"><LI>如果在你在如图</FONT><FONT SIZE=3>7.1</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>所示的列表框中找不到项</FONT><FONT SIZE=3>ActiveMovieControl</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>，则说明你的计算机系统中没有安装</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>控件，或者</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>控件没有在你的系统中进行正确的注册。这时，你需要安装</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>控件才可以继续创建示例程序</FONT><FONT SIZE=3>VideoPlayer</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>。可以有多个途径得到</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>控件。你可以从</FONT><FONT SIZE=3>Internet Explorer 4.0</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>软件包中获得该控件，也可以从</FONT><FONT SIZE=3>Microsoft</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>获得该控件的单独发布版本。</LI></P></UL>

</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY"></P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">4.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>这时，回到应用程序</FONT><FONT SIZE=3>VideoPlayer</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>的主对话框，右击新添加的控件，选择</FONT><FONT SIZE=3>ClassWizard</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>为新添加的控件映射一个成员变量</FONT><FONT SIZE=3>(</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>下面的步骤将说明这个成员变量的类型</FONT><FONT SIZE=3>)</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">5.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>在添加成员变量映射的过程中，</FONT><FONT SIZE=3>ClassWizard</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>将会弹出如图</FONT><FONT SIZE=3>7.2</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>所示的对话框，以询问是否为</FONT><FONT SIZE=3>ActiveMovieControl Object</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>创建一个类以封装对该控件提供的接口的调用。在该对话框中单击确定。</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER"><IMG SRC="Image360.gif" tppabs="http://166.111.167.223/computer/cai/visual_c++_5.0_programming/Image360.gif" WIDTH=321 HEIGHT=80></P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER">图</FONT><FONT SIZE=1>7. 2 </FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>询问是否创建一个</FONT><FONT SIZE=1>C++</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>类以封装</FONT><FONT SIZE=1>ActiveMovieControl</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>对象</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER"><IMG SRC="Image361.gif" tppabs="http://166.111.167.223/computer/cai/visual_c++_5.0_programming/Image361.gif" WIDTH=288 HEIGHT=278></P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER">图</FONT><FONT SIZE=1>7. 3 </FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>为</FONT><FONT SIZE=1>ActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>控件创建新类</FONT><FONT SIZE=1>CActiveMovie</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY">在如图</FONT><FONT SIZE=3>7.3</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>所示的对话框中为</FONT><FONT SIZE=3>ActiveMovieControl</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>创建新的类</FONT><FONT SIZE=3>CActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。</P>
<P ALIGN="JUSTIFY"></P>
<P ALIGN="JUSTIFY">上面的步骤也可以使用其它的途径来完成。首先，在</FONT><FONT SIZE=3>Project</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>菜单的</FONT><FONT SIZE=3>Add To Project</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>子菜单下选择</FONT><FONT SIZE=3>Components and Controls</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>命令。该命令打开如图</FONT><FONT SIZE=3>7.4</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>所示的对话框，在该对话框中双击</FONT><FONT SIZE=3>Registered ActiveX Controls</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，并从中选择</FONT><FONT SIZE=3>ActiveMovieControl Object</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。单击</FONT><FONT SIZE=3>Insert</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>按钮，也弹出如图</FONT><FONT SIZE=3>7.3</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>所示的对话框。按第五步中所讲述的内容完成类</FONT><FONT SIZE=3>CActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。这时，在</FONT><FONT SIZE=3>Controls</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>工具箱中将会多一个按钮<IMG SRC="Image362.gif" tppabs="http://166.111.167.223/computer/cai/visual_c++_5.0_programming/Image362.gif" WIDTH=24 HEIGHT=22>，单击该按钮，即可像添加一般的标准控件那样添加</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件。</P>
<P ALIGN="JUSTIFY"></P>
<P ALIGN="JUSTIFY">相比较而言，后一种方法要更为直观一些。但两种方法的最后结果都是一致的，具体到每一个编程者来说，选择哪一种完成是任意的。但很明显，如果需要一次向对话本事</FONT><FONT SIZE=3> </FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>添加多于一个的同一</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件，使用后面的方法要省事得多。</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER"><IMG SRC="Image363.gif" tppabs="http://166.111.167.223/computer/cai/visual_c++_5.0_programming/Image363.gif" WIDTH=371 HEIGHT=278></P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER">图</FONT><FONT SIZE=1>7. 4 </FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>从</FONT><FONT SIZE=1>Components and Controls Gallery</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>中向工程添加</FONT><FONT SIZE=1>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>控件</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY">在完成这一步骤之后，为新添加的</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件</FONT><FONT SIZE=3>(</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>我们设置其</FONT><FONT SIZE=3>ID</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>为</FONT><FONT SIZE=3>IDC_AMOVIE)</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>映射类型为</FONT><FONT SIZE=3>CActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>的成员变量</FONT><FONT SIZE=3>m_amovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">6.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>现在我们来大致的浏览一下类</FONT><FONT SIZE=3>CActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>的定义。该定义保存在头文件</FONT><FONT SIZE=3>ActiveMovie.h</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>中。</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P>#if !defined(AFX_ACTIVEMOVIE_H__9B0F9FA0_1F04_11D2_9717_0000B4810A31__INCLUDED_)</P>
<P>#define AFX_ACTIVEMOVIE_H__9B0F9FA0_1F04_11D2_9717_0000B4810A31__INCLUDED_</P>

<P>#if _MSC_VER &gt;= 1000</P>
<P>#pragma once</P>
<P>#endif // _MSC_VER &gt;= 1000</P>
<P>// 注意：不要修改你在这里看到的文件的内容。如果该类是由 Visual C++ 所创建的话，</P>
<P>// 您在这里所作的修改将会被覆盖</P>

<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CActiveMovie 封装类</P>

<P>class CActiveMovie : public CWnd</P>
<P>{</P>
<P>protected:</P>
<P>&#9;DECLARE_DYNCREATE(CActiveMovie)</P>
<P>public:</P>
<P>&#9;CLSID const&amp; GetClsid()</P>
<P>&#9;{</P>
<P>&#9;&#9;static CLSID const clsid</P>
<P>&#9;&#9;&#9;= { 0x5589fa1, 0xc356, 0x11ce, { 0xbf, 0x1, 0x0, 0xaa, 0x0, 0x55, 0x59, 0x5a } };</P>
<P>&#9;&#9;return clsid;</P>
<P>&#9;}</P>
<P>&#9;virtual BOOL Create(LPCTSTR lpszClassName,</P>
<P>&#9;&#9;LPCTSTR lpszWindowName, DWORD dwStyle,</P>
<P>&#9;&#9;const RECT&amp; rect,</P>
<P>&#9;&#9;CWnd* pParentWnd, UINT nID,</P>
<P>&#9;&#9;CCreateContext* pContext = NULL)</P>
<P>&#9;{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }</P>

<P>    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,</P>
<P>&#9;&#9;const RECT&amp; rect, CWnd* pParentWnd, UINT nID,</P>
<P>&#9;&#9;CFile* pPersist = NULL, BOOL bStorage = FALSE,</P>
<P>&#9;&#9;BSTR bstrLicKey = NULL)</P>
<P>&#9;{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,</P>
<P>&#9;&#9;pPersist, bStorage, bstrLicKey); }</P>

<P>// Attributes</P>
<P>public:</P>

<P>// Operations</P>
<P>public:</P>
<P>&#9;void AboutBox();</P>
<P>&#9;void Run();</P>
<P>&#9;void Pause();</P>
<P>&#9;void Stop();</P>
<P>&#9;long GetImageSourceWidth();</P>
<P>&#9;long GetImageSourceHeight();</P>
<P>&#9;CString GetAuthor();</P>
<P>&#9;CString GetTitle();</P>
<P>&#9;CString GetCopyright();</P>
<P>&#9;CString GetDescription();</P>
<P>&#9;CString GetRating();</P>
<P>&#9;CString GetFileName();</P>
<P>&#9;void SetFileName(LPCTSTR lpszNewValue);</P>
<P>&#9;double GetDuration();</P>
<P>&#9;double GetCurrentPosition();</P>
<P>&#9;void SetCurrentPosition(double newValue);</P>
<P>&#9;long GetPlayCount();</P>
<P>&#9;void SetPlayCount(long nNewValue);</P>
<P>&#9;double GetSelectionStart();</P>
<P>&#9;void SetSelectionStart(double newValue);</P>
<P>&#9;double GetSelectionEnd();</P>
<P>&#9;void SetSelectionEnd(double newValue);</P>
<P>&#9;long GetCurrentState();</P>
<P>&#9;double GetRate();</P>
<P>&#9;void SetRate(double newValue);</P>
<P>&#9;long GetVolume();</P>
<P>&#9;void SetVolume(long nNewValue);</P>
<P>&#9;long GetBalance();</P>
<P>&#9;void SetBalance(long nNewValue);</P>
<P>&#9;BOOL GetEnableContextMenu();</P>
<P>&#9;void SetEnableContextMenu(BOOL bNewValue);</P>
<P>&#9;BOOL GetShowDisplay();</P>
<P>&#9;void SetShowDisplay(BOOL bNewValue);</P>
<P>&#9;BOOL GetShowControls();</P>
<P>&#9;void SetShowControls(BOOL bNewValue);</P>
<P>&#9;BOOL GetShowPositionControls();</P>
<P>&#9;void SetShowPositionControls(BOOL bNewValue);</P>
<P>&#9;BOOL GetShowSelectionControls();</P>
<P>&#9;void SetShowSelectionControls(BOOL bNewValue);</P>
<P>&#9;BOOL GetShowTracker();</P>
<P>&#9;void SetShowTracker(BOOL bNewValue);</P>
<P>&#9;BOOL GetEnablePositionControls();</P>
<P>&#9;void SetEnablePositionControls(BOOL bNewValue);</P>
<P>&#9;BOOL GetEnableSelectionControls();</P>
<P>&#9;void SetEnableSelectionControls(BOOL bNewValue);</P>
<P>&#9;BOOL GetEnableTracker();</P>
<P>&#9;void SetEnableTracker(BOOL bNewValue);</P>
<P>&#9;BOOL GetAllowHideDisplay();</P>
<P>&#9;void SetAllowHideDisplay(BOOL bNewValue);</P>
<P>&#9;BOOL GetAllowHideControls();</P>
<P>&#9;void SetAllowHideControls(BOOL bNewValue);</P>
<P>&#9;long GetDisplayMode();</P>
<P>&#9;void SetDisplayMode(long nNewValue);</P>
<P>&#9;BOOL GetAllowChangeDisplayMode();</P>
<P>&#9;void SetAllowChangeDisplayMode(BOOL bNewValue);</P>
<P>&#9;LPUNKNOWN GetFilterGraph();</P>
<P>&#9;void SetFilterGraph(LPUNKNOWN newValue);</P>
<P>&#9;LPDISPATCH GetFilterGraphDispatch();</P>
<P>&#9;unsigned long GetDisplayForeColor();</P>
<P>&#9;void SetDisplayForeColor(unsigned long newValue);</P>
<P>&#9;unsigned long GetDisplayBackColor();</P>
<P>&#9;void SetDisplayBackColor(unsigned long newValue);</P>
<P>&#9;long GetMovieWindowSize();</P>
<P>&#9;void SetMovieWindowSize(long nNewValue);</P>
<P>&#9;BOOL GetFullScreenMode();</P>
<P>&#9;void SetFullScreenMode(BOOL bNewValue);</P>
<P>&#9;BOOL GetAutoStart();</P>
<P>&#9;void SetAutoStart(BOOL bNewValue);</P>
<P>&#9;BOOL GetAutoRewind();</P>
<P>&#9;void SetAutoRewind(BOOL bNewValue);</P>
<P>&#9;long GetHWnd();</P>
<P>&#9;long GetAppearance();</P>
<P>&#9;void SetAppearance(long nNewValue);</P>
<P>&#9;long GetBorderStyle();</P>
<P>&#9;void SetBorderStyle(long nNewValue);</P>
<P>&#9;BOOL GetEnabled();</P>
<P>&#9;void SetEnabled(BOOL bNewValue);</P>
<P>&#9;BOOL IsSoundCardEnabled();</P>
<P>&#9;long GetReadyState();</P>
<P>};</P>

<P>//{{AFX_INSERT_LOCATION}}</P>

<P>#endif // !defined(AFX_ACTIVEMOVIE_H__9B0F9FA0_1F04_11D2_9717_0000B4810A31__INCLUDED_)</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY"></P>
<P ALIGN="JUSTIFY">尽管我们可以由此得知由该</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件所提供的各个接口属性和方法的参数和返回值，但是，这些信息并不足以正确的使用该</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件。一般来说，由第三方开发商提供的</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件都附带了对所提供的控件的各个接口属性和方法的说明及其与使用该控件进行程序设计所需的信息。</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">7.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>按表创建应用程序的菜单资源</FONT><FONT SIZE=3>IDR_MENU</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。</P>
<P ALIGN="JUSTIFY">接着使用属性对话框将应用程序主对话框的菜单资源设置为</FONT><FONT SIZE=3>IDR_MENU</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">8.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>设计用于音量调节的对话框，该对话框如图</FONT><FONT SIZE=3>7.5</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>所示，其资源</FONT><FONT SIZE=3>ID</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>为</FONT><FONT SIZE=3>IDD_VOLUME</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。设计完成之后使用</FONT><FONT SIZE=3>ClassWizard</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>为该对话框创建新的类</FONT><FONT SIZE=3>CVolumeDlg</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，并为滑块控件映射类型为</FONT><FONT SIZE=3>CSliderCtrl</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>的成员变量</FONT><FONT SIZE=3>m_sld</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。</P>
<P ALIGN="JUSTIFY">根据下面的代码在完成类</FONT><FONT SIZE=3>CVolumeDlg</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，该类提供了外部编程接口</FONT><FONT SIZE=3>SetVolume</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，该公有成员函数使用一个指向</FONT><FONT SIZE=3>CActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>对象的指针作为其参数，所进行的音量调节作用于该控件。</P>
<P ALIGN="JUSTIFY"></P>
<P ALIGN="JUSTIFY">这里需要注意的是，拖动或点击滑块控件时，向父窗口发送的消息是</FONT><FONT SIZE=3>WM_HSCROLL</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，该消息的处理函数</FONT><FONT SIZE=3>OnHScroll</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，传递给该处理函数的第二个参数的类型为</FONT><FONT SIZE=3>CScrollBar*</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，我们需要使用强调类型转换将其转换为</FONT><FONT SIZE=3>CSliderCtrl*</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，以便能正确的调用由</FONT><FONT SIZE=3>CSliderCtrl</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>对象所提供的各种成员函数。</P>
</FONT><FONT FACE="黑体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER">表</FONT><FONT FACE="Arial" SIZE=1>7. 1 </FONT><FONT FACE="黑体" LANG="ZH-CN" SIZE=1>应用程序</FONT><FONT FACE="Arial" SIZE=1>VideoPlayer</FONT><FONT FACE="黑体" LANG="ZH-CN" SIZE=1>使用的菜单资源</FONT><FONT FACE="Arial" SIZE=1>IDR_MENU</P></FONT>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=2 BORDERCOLOR="#808080" CELLPADDING=7 WIDTH=430>
<TR><TD WIDTH="20%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">顶层菜单项</FONT></TD>
<TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">子菜单项</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">资源</FONT><FONT SIZE=1>ID</FONT></TD>
</TR>
<TR><TD WIDTH="20%" VALIGN="MIDDLE" ROWSPAN=4>
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">文件</FONT><FONT SIZE=1>(&amp;F)</FONT></TD>
<TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">打开</FONT><FONT SIZE=1>(&amp;O)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_FILEOPEN</FONT></TD>
</TR>
<TR><TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">关闭</FONT><FONT SIZE=1>(&amp;C)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_FILECLOSE</FONT></TD>
</TR>
<TR><TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">具有</FONT><FONT SIZE=1>Separator</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>样式的菜单分隔符</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">　</TD>
</TR>
<TR><TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">退出</FONT><FONT SIZE=1>(&amp;X)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_FILEEXIT</FONT></TD>
</TR>
<TR><TD WIDTH="20%" VALIGN="MIDDLE" ROWSPAN=3>
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">播放</FONT><FONT SIZE=1>(&amp;P)</FONT></TD>
<TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">开始</FONT><FONT SIZE=1>(&amp;S)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_PLAYSTART</FONT></TD>
</TR>
<TR><TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">暂停</FONT><FONT SIZE=1>(&amp;P)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_PLAYPAUSE</FONT></TD>
</TR>
<TR><TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">停止</FONT><FONT SIZE=1>(&amp;T)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_PLAYSTOP</FONT></TD>
</TR>
<TR><TD WIDTH="20%" VALIGN="MIDDLE" ROWSPAN=2>
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">视频</FONT><FONT SIZE=1>(&amp;V)</FONT></TD>
<TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">原始大小</FONT><FONT SIZE=1>(&amp;O)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_VIDEO1X</FONT></TD>
</TR>
<TR><TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">原始大小的</FONT><FONT SIZE=1>2</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>倍</FONT><FONT SIZE=1>(&amp;T)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_VIDEO2X</FONT></TD>
</TR>
<TR><TD WIDTH="20%" VALIGN="MIDDLE" ROWSPAN=2>
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">音频</FONT><FONT SIZE=1>(&amp;A)</FONT></TD>
<TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">调节音量</FONT><FONT SIZE=1>(&amp;V)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_AUDEOVOLUME</FONT></TD>
</TR>
<TR><TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">调节左右声道平衡</FONT><FONT SIZE=1>(&amp;B)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_AUDEOBALANCE</FONT></TD>
</TR>
<TR><TD WIDTH="20%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">帮助</FONT><FONT SIZE=1>(&amp;H)</FONT></TD>
<TD WIDTH="46%" VALIGN="MIDDLE">
<FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="JUSTIFY">关于</FONT><FONT SIZE=1> </FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>视频播放器</FONT><FONT SIZE=1>(&amp;A)</FONT></TD>
<TD WIDTH="34%" VALIGN="MIDDLE">
<FONT SIZE=1><P ALIGN="JUSTIFY">ID_HELPABOUT</FONT></TD>
</TR>
</TABLE>
</CENTER></P>

<FONT FACE="宋体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY">　</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER"><IMG SRC="Image364.gif" tppabs="http://166.111.167.223/computer/cai/visual_c++_5.0_programming/Image364.gif" WIDTH=184 HEIGHT=89></P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER">图</FONT><FONT SIZE=1>7. 5 </FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>用于调节音量的对话框：</FONT><FONT SIZE=1>IDD_VOLUME</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY">以下是类</FONT><FONT SIZE=3>CVolumeDlg</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>的代码清单。为了节省篇幅和便于读者阅读和理解，我们删除了一些由</FONT><FONT SIZE=3>AppWizard</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>生成的代码和注释。</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P>// VolumeDlg.h : 头文件</P>
<P>//</P>

<P>class CActiveMovie;</P>

<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CVolumeDlg 对话框</P>

<P>class CVolumeDlg : public CDialog</P>
<P>{</P>
<P>// 构造</P>
<P>public:</P>
<P>&#9;void SetVolume(CActiveMovie* pAmovie);</P>
<P>&#9;CVolumeDlg(CWnd* pParent = NULL);   // 标准构造函数</P>

<P>&#9;//{{AFX_DATA(CVolumeDlg)</P>
<P>&#9;enum { IDD = IDD_VOLUME };</P>
<P>&#9;CSliderCtrl&#9;m_sld;</P>
<P>&#9;//}}AFX_DATA</P>

<P>　</P>
<P>// 重载</P>
<P>&#9;//{{AFX_VIRTUAL(CVolumeDlg)</P>
<P>&#9;protected:</P>
<P>&#9;virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持</P>
<P>&#9;//}}AFX_VIRTUAL</P>

<P>// 实现</P>
<P>protected:</P>
<P>&#9;CActiveMovie* m_pAmovie;</P>

<P>&#9;//{{AFX_MSG(CVolumeDlg)</P>
<P>&#9;virtual BOOL OnInitDialog();</P>
<P>&#9;afx_msg void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);</P>
<P>&#9;//}}AFX_MSG</P>
<P>&#9;DECLARE_MESSAGE_MAP()</P>
<P>};</P>

<P>// VolumeDlg.cpp : 实现文件</P>
<P>//</P>

<P>#include "stdafx.h"</P>
<P>#include "VideoPlayer.h"</P>
<P>#include "VolumeDlg.h"</P>
<P>#include "activemovie.h"</P>

<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CVolumeDlg 对话框</P>

<P>CVolumeDlg::CVolumeDlg(CWnd* pParent /*=NULL*/)</P>
<P>&#9;: CDialog(CVolumeDlg::IDD, pParent)</P>
<P>{</P>
<P>&#9;//{{AFX_DATA_INIT(CVolumeDlg)</P>
<P>&#9;&#9;// 注意：ClassWizard 将在这里添加对成员的初始化代码</P>
<P>&#9;//}}AFX_DATA_INIT</P>
<P>}</P>

<P>void CVolumeDlg::DoDataExchange(CDataExchange* pDX)</P>
<P>{</P>
<P>&#9;CDialog::DoDataExchange(pDX);</P>
<P>&#9;//{{AFX_DATA_MAP(CVolumeDlg)</P>
<P>&#9;DDX_Control(pDX, IDC_SLIDER1, m_sld);</P>
<P>&#9;//}}AFX_DATA_MAP</P>
<P>}</P>

<P>BEGIN_MESSAGE_MAP(CVolumeDlg, CDialog)</P>
<P>&#9;//{{AFX_MSG_MAP(CVolumeDlg)</P>
<P>&#9;ON_WM_HSCROLL()</P>
<P>&#9;//}}AFX_MSG_MAP</P>
<P>END_MESSAGE_MAP()</P>

<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CVolumeDlg 消息处理函数</P>

<P>BOOL CVolumeDlg::OnInitDialog() </P>
<P>{</P>
<P>&#9;CDialog::OnInitDialog();</P>
<P>&#9;</P>
<P>&#9;// 设置音量滑块的最小值和最大值、标度和当前位置等</P>
<P>&#9;m_sld.SetRange(-10000, 0);</P>
<P>&#9;m_sld.SetTicFreq(1000);</P>
<P>&#9;m_sld.SetLineSize(200);</P>
<P>&#9;m_sld.SetPageSize(1000);</P>
<P>&#9;// 以 ActiveMovie 控件的当前音量作为音量滑块的当前位置</P>
<P>&#9;m_sld.SetPos(m_pAmovie-&gt;GetVolume());</P>

<P>&#9;</P>
<P>&#9;return TRUE;</P>
<P>}</P>

<P>// 提供给类外部的使用者的编程接口方法</P>
<P>void CVolumeDlg::SetVolume(CActiveMovie * pAmovie)</P>
<P>{</P>
<P>&#9;m_pAmovie=pAmovie;</P>
<P>&#9;// 如果未加载任何媒体文件，则音量调节不可用。ActiveMovie 控件的 CurrentState 属</P>
<P>&#9;// 性返回控件的当前状态，-1 表示未加载任何文件，此时弹出出错提示信息</P>
<P>&#9;if (m_pAmovie-&gt;GetCurrentState()!=-1)</P>
<P>&#9;{</P>
<P>&#9;&#9;DoModal();</P>
<P>&#9;}</P>
<P>&#9;else</P>
<P>&#9;{</P>
<P>&#9;&#9;MessageBox("音频设备尚未加载，请先打开一个媒体文件。");</P>
<P>&#9;}</P>
<P>}</P>

<P>// 在用户拖动或点击滑块控件时，将所作的改变立即作用于 ActiveMovie 控件</P>
<P>void CVolumeDlg::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) </P>
<P>{</P>
<P>&#9;CSliderCtrl *pSlider=(CSliderCtrl *)pScrollBar;</P>
<P>&#9;int nVolume=pSlider-&gt;GetPos();</P>
<P>&#9;m_pAmovie-&gt;SetVolume(nVolume);</P>
<P>&#9;CDialog::OnHScroll(nSBCode, nPos, pScrollBar);</P>
<P>}</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">8.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>设计用于调节左右声道平衡的对话框。该对话框如图</FONT><FONT SIZE=3>7.6</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>所示，其资源</FONT><FONT SIZE=3>ID</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>为</FONT><FONT SIZE=3>IDD_BALANCE</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。由</FONT><FONT SIZE=3>ClassWizard</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>创建的新类</FONT><FONT SIZE=3>CBalanceDlg</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>封装了该对话框。同前面的对话框</FONT><FONT SIZE=3>IDD_VOLUME</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>相类似，</FONT><FONT SIZE=3>CBalanceDlg</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>定义了公有成员函数</FONT><FONT SIZE=3>SetBalance</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>以供类外部的使用者调用，该函数同样使用一个指向</FONT><FONT SIZE=3>CActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>对象的指针作为其参数。</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER"><IMG SRC="Image365.gif" tppabs="http://166.111.167.223/computer/cai/visual_c++_5.0_programming/Image365.gif" WIDTH=184 HEIGHT=89></P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER">图</FONT><FONT SIZE=1>7. 6 </FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>用于调节左右声道平衡的对话框：<BR>
</FONT><FONT SIZE=1>IDD_BALANCE</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY">根据下面提供的代码来完成类</FONT><FONT SIZE=3>CBalanceDlg</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>。</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P>// BalanceDlg.h : 头文件</P>
<P>//</P>

<P>class CActiveMovie;</P>
<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CBalanceDlg 对话框</P>

<P>class CBalanceDlg : public CDialog</P>
<P>{</P>
<P>// 构造</P>
<P>public:</P>
<P>&#9;void SetBalance(CActiveMovie* pAmovie);</P>
<P>&#9;CBalanceDlg(CWnd* pParent = NULL);   // 标准构造函数</P>

<P>// 对话框数据</P>
<P>&#9;//{{AFX_DATA(CBalanceDlg)</P>
<P>&#9;enum { IDD = IDD_BALANCE };</P>
<P>&#9;CSliderCtrl&#9;m_sld;</P>
<P>&#9;//}}AFX_DATA</P>

<P>　</P>
<P>// 重载</P>
<P>&#9;//{{AFX_VIRTUAL(CBalanceDlg)</P>
<P>&#9;protected:</P>
<P>&#9;virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持</P>
<P>&#9;//}}AFX_VIRTUAL</P>

<P>// 实现</P>
<P>protected:</P>
<P>&#9;CActiveMovie *m_pAmovie;</P>

<P>&#9;//{{AFX_MSG(CBalanceDlg)</P>
<P>&#9;virtual BOOL OnInitDialog();</P>
<P>&#9;afx_msg void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);</P>
<P>&#9;//}}AFX_MSG</P>
<P>&#9;DECLARE_MESSAGE_MAP()</P>
<P>};</P>

<P>// BalanceDlg.cpp : 实现文件</P>
<P>//</P>

<P>#include "stdafx.h"</P>
<P>#include "VideoPlayer.h"</P>
<P>#include "BalanceDlg.h"</P>
<P>#include "activemovie.h"</P>

<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CBalanceDlg 对话框</P>

<P>　</P>
<P>CBalanceDlg::CBalanceDlg(CWnd* pParent /*=NULL*/)</P>
<P>&#9;: CDialog(CBalanceDlg::IDD, pParent)</P>
<P>{</P>
<P>&#9;//{{AFX_DATA_INIT(CBalanceDlg)</P>
<P>&#9;&#9;// NOTE: the ClassWizard will add member initialization here</P>
<P>&#9;//}}AFX_DATA_INIT</P>
<P>}</P>

<P>　</P>
<P>void CBalanceDlg::DoDataExchange(CDataExchange* pDX)</P>
<P>{</P>
<P>&#9;CDialog::DoDataExchange(pDX);</P>
<P>&#9;//{{AFX_DATA_MAP(CBalanceDlg)</P>
<P>&#9;DDX_Control(pDX, IDC_SLIDER1, m_sld);</P>
<P>&#9;//}}AFX_DATA_MAP</P>
<P>}</P>

<P>　</P>
<P>BEGIN_MESSAGE_MAP(CBalanceDlg, CDialog)</P>
<P>&#9;//{{AFX_MSG_MAP(CBalanceDlg)</P>
<P>&#9;ON_WM_HSCROLL()</P>
<P>&#9;//}}AFX_MSG_MAP</P>
<P>END_MESSAGE_MAP()</P>

<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CBalanceDlg 消息处理函数</P>

<P>BOOL CBalanceDlg::OnInitDialog() </P>
<P>{</P>
<P>&#9;CDialog::OnInitDialog();</P>
<P>&#9;</P>
<P>&#9;// 初始化音量调节滑块的最大值和最小值、标度以及当前位置等</P>
<P>&#9;m_sld.SetRange(-10000, 10000);</P>
<P>&#9;m_sld.SetTicFreq(2000);</P>
<P>&#9;m_sld.SetLineSize(500);</P>
<P>&#9;m_sld.SetPageSize(2000);</P>
<P>&#9;m_sld.SetPos(m_pAmovie-&gt;GetBalance());</P>
<P>&#9;</P>
<P>&#9;return TRUE;</P>
<P>}</P>

<P>// 提供给类外部的使用者的接口方法</P>
<P>void CBalanceDlg::SetBalance(CActiveMovie * pAmovie)</P>
<P>{</P>
<P>&#9;m_pAmovie=pAmovie;</P>
<P>&#9;// 如果当前 ActiveMovie 未加载任何文件，则音量调节不可用并弹出出错信息</P>
<P>&#9;// ActiveMovie 控件的 CurrentState 属性返回了当前控件的状态，-1 表示未加载任何文件</P>
<P>&#9;if (m_pAmovie-&gt;GetCurrentState()!=-1)</P>
<P>&#9;{</P>
<P>&#9;&#9;DoModal();</P>
<P>&#9;}</P>
<P>&#9;else</P>
<P>&#9;{</P>
<P>&#9;&#9;MessageBox("音频设备尚未加载，请先打开一个媒体文件。");</P>
<P>&#9;}</P>
<P>}</P>

<P>// 当用户在拖动或点击滑块时，将用户的改变立即作用于 ActiveMovie 控件</P>
<P>void CBalanceDlg::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar) </P>
<P>{</P>
<P>&#9;CSliderCtrl *pSlider=(CSliderCtrl *)pScrollBar;</P>
<P>&#9;// 得到滑块控件的当前位置</P>
<P>&#9;int nVolume=pSlider-&gt;GetPos();</P>
<P>&#9;// 设置 ActiveMovie 控件的当前的声道平衡设置</P>
<P>&#9;m_pAmovie-&gt;SetBalance(nVolume);</P>
<P>&#9;CDialog::OnHScroll(nSBCode, nPos, pScrollBar);</P>
<P>}</P>
</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">9.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>按下面所给的代码来修改类</FONT><FONT SIZE=3>CVideoPlayerDlg</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>，在注意的是，这里的大部分菜单处理的声明是使用</FONT><FONT SIZE=3>ClassWizard</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>添加的：</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P>// VideoPlayerDlg.h : 头文件</P>
<P>//</P>
<P>//{{AFX_INCLUDES()</P>
<P>#include "activemovie.h"</P>
<P>//}}AFX_INCLUDES</P>

<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CVideoPlayerDlg 对话框</P>

<P>class CVideoPlayerDlg : public CDialog</P>
<P>{</P>
<P>// 构造</P>
<P>public:</P>
<P>&#9;CVideoPlayerDlg(CWnd* pParent = NULL);&#9;// 标准构造函数</P>

<P>// 对话框数据</P>
<P>&#9;//{{AFX_DATA(CVideoPlayerDlg)</P>
<P>&#9;enum { IDD = IDD_VIDEOPLAYER_DIALOG };</P>
<P>&#9;CActiveMovie&#9;m_amovie;</P>
<P>&#9;//}}AFX_DATA</P>

<P>&#9;//{{AFX_VIRTUAL(CVideoPlayerDlg)</P>
<P>&#9;protected:</P>
<P>&#9;virtual void DoDataExchange(CDataExchange* pDX);&#9;// DDX/DDV 支持</P>
<P>&#9;//}}AFX_VIRTUAL</P>

<P>// 实现</P>
<P>protected:</P>
<P>&#9;void MoveMovieWindow();</P>
<P>&#9;HICON m_hIcon;</P>

<P>&#9;//{{AFX_MSG(CVideoPlayerDlg)</P>
<P>&#9;virtual BOOL OnInitDialog();</P>
<P>&#9;afx_msg void OnSysCommand(UINT nID, LPARAM lParam);</P>
<P>&#9;afx_msg void OnPaint();</P>
<P>&#9;afx_msg HCURSOR OnQueryDragIcon();</P>
<P>&#9;afx_msg void OnFileOpen();</P>
<P>&#9;afx_msg void OnOpenCompleteAmovie();</P>
<P>&#9;afx_msg void OnReadyStateChangeAmovie(long ReadyState);</P>
<P>&#9;afx_msg void OnFileClose();</P>
<P>&#9;afx_msg void OnStateChangeAmovie(long oldState, long newState);</P>
<P>&#9;afx_msg void OnDisplayModeChangeAmovie();</P>
<P>&#9;afx_msg void OnFileExit();</P>
<P>&#9;afx_msg void OnPlayStart();</P>
<P>&#9;afx_msg void OnPlayStop();</P>
<P>&#9;afx_msg void OnAudeoVolumn();</P>
<P>&#9;afx_msg void OnErrorAmovie(short SCode, LPCTSTR Description, </P>
<P>&#9;&#9;LPCTSTR Source, BOOL FAR* CancelDisplay);</P>
<P>&#9;afx_msg void OnAudeoBalance();</P>
<P>&#9;afx_msg void OnVideo1x();</P>
<P>&#9;afx_msg void OnVideo2x();</P>
<P>&#9;afx_msg void OnPlayPause();</P>
<P>&#9;afx_msg void OnHelpAbout();</P>
<P>&#9;DECLARE_EVENTSINK_MAP()</P>
<P>&#9;//}}AFX_MSG</P>
<P>&#9;DECLARE_MESSAGE_MAP()</P>
<P>};</P>

<P>// VideoPlayerDlg.cpp : 实现文件</P>
<P>//</P>

<P>#include "stdafx.h"</P>
<P>#include "VideoPlayer.h"</P>
<P>#include "VideoPlayerDlg.h"</P>
<P>#include "VolumnDlg.h"</P>
<P>#include "BalanceDlg.h"</P>

<P>// 在此省略了定义和实现类 CAboutDlg 的代码</P>
<P>// ...</P>

<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CVideoPlayerDlg 对话框</P>

<P>CVideoPlayerDlg::CVideoPlayerDlg(CWnd* pParent /*=NULL*/)</P>
<P>&#9;: CDialog(CVideoPlayerDlg::IDD, pParent)</P>
<P>{</P>
<P>&#9;//{{AFX_DATA_INIT(CVideoPlayerDlg)</P>
<P>&#9;//}}AFX_DATA_INIT</P>
<P>&#9;// 注意：LoadIcon 函数并不需要的后面调用 Win32 中的 DestroyIcon</P>
<P>&#9;m_hIcon = AfxGetApp()-&gt;LoadIcon(IDR_MAINFRAME);</P>
<P>}</P>

<P>void CVideoPlayerDlg::DoDataExchange(CDataExchange* pDX)</P>
<P>{</P>
<P>&#9;CDialog::DoDataExchange(pDX);</P>
<P>&#9;//{{AFX_DATA_MAP(CVideoPlayerDlg)</P>
<P>&#9;DDX_Control(pDX, IDC_AMOVIE, m_amovie);</P>
<P>&#9;//}}AFX_DATA_MAP</P>
<P>}</P>

<P>// 类 CVideoPlayerDlg 的消息映射</P>
<P>BEGIN_MESSAGE_MAP(CVideoPlayerDlg, CDialog)</P>
<P>&#9;//{{AFX_MSG_MAP(CVideoPlayerDlg)</P>
<P>&#9;ON_WM_SYSCOMMAND()</P>
<P>&#9;ON_WM_PAINT()</P>
<P>&#9;ON_WM_QUERYDRAGICON()</P>
<P>&#9;ON_COMMAND(ID_FILEOPEN, OnFileOpen)</P>
<P>&#9;ON_COMMAND(ID_FILECLOSE, OnFileClose)</P>
<P>&#9;ON_COMMAND(ID_FILEEXIT, OnFileExit)</P>
<P>&#9;ON_COMMAND(ID_PLAYSTART, OnPlayStart)</P>
<P>&#9;ON_COMMAND(ID_PLAYSTOP, OnPlayStop)</P>
<P>&#9;ON_COMMAND(ID_AUDEOVOLUMN, OnAudeoVolumn)</P>
<P>&#9;ON_COMMAND(ID_AUDEOBALANCE, OnAudeoBalance)</P>
<P>&#9;ON_COMMAND(ID_VIDEO1X, OnVideo1x)</P>
<P>&#9;ON_COMMAND(ID_VIDEO2X, OnVideo2x)</P>
<P>&#9;ON_COMMAND(ID_PLAYPAUSE, OnPlayPause)</P>
<P>&#9;ON_COMMAND(ID_HELPABOUT, OnHelpAbout)</P>
<P>&#9;//}}AFX_MSG_MAP</P>
<P>END_MESSAGE_MAP()</P>

<P>/////////////////////////////////////////////////////////////////////////////</P>
<P>// CVideoPlayerDlg 消息处理函数</P>

<P>BOOL CVideoPlayerDlg::OnInitDialog()</P>
<P>{</P>
<P>&#9;CDialog::OnInitDialog();</P>

<P>&#9;// 为对话框设置图标。对于不使用对话框作为主窗口的应用程序，这一步骤由框架自动完成</P>
<P>&#9;SetIcon(m_hIcon, TRUE);&#9;&#9;&#9;// 设置大图标</P>
<P>&#9;SetIcon(m_hIcon, FALSE);&#9;&#9;// 设置小图标</P>
<P>&#9;</P>
<P>&#9;// 设置 ActiveMovie 控件的初始文件为空</P>
<P>&#9;m_amovie.SetFileName("");</P>
<P>&#9;// 改变窗口的大小以适应 ActiveMovie 控件的大小</P>
<P>&#9;MoveMovieWindow();</P>

<P>&#9;return TRUE;</P>
<P>}</P>

<P>// 如果向对话框中添加到最小化按钮，您将需要编写代码来绘制相应的图标。对于使用了</P>
<P>// 文档/视结构的应用程序，这一操作由框架自动完成</P>

<P>void CVideoPlayerDlg::OnPaint() </P>
<P>{</P>
<P>&#9;if (IsIconic())</P>
<P>&#9;{</P>
<P>&#9;&#9;CPaintDC dc(this); // 绘制设备上下文</P>

<P>&#9;&#9;SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);</P>

<P>&#9;&#9;// 在客户区矩形内居中图标</P>
<P>&#9;&#9;int cxIcon = GetSystemMetrics(SM_CXICON);</P>
<P>&#9;&#9;int cyIcon = GetSystemMetrics(SM_CYICON);</P>
<P>&#9;&#9;CRect rect;</P>
<P>&#9;&#9;GetClientRect(&amp;rect);</P>
<P>&#9;&#9;int x = (rect.Width() - cxIcon + 1) / 2;</P>
<P>&#9;&#9;int y = (rect.Height() - cyIcon + 1) / 2;</P>

<P>&#9;&#9;// 绘制图标</P>
<P>&#9;&#9;dc.DrawIcon(x, y, m_hIcon);</P>
<P>&#9;}</P>
<P>&#9;else</P>
<P>&#9;{</P>
<P>&#9;&#9;CDialog::OnPaint();</P>
<P>&#9;}</P>
<P>}</P>

<P>// 当用户拖动最小化了的窗口时，系统调用该函数来获得显示使用的光标</P>
<P>HCURSOR CVideoPlayerDlg::OnQueryDragIcon()</P>
<P>{</P>
<P>&#9;return (HCURSOR) m_hIcon;</P>
<P>}</P>

<P>// 打开媒体文件</P>
<P>void CVideoPlayerDlg::OnFileOpen() </P>
<P>{</P>
<P>&#9;CFileDialog dlg(TRUE, NULL, NULL, 0, "所有文件|*.*", NULL);</P>
<P>&#9;if (dlg.DoModal()==IDOK)</P>
<P>&#9;{</P>
<P>&#9;&#9;m_amovie.SetFileName(dlg.GetPathName());</P>
<P>&#9;}</P>
<P>}</P>

<P>// ActiveMovie 控件 IDC_AMOVIE 的消息映射</P>
<P>BEGIN_EVENTSINK_MAP(CVideoPlayerDlg, CDialog)</P>
<P>    //{{AFX_EVENTSINK_MAP(CVideoPlayerDlg)</P>
<P>&#9;ON_EVENT(CVideoPlayerDlg, IDC_AMOVIE, 50 /* OpenComplete */, </P>
<P>&#9;&#9;OnOpenCompleteAmovie, VTS_NONE)</P>
<P>&#9;ON_EVENT(CVideoPlayerDlg, IDC_AMOVIE, -609 /* ReadyStateChange */, </P>
<P>&#9;&#9;OnReadyStateChangeAmovie, VTS_I4)</P>
<P>&#9;ON_EVENT(CVideoPlayerDlg, IDC_AMOVIE, 1 /* StateChange */, </P>
<P>&#9;&#9;OnStateChangeAmovie, VTS_I4 VTS_I4)</P>
<P>&#9;ON_EVENT(CVideoPlayerDlg, IDC_AMOVIE, 51 /* DisplayModeChange */, </P>
<P>&#9;&#9;OnDisplayModeChangeAmovie, VTS_NONE)</P>
<P>&#9;ON_EVENT(CVideoPlayerDlg, IDC_AMOVIE, 999 /* Error */, </P>
<P>&#9;&#9;OnErrorAmovie, VTS_I2 VTS_BSTR VTS_BSTR VTS_PBOOL)</P>
<P>&#9;//}}AFX_EVENTSINK_MAP</P>
<P>END_EVENTSINK_MAP()</P>

<P>// 当 ActiveMovie 控件完成媒体文件的加载时自动播放该文件</P>
<P>void CVideoPlayerDlg::OnOpenCompleteAmovie() </P>
<P>{</P>
<P>&#9;m_amovie.Run();&#9;</P>
<P>}</P>

<P>// 当 ActiveMovie 控件的准备状态发生改变时，在需要的情况下改变对话框的大小以适应</P>
<P>// ActiveMovie 控件的大小</P>
<P>void CVideoPlayerDlg::OnReadyStateChangeAmovie(long ReadyState) </P>
<P>{</P>
<P>&#9;MoveMovieWindow();</P>
<P>}</P>

<P>// 关闭媒体文件，即简单的将 ActiveMovie 控件的 FileName 属性值设置为空</P>
<P>void CVideoPlayerDlg::OnFileClose() </P>
<P>{</P>
<P>&#9;m_amovie.SetFileName("");</P>
<P>}</P>

<P>// 当 ActiveMovie 控件的状态发生改变时，在需要的情况下改变对话框的大小以适应</P>
<P>// ActiveMovie 控件的大小</P>
<P>void CVideoPlayerDlg::OnStateChangeAmovie(long oldState, long newState) </P>
<P>{</P>
<P>&#9;MoveMovieWindow();&#9;</P>
<P>}</P>

<P>// 改变对话框在大小以适应 ActiveMovie 控件的大小</P>
<P>void CVideoPlayerDlg::MoveMovieWindow()</P>
<P>{</P>
<P>&#9;CRect rc1, rc2, rc3;</P>
<P>&#9;// 得到 ActiveMovie 控件的大小</P>
<P>&#9;m_amovie.GetWindowRect(rc1);</P>
<P>&#9;// 保证对话框客户区的宽不小于 300 象素，高不小于 225 象素</P>
<P>&#9;if (rc1.Width()&lt;300 || rc1.Height()&lt;225)</P>
<P>&#9;{</P>
<P>&#9;&#9;rc1.right=rc1.left+300;</P>
<P>&#9;&#9;rc1.bottom=rc1.top+225;</P>
<P>&#9;}</P>
<P>&#9;// 获得对话框的大小</P>
<P>&#9;GetWindowRect(rc2);</P>
<P>&#9;// 获得对话框客户区的大小</P>
<P>&#9;GetClientRect(rc3);</P>
<P>&#9;// 改变对话框的大小以适应 ActiveMovie 控件的大小</P>
<P>&#9;MoveWindow(rc2.left, rc2.top, </P>
<P>&#9;&#9;rc2.Width()-rc3.Width()+rc1.Width(), </P>
<P>&#9;&#9;rc2.Height()-rc3.Height()+rc1.Height());</P>
<P>&#9;// 获得 ActiveMovie 控件的大小</P>
<P>&#9;m_amovie.GetWindowRect(rc1);</P>
<P>&#9;GetClientRect(rc3);</P>
<P>&#9;// 使 ActiveMovie 控件在对话框的客户区居中</P>
<P>&#9;m_amovie.MoveWindow((rc3.Width()-rc1.Width())/2,</P>
<P>&#9;&#9;(rc3.Height()-rc1.Height())/2, rc1.Width(), rc1.Height());</P>
<P>}</P>

<P>// 当 ActiveMovie 控件的显示模式发生改变时，改变对话框的大小以适应这个改变</P>
<P>void CVideoPlayerDlg::OnDisplayModeChangeAmovie() </P>
<P>{</P>
<P>&#9;MoveMovieWindow();&#9;</P>
<P>}</P>

<P>// 关闭应用程序</P>
<P>void CVideoPlayerDlg::OnFileExit() </P>
<P>{</P>
<P>&#9;OnCancel();&#9;</P>
<P>}</P>

<P>// 开始播放所选定的媒体文件，由 ActiveMovie 控件的 Run 方法来实现</P>
<P>void CVideoPlayerDlg::OnPlayStart() </P>
<P>{</P>
<P>&#9;m_amovie.Run();&#9;</P>
<P>}</P>

<P>// 停止播放正在播放的媒体文件，由 ActiveMovie 控件的 Stop 方法来实现</P>
<P>void CVideoPlayerDlg::OnPlayStop() </P>
<P>{</P>
<P>&#9;m_amovie.Stop();&#9;</P>
<P>}</P>

<P>// 调节音量</P>
<P>void CVideoPlayerDlg::OnAudeoVolumn() </P>
<P>{</P>
<P>&#9;CVolumnDlg dlgVolumn;</P>
<P>&#9;dlgVolumn.SetVolumn(&amp;m_amovie);</P>
<P>}</P>

<P>// 处理 ActiveMovie 的出错事件，这里我们只是简单的弹出一个消息以告诉用户</P>
<P>// 出错的代码和描述</P>
<P>void CVideoPlayerDlg::OnErrorAmovie(short SCode, LPCTSTR Description, </P>
<P>&#9;LPCTSTR Source, BOOL FAR* CancelDisplay) </P>
<P>{</P>
<P>&#9;CString str;</P>
<P>&#9;str.Format("出现错误[%d]：\n\n%s", SCode, Description);</P>
<P>&#9;MessageBox(str);</P>
<P>&#9;*CancelDisplay=TRUE;</P>
<P>}</P>

<P>// 调节左右声道的平衡</P>
<P>void CVideoPlayerDlg::OnAudeoBalance() </P>
<P>{</P>
<P>&#9;CBalanceDlg dlgBalance;</P>
<P>&#9;dlgBalance.SetBalance(&amp;m_amovie);</P>
<P>}</P>

<P>// 设置视频窗口为视频文件的原始大小</P>
<P>void CVideoPlayerDlg::OnVideo1x() </P>
<P>{</P>
<P>&#9;m_amovie.Pause();</P>
<P>&#9;m_amovie.SetMovieWindowSize(0);</P>
<P>&#9;m_amovie.Run();</P>
<P>}</P>

<P>　</P>
<P>// 设置视频窗口为视频文件的两倍大小</P>
<P>void CVideoPlayerDlg::OnVideo2x() </P>
<P>{</P>
<P>&#9;m_amovie.Pause();</P>
<P>&#9;m_amovie.SetMovieWindowSize(1);</P>
<P>&#9;m_amovie.Run();</P>
<P>}</P>

<P>// 暂停媒体文件的播放，由 ActiveMovie 控件的 Pause 方法来实现</P>
<P>void CVideoPlayerDlg::OnPlayPause() </P>
<P>{</P>
<P>&#9;m_amovie.Pause();</P>
<P>}</P>

<P>// 显示关于对话框</P>
<P>void CVideoPlayerDlg::OnHelpAbout() </P>
<P>{</P>
<P>&#9;CAboutDlg dlgAbout;</P>
<P>&#9;dlgAbout.DoModal();</P>
<P>}</P>

</FONT><FONT SIZE=3><P ALIGN="JUSTIFY">9.&#9;</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>最后补充一点，在应用程序</FONT><FONT SIZE=3>VideoPlayer</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>的运行过程中，我们可能不希望用户通过其它的方式来更改</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件的状态。因为这有可能会破坏整个程序用户界面的一致性。举一个例子，在正常情况下，用户可以在</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件上右击鼠标来改变</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件的一些显示元素，如面板和控件条等。这些操作都会改变</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件的大小发生改变，而且在这种情况下，容纳该控件的对话框的大小不会同时发生改变，这样就会破坏应用程序的外观。因此，我们有必要禁止用户这样做。</P>
<P ALIGN="JUSTIFY">在资源编辑器中打开应用程序的主对话框，再打开</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>控件的属性页对话框。在</FONT><FONT SIZE=3>General</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>选项卡中选择</FONT><FONT SIZE=3>Disabled</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>；在“重放”选项卡中选择“播放次数”单选钮，并输入播放次数为</FONT><FONT SIZE=3>1</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>；在“控件”选项卡中清除“显示面板”和“控制面板”两个复选框。</P>
<P ALIGN="JUSTIFY"></P>
<P ALIGN="JUSTIFY">现在就可以编译和生成该应用程序了。图</FONT><FONT SIZE=3>7.7</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>为应用程序</FONT><FONT SIZE=3>VideoPlayer</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>播放</FONT><FONT SIZE=3>VCD</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=3>文件时的效果。</P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER"><IMG SRC="Image366.gif" tppabs="http://166.111.167.223/computer/cai/visual_c++_5.0_programming/Image366.gif" WIDTH=235 HEIGHT=187></P>
</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1><P ALIGN="CENTER">图</FONT><FONT SIZE=1>7. 7 </FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>应用程序</FONT><FONT SIZE=1>VideoPlayer</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>播放</FONT><FONT SIZE=1>VCD</FONT><FONT FACE="宋体" LANG="ZH-CN" SIZE=1>文件时的运行效果</P>

<UL>
</FONT><FONT FACE="黑体" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY"><LI>技巧：</LI></P>
</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3><P ALIGN="JUSTIFY"><LI>从上面的示例程序可以看出，</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>控件提供了非常完善的音频和视频媒体文件的回放功能。它能够支持多种文件格式，从最常见的</FONT><FONT SIZE=3>WAV</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>文件和</FONT><FONT SIZE=3>AVI</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>文件到使用</FONT><FONT SIZE=3>MPEG</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>压缩格式的</FONT><FONT SIZE=3>VCD</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>视频文件，都可以正常的进行播放。因此，若正在编写的应用程序需要提供多媒体支持，那么使用</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>是一个很好的主意。事实上，很多优秀的多媒体应用程序，其内部的多媒体回放就是使用</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>来实现的。只要精心的设计应用程序的用户界面，我们可以把一切“隐藏”得滴水不漏。而且，在</FONT><FONT SIZE=3>Windows 95/98</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>和</FONT><FONT SIZE=3>Windows NT</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>的最新版本中，</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>控件已作为操作系统的一部分来提供。即使用户的系统中没有安装</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>控件，</FONT><FONT SIZE=3>Microsoft</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>的许可协议也允许在你的应用程序的发行包中发布</FONT><FONT SIZE=3>ActiveMovie</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>的运行时文件。充分的使用各种优秀的第三方</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>控件，可使不费力的使用你的应用程序增色不少，这也就是</FONT><FONT SIZE=3>ActiveX</FONT><FONT FACE="楷体_GB2312" LANG="ZH-CN" SIZE=3>控件本身的一个魅力之所在。</LI></P></UL>
</FONT></BODY>
</HTML>
