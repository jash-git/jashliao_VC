<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>






  
  
  
  
  
  
  <link rel="stylesheet" href="stdlayout.css" tppabs="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/css/stdlayout.css" type="text/css">






  
  
  
  
  
  
  <link rel="stylesheet" href="print.css" tppabs="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/css/print.css" type="text/css">






  
  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">






  
  
  
  
  
  
  <title>洗撲克牌（亂數排列）</title>
</head>


<body>






<h3><a href="javascript:if(confirm('http://caterpillar.onlyfun.net/Gossip/index.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://caterpillar.onlyfun.net/Gossip/index.html'" tppabs="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>






<h1><a href="AlgorithmGossip.htm" tppabs="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/AlgorithmGossip.htm">Algorithm Gossip:&nbsp;洗撲克牌（亂數排列）</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>

    <tr>

      <td style="width: 676px; vertical-align: top;"> 
      <h2>說明</h2>
      <small>
洗撲克牌的原理其實與亂數排列是相同的，都是將一組數字（例如1∼N）打亂重新排列，只不過洗撲克牌多了一個花色判斷的動作而已。</small><br>

      <h2>解法</h2>
      <small>
初學者通常會直接想到，隨機產生1∼N的亂數並將之存入陣列中，後來產生的亂數存入陣列前必須先檢查陣列中是否已有重複的數字，如果有這個數就不存入，再重新產生下一個數，運氣不好的話，重複的次數就會很多，程式的執行速度就很慢了，這不是一個好方法。<br>
      <br>

以1∼52的亂數排列為例好了，可以將陣列先依序由1到52填入，然後使用一個迴圈走訪陣列，並隨機產生1∼52的亂數，將產生的亂數當作索引取出陣列值，並與目前陣列走訪到的值相交換，如此就不用擔心亂數重複的問題了，陣列走訪完畢後，所有的數字也就重新排列了。<br>
      <br>

至於如何判斷花色？這只是除法的問題而已，取商數判斷花色，取餘數判斷數字，您可以直接看程式比較清楚。</small>

      <br>

      <h2>實作</h2>



      <ul>
        <li> C
  </li>
      </ul>


      <pre>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;time.h&gt;<br>#define N 52<br><br>int main(void) {<br>    int poker[N + 1];<br>    int i, j, tmp, remain;<br><br>    // 初始化陣列 <br>    for(i = 1; i &lt;= N; i++)<br>        poker[i] = i; <br><br>    srand(time(0));<br><br>    // 洗牌 <br>    for(i = 1; i &lt;= N; i++) {<br>        j = rand() % 52 + 1;<br>        tmp = poker[i];<br>        poker[i] = poker[j]; <br>        poker[j] = tmp; <br>    }<br><br>    for(i = 1; i &lt;= N; i++) {<br>        // 判斷花色 <br>        switch((poker[i]-1) / 13) { <br>            case 0: <br>                printf("桃"); break;<br>            case 1: <br>                printf("心"); break;<br>            case 2: <br>                printf("磚"); break;<br>            case 3: <br>                printf("梅"); break;<br>        } <br><br>        // 撲克牌數字 <br>        remain = poker[i] % 13;<br>        switch(remain) { <br>            case 0: <br>                printf("K "); break;<br>            case 12: <br>                printf("Q "); break;<br>            case 11: <br>                printf("J "); break;<br>            default: <br>                printf("%d ", remain); break;<br>        } <br><br>        if(i % 13 == 0)<br>            printf("\n");<br>    } <br><br>    return 0;<br>} <br></pre>


      <br>


      <ul>
        <li> Java
  </li>
      </ul>


      <pre>public class ShuffleCard { <br>    public static void main(String args[]) { <br>        final int N = 52; <br>        int[] poker = new int[N + 1]; <br><br>        // 初始化陣列 <br>        for(int i = 1; i &lt;= N; i++) <br>            poker[i] = i; <br><br>        // 洗牌 <br>        for(int i = 1; i &lt;= N; i++) { <br>            int j = (int) (Math.random() * N);<br><br>            if(j == 0)<br>                j = 1;<br><br>            int tmp = poker[i]; <br>            poker[i] = poker[j]; <br>            poker[j] = tmp; <br>        } <br><br>        for(int i = 1; i &lt;= N; i++) { <br>            // 判斷花色 <br>            switch((poker[i]-1) / 13) { <br>                case 0: <br>                    System.out.print("桃"); break; <br>                case 1: <br>                    System.out.print("心"); break; <br>                case 2: <br>                    System.out.print("磚"); break; <br>                case 3: <br>                    System.out.print("梅"); break; <br>            } <br><br>            // 撲克牌數字 <br>            int remain = poker[i] % 13; <br>            switch(remain) { <br>                case 0: <br>                    System.out.print("K "); break; <br>                case 12: <br>                    System.out.print("Q "); break; <br>                case 11: <br>                    System.out.print("J "); break; <br>                default: <br>                    System.out.print(remain + " "); break; <br>            } <br><br>            if(i % 13 == 0) <br>                System.out.println(""); <br>        } <br>    } <br>}</pre>
 </td>

      <td style="width: 250px; text-align: center; vertical-align: top;">
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>

      <br>

      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js">
      </script></td>

    </tr>

  </tbody>
</table>

<br>
</body>
</html>
