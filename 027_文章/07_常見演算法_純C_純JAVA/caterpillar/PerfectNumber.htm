<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>





  
  
  
  
  
  <link rel="stylesheet" href="stdlayout.css" tppabs="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/css/stdlayout.css" type="text/css">





  
  
  
  
  
  <link rel="stylesheet" href="print.css" tppabs="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/css/print.css" type="text/css">





  
  
  
  
  
  <meta content="text/html; charset=Big5" http-equiv="content-type">





  
  
  
  
  
  <title>完美數</title>
</head>


<body>





<h3><a href="javascript:if(confirm('http://caterpillar.onlyfun.net/Gossip/index.html  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://caterpillar.onlyfun.net/Gossip/index.html'" tppabs="http://caterpillar.onlyfun.net/Gossip/index.html">From
Gossip@caterpillar</a></h3>





<h1><a href="AlgorithmGossip.htm" tppabs="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/AlgorithmGossip.htm">Algorithm Gossip:&nbsp;完美數</a></h1>

<table style="text-align: left; width: 946px; height: 32px;" border="0" cellpadding="0" cellspacing="0">

  <tbody>

    <tr>

      <td style="width: 676px; vertical-align: top;"> 




      <h2>說明</h2>
      <small>

如果有一數n，其真因數（Proper factor）的總和等於n，則稱之為完美數（Perfect Number），例如以下幾個數都是完美數：<br>
      </small>

      <div style="margin-left: 40px; font-weight: bold;"><small><span style="font-family: Courier New,Courier,monospace;">6 = 1 + 2 + 3</span><br style="font-family: Courier New,Courier,monospace;">

      <span style="font-family: Courier New,Courier,monospace;">
28 = 1 + 2 + 4 + 7 + 14</span><br style="font-family: Courier New,Courier,monospace;">

      <span style="font-family: Courier New,Courier,monospace;">
496 = 1 + 2 + 4 + 8 + 16 + 31 + 62 + 124 + 248</span><br>


      </small></div>


      <small><br>


程式基本上不難，第一眼看到時會想到使用迴圈求出所有真因數，再進一步求因數和，不過若n值很大，則此法會花費許多時間在迴圈測試上，十分沒有效率，例如求小於10000的所有完美數。</small><br>


      <h2>解法</h2>
      <small>

如何求小於10000的所有完美數？並將程式寫的有效率？基本上有三個步驟：<br>
      </small>

      <ol>
        <li><small>求出一定數目的質數表</small></li>
        <li><small>利用質數表求指定數的因式分解</small></li>
        <li><small>利用因式分解求所有真因數和，並檢查是否為完美數</small></li>
      </ol>


      <small><br>
      <a href="EratosthenesPrime.htm" tppabs="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/EratosthenesPrime.htm">步驟一</a> 與 <a href="GCDPNumber.htm" tppabs="http://caterpillar.onlyfun.net/Gossip/AlgorithmGossip/GCDPNumber.htm">步驟二</a> 在之前討論過了，問題在步驟三，如何求真因數和？方法很簡單，要先知道將所有真因數和加上該數本身，會等於該數的兩倍，例如：<br>
      </small>



      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">2 * 28 = 1 + 2 + 4 + 7 + 14 + 28</span><br>


      </small></div>


      <small><br>


等式後面可以化為：<br>
      </small>

      <div style="margin-left: 40px;"><small><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">2 * 28 = (2</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">0</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"> + 2</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">1</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"> + 2</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">2</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">) * (7</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">0</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;"> + 7</span><sup style="font-weight: bold; font-family: Courier New,Courier,monospace;">1</sup><span style="font-weight: bold; font-family: Courier New,Courier,monospace;">)</span><br>


      </small></div>


      <small><br>


所以只要求出因式分解，就可以利用迴圈求得等式後面的值，將該值除以2就是真因數和了；等式後面第一眼看時可能想到使用等比級數公式來解，不過會使用到次方運算，可以在迴圈走訪因式分解陣列時，同時計算出等式後面的值，這在下面的實作中可以看到。 </small><br>





      <br>


      <h2> 實作</h2>



      <ul>
        <li> C
  </li>
      </ul>



      <pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br><br>#define N 1000 <br>#define P 10000 <br><br>int prime(int*);  // 求質數表 <br>int factor(int*, int, int*);  // 求factor <br>int fsum(int*, int);  // sum ot proper factor <br><br>int main(void) { <br>    int ptable[N+1] = {0}; // 儲存質數表 <br>    int fact[N+1] = {0};   // 儲存因式分解結果 <br>    int count1, count2, i; <br><br>    count1 = prime(ptable); <br><br>    for(i = 0; i &lt;= P; i++) { <br>        count2 = factor(ptable, i, fact); <br>        if(i == fsum(fact, count2)) <br>            printf("Perfect Number: %d\n", i); <br>    } <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>int prime(int* pNum) { <br>    int i, j; <br>    int prime[N+1]; <br><br>    for(i = 2; i &lt;= N; i++) <br>        prime[i] = 1; <br><br>    for(i = 2; i*i &lt;= N; i++) { <br>        if(prime[i] == 1) { <br>            for(j = 2*i; j &lt;= N; j++) { <br>                if(j % i == 0) <br>                    prime[j] = 0; <br>            } <br>        } <br>    } <br><br>    for(i = 2, j = 0; i &lt; N; i++) { <br>        if(prime[i] == 1) <br>            pNum[j++] = i; <br>    } <br><br>    return j; <br>} <br><br>int factor(int* table, int num, int* frecord) { <br>    int i, k; <br><br>    for(i = 0, k = 0; table[i] * table[i] &lt;= num;) { <br>        if(num % table[i] == 0) { <br>            frecord[k] = table[i]; <br>            k++; <br>            num /= table[i]; <br>        } <br>        else <br>            i++; <br>    } <br><br>    frecord[k] = num; <br><br>    return k+1; <br>} <br><br>int fsum(int* farr, int c) { <br>    int i, r, s, q; <br><br>    i = 0; <br>    r = 1; <br>    s = 1; <br>    q = 1; <br><br>    while(i &lt; c) { <br>        do { <br>            r *= farr[i]; <br>            q += r; <br>            i++; <br>        } while(i &lt; c-1 &amp;&amp; farr[i-1] == farr[i]); <br>        s *= q; <br>        r = 1; <br>        q = 1; <br>    } <br><br>    return s / 2; <br>} <br></pre>



      <br>



      <ul>
        <li> Java
  </li>
      </ul>



      <pre>import java.util.ArrayList;<br><br>public class PerfectNumber {<br>    public static int[] lessThan(int number) {<br>        int[] primes = Prime.findPrimes(number);<br><br>        ArrayList list = new ArrayList();<br>        <br>        for(int i = 1; i &lt;= number; i++) { <br>            int[] factors = factor(primes, i); <br>            if(i == fsum(factors)) <br>                list.add(new Integer(i));<br>        } <br><br>        int[] p = new int[list.size()];<br>        Object[] objs = list.toArray(); <br>        for(int i = 0; i &lt; p.length; i++) {<br>            p[i] = ((Integer) objs[i]).intValue();<br>        }<br>        <br>        return p;<br>    }<br>    <br>    private static int[] factor(int[] primes, int number) { <br>        int[] frecord = new int[number];<br>        int k = 0;<br>        <br>        for(int i = 0; Math.pow(primes[i], 2) &lt;= number;) { <br>            if(number % primes[i] == 0) { <br>                frecord[k] = primes[i]; <br>                k++; <br>                number /= primes[i]; <br>            } <br>            else <br>                i++; <br>        } <br><br>        frecord[k] = number; <br><br>        return frecord; <br>    } <br><br>    private static int fsum(int[] farr) { <br>        int i, r, s, q; <br><br>        i = 0; <br>        r = 1; <br>        s = 1; <br>        q = 1; <br><br>        while(i &lt; farr.length) { <br>            do { <br>                r *= farr[i]; <br>                q += r; <br>                i++; <br>            } while(i &lt; farr.length - 1 &amp;&amp;<br>                    farr[i-1] == farr[i]); <br>            s *= q; <br>            r = 1; <br>            q = 1; <br>        } <br><br>        return s / 2; <br>    }<br>    <br>    public static void main(String[] args) {<br>        int[] pn = PerfectNumber.lessThan(1000);<br>     <br>        for(int i = 0; i &lt; pn.length; i++) {<br>            System.out.print(pn[i] + " ");<br>        }<br>        <br>        System.out.println();<br>    }<br>}</pre>


      <br>

 </td>

      <td style="width: 250px; text-align: center; vertical-align: top;">
      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js">
      </script><br>

      <br>

      <script type="text/javascript"><!--
google_ad_client = "pub-9750319131714390";
google_ad_width = 160;
google_ad_height = 600;
google_ad_format = "160x600_as";
google_ad_type = "text_image";
google_ad_channel = "";
//-->
      </script>
      <script type="text/javascript" src="show_ads.js" tppabs="http://pagead2.googlesyndication.com/pagead/show_ads.js">
      </script></td>

    </tr>

  </tbody>
</table>
<br>





</body>
</html>
