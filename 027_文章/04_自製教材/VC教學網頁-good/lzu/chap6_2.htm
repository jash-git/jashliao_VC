<html>

<head>
<title>6.2 新的Win32控件</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body link="#3973DE" alink="#3973DE">
<font SIZE="5"><b><div align="center"><center>

<table border="0" width="615" cellspacing="0" cellpadding="0">
  <tr>
    </b><td><div align="center"><center><table border="0" width="615" cellpadding="0" cellspacing="0" height="20">
      <tr>
        <td width="377" bgcolor="#15397D" height="20"></td>
        <td width="238" bgcolor="#000000" height="20"><p align="right"></font><span style="text-decoration: none"><a href="javascript:if(confirm('http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/index.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/index.htm'" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/index.htm"><font color="#FFFFFF">电脑报Visual 
        C++网络教程</font></a></span></td>
      </tr>
    </table>
    </center></div><font FACE="Times New Roman" SIZE="3"><b><p ALIGN="CENTER"></b></font><font color="#3973DE" FACE="Times New Roman" SIZE="3">6.2</font><font color="#3973DE"><font SIZE="3">　新的</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件</font></font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">从</font><font FACE="Times New Roman" SIZE="3">Windows 
    95</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">Windows NT 3.51</font><font SIZE="3">版开始，</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">提供了一些先进的</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件．这些新控件弥补了传统控件的某些不足之处，并使</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">的界面丰富多彩且更加友好．</font><font FACE="Times New Roman" SIZE="3">MFC</font><font SIZE="3">的新控件类封装了这些控件，新控件及其对应的控件类如表</font><font FACE="Times New Roman" SIZE="3">6.21</font><font SIZE="3">所示．</font><font FACE="Times New Roman" SIZE="3"></p>
    </font><b><font SIZE="3"><p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.21 
    </font><font SIZE="3">新的</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件及其控件类</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="27%"><font SIZE="3"><b><p ALIGN="JUSTIFY">控件名</b></font></td>
        <td WIDTH="50%"><font SIZE="3"><b><p ALIGN="JUSTIFY">功能</b></font></td>
        <td WIDTH="23%"><font SIZE="3"><b><p ALIGN="JUSTIFY">对应的控件类</b></font></td>
      </tr>
      <tr>
        <td WIDTH="27%"><font SIZE="3"><p ALIGN="JUSTIFY">动画</font><font FACE="Times New Roman" SIZE="3">(Animate)</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">可播放</font><font FACE="Times New Roman" SIZE="3">avi</font><font SIZE="3">文件．</font></td>
        <td WIDTH="23%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CAnimateCtrl</font></td>
      </tr>
      <tr>
        <td WIDTH="27%"><font SIZE="3"><p ALIGN="JUSTIFY">热键</font><font FACE="Times New Roman" SIZE="3">(Hot Key)</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">使用户能选择热键组合．</font></td>
        <td WIDTH="23%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CHotKeyCtrl</font></td>
      </tr>
      <tr>
        <td WIDTH="27%"><font SIZE="3"><p ALIGN="JUSTIFY">列表视图</font><font FACE="Times New Roman" SIZE="3">(List View)</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">能够以列表、小图标、大图标或报告格式显示数据．</font></td>
        <td WIDTH="23%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CListCtrl</font></td>
      </tr>
      <tr>
        <td WIDTH="27%"><font SIZE="3"><p ALIGN="JUSTIFY">进度条</font><font FACE="Times New Roman" SIZE="3">(Progress Bar)</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">用于指示进度．</font></td>
        <td WIDTH="23%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CProgressCtrl</font></td>
      </tr>
      <tr>
        <td WIDTH="27%"><font SIZE="3"><p ALIGN="JUSTIFY">滑尺</font><font FACE="Times New Roman" SIZE="3">(Slider)</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">也叫轨道条</font><font FACE="Times New Roman" SIZE="3">(Trackbar)</font><font SIZE="3">，用户可以移动滑尺来在某一范围中进行选择．</font></td>
        <td WIDTH="23%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CSliderCtrl</font></td>
      </tr>
      <tr>
        <td WIDTH="27%"><font SIZE="3"><p ALIGN="JUSTIFY">旋转按钮</font><font FACE="Times New Roman" SIZE="3">(Spin Button)</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">有时被称为上下控件．有一对箭头按钮，用来调节某一值的大小．</font></td>
        <td WIDTH="23%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CSpinButtonCtrl</font></td>
      </tr>
      <tr>
        <td WIDTH="27%"><font SIZE="3"><p ALIGN="JUSTIFY">标签</font><font FACE="Times New Roman" SIZE="3">(Tab)</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">用来作为标签使用．</font></td>
        <td WIDTH="23%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CTabCtrl</font></td>
      </tr>
      <tr>
        <td WIDTH="27%"><font SIZE="3"><p ALIGN="JUSTIFY">树形视图</font><font FACE="Times New Roman" SIZE="3">(Tree View)</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">以树状结构显示数据．</font></td>
        <td WIDTH="23%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CTreeCtrl</font></td>
      </tr>
    </table>
    <font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY"></font><font SIZE="3">本节将主要介绍列表视图、树形视图、进度条、旋转按钮和滑尺控件，动画控件将在第十二章介绍．</font><font FACE="Times New Roman" SIZE="3"></p>
    <b><p ALIGN="JUSTIFY"></b></font><font color="#3973DE" FACE="Times New Roman" SIZE="3">6.2.1 
    Win32</font><font SIZE="3" color="#3973DE">控件的通知消息</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">较之传统的</font><font FACE="Times New Roman" SIZE="3">Windows 3.x</font><font SIZE="3">控件，新的</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件更加复杂和先进．在新控件发送通知消息的同时，往往还需要附加一些数据来描述控件的状态．传统的</font><font FACE="Times New Roman" SIZE="3">WM_COMMAND</font><font SIZE="3">消息通知机制显然不能完成这一任务，因为</font><font FACE="Times New Roman" SIZE="3">WM_COMMAND</font><font SIZE="3">消息的</font><font FACE="Times New Roman" SIZE="3">wParam</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">lParam</font><font SIZE="3">已经被占满了（见</font><font FACE="Times New Roman" SIZE="3">6.1.1</font><font SIZE="3">），无法容纳新的数据．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">在</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">中，采用新的</font><font FACE="Times New Roman" SIZE="3">WM_NOTIFY</font><font SIZE="3">消息来实现新控件的消息通知机制．在该消息的</font><font FACE="Times New Roman" SIZE="3">wParam</font><font SIZE="3">中含有控件的</font><font FACE="Times New Roman" SIZE="3">ID</font><font SIZE="3">，</font><font FACE="Times New Roman" SIZE="3">lParam</font><font SIZE="3">中则有一个指针，这个指针指向一个结构．这个结构要么是</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构，要么是一个以</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构作为第一个成员的扩充结构．通过</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构及其扩充结构可以传递附加数据．从理论上讲，可以通过扩充结构传送任意多的数据．需要指出的是，由于</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构是扩充结构的第一个成员，因此</font><font FACE="Times New Roman" SIZE="3">lParam</font><font SIZE="3">中的指针即可以认为是指向</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构的，也可以认为指向包含</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构的扩充结构的．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">NMHDR</font><font SIZE="3">结构如下所示：</p>
    <blockquote>
      </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct tagNMHDR {</p>
      <p ALIGN="JUSTIFY">HWND hwndFrom; //</font><font SIZE="3">控件窗口的句柄</p>
      </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UINT idFrom; //</font><font SIZE="3">控件的</font><font FACE="Times New Roman" SIZE="3">ID</p>
      <p ALIGN="JUSTIFY">UINT code; //</font><font SIZE="3">控件的通知消息码</p>
      </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">} NMHDR;</p>
    </blockquote>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">一个典型的扩充结构如下所示，该结构用于列表视图控件的</font><font FACE="Times New Roman" SIZE="3">LVN_KEYDOWN</font><font SIZE="3">通知消息．</p>
    <blockquote>
      </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct 
      tagLV_KEYDOWN {</p>
      <p ALIGN="JUSTIFY">NMHDR hdr; //NMHDR</font><font SIZE="3">结构作为第一个成员</p>
      </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">WORD wVKey; </p>
      <p ALIGN="JUSTIFY">UINT flags; </p>
      <p ALIGN="JUSTIFY">} LV_KEYDOWN;</p>
    </blockquote>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">有些控件通知消息是所有</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件共有的，这些消息在表</font><font FACE="Times New Roman" SIZE="3">6.22</font><font SIZE="3">中列出．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><b><font SIZE="3">　</p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.22 Win32</font><font SIZE="3">控件共有的通知消息</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="50%"><font SIZE="3"><b><p ALIGN="JUSTIFY">通知消息码</b></font></td>
        <td WIDTH="50%"><font SIZE="3"><b><p ALIGN="JUSTIFY">含义</b></font></td>
      </tr>
      <tr>
        <td WIDTH="50%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">NM_CLICK</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">用户在控件上单击鼠标左键．</font></td>
      </tr>
      <tr>
        <td WIDTH="50%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">NM_DBLCLK</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">用户在控件上双击鼠标左键．</font></td>
      </tr>
      <tr>
        <td WIDTH="50%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">NM_RCLICK</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">用户在控件上单击鼠标右键．</font></td>
      </tr>
      <tr>
        <td WIDTH="50%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">NM_RDBLCLK</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">用户在控件上双击鼠标右键．</font></td>
      </tr>
      <tr>
        <td WIDTH="50%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">NM_RETURN</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">用户在控件上按回车键．</font></td>
      </tr>
      <tr>
        <td WIDTH="50%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">NM_SETFOCUS</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">控件获得输入焦点．</font></td>
      </tr>
      <tr>
        <td WIDTH="50%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">NM_KILLFOCUS</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">控件失去输入焦点．</font></td>
      </tr>
      <tr>
        <td WIDTH="50%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">NM_OUTOFMEMORY</font></td>
        <td WIDTH="50%"><font SIZE="3"><p ALIGN="JUSTIFY">内存不够．</font></td>
      </tr>
    </table>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">WM_NOTIFY</font><font SIZE="3">的消息映射由宏</font><font FACE="Times New Roman" SIZE="3">ON_NOTIFY</font><font SIZE="3">负责，该消息映射宏具有如下形式：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">ON_NOTIFY( wNotifyCode, id, memberFxn )</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">wNotifyCode</font><font SIZE="3">说明了通知消息码，参数</font><font FACE="Times New Roman" SIZE="3">id</font><font SIZE="3">是控件的</font><font FACE="Times New Roman" SIZE="3">ID</font><font SIZE="3">，第三个参数则是消息处理函数名．消息处理函数应该按下面的形式声明，其中参数</font><font FACE="Times New Roman" SIZE="3">pNotifyStruct</font><font SIZE="3">指向</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">及其扩充结构，参数</font><font FACE="Times New Roman" SIZE="3">result</font><font SIZE="3">指向一个处理结果．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">afx_msg void memberFxn( NMHDR * pNotifyStruct, LRESULT * result );</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">利用</font><font FACE="Times New Roman" SIZE="3">ClassWizard</font><font SIZE="3">可以很方便地加入</font><font FACE="Times New Roman" SIZE="3">WM_NOTIFY</font><font SIZE="3">消息映射及其处理函数，一个典型的</font><font FACE="Times New Roman" SIZE="3">WM_NOTIFY</font><font SIZE="3">消息映射如下所示，其中</font><font FACE="Times New Roman" SIZE="3">LVN_KEYDOWN</font><font SIZE="3">是</font><font FACE="Times New Roman" SIZE="3">IDC_LIST1</font><font SIZE="3">列表视图控件发出的通知消息．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">ON_NOTIFY( LVN_KEYDOWN, IDC_LIST1, OnKeydownList1 )</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">消息处理函数</font><font FACE="Times New Roman" SIZE="3">OnKeydownList1</font><font SIZE="3">的定义如下面所示．在函数中</font><font FACE="Times New Roman" SIZE="3">ClassWizard</font><font SIZE="3">自动把</font><font FACE="Times New Roman" SIZE="3">pNHHDR</font><font SIZE="3">指针强制转换成</font><font FACE="Times New Roman" SIZE="3">LV_KEYDOWN</font><font SIZE="3">型并赋给</font><font FACE="Times New Roman" SIZE="3">pLVKeyDow</font><font SIZE="3">指针，这样，在函数中可通过这两个指针访问</font><font FACE="Times New Roman" SIZE="3">LV_KEYDOWN</font><font SIZE="3">扩充结构及其所含的</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构．另外，在函数返回时，</font><font FACE="Times New Roman" SIZE="3">ClassWizard</font><font SIZE="3">自动将处理结果赋</font><font FACE="Times New Roman" SIZE="3">0</font><font SIZE="3">值．</p>
    <blockquote>
      </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">void 
      CMyDlg::OnKeydownList1(NMHDR* pNMHDR, LRESULT* pResult)</p>
      <p ALIGN="JUSTIFY">{</p>
      <p ALIGN="JUSTIFY">LV_KEYDOWN* pLVKeyDow = (LV_KEYDOWN*)pNMHDR;</p>
      <p ALIGN="JUSTIFY">// TODO: Add your control notification handler</p>
      <p ALIGN="JUSTIFY">// code here</p>
      <p ALIGN="JUSTIFY">*pResult = 0;</p>
      <p ALIGN="JUSTIFY">}</p>
    </blockquote>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">可以利用</font><font FACE="Times New Roman" SIZE="3">ON_NOTIFY_RANGE</font><font SIZE="3">宏把多个</font><font FACE="Times New Roman" SIZE="3">ID</font><font SIZE="3">连续的控件发出的相同消息映射到同一个处理函数上，具体形式如下，其中参数</font><font FACE="Times New Roman" SIZE="3">id</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">idLast</font><font SIZE="3">分别说明明了一组连续的控件</font><font FACE="Times New Roman" SIZE="3">ID</font><font SIZE="3">中的头一个和最后一个</font><font FACE="Times New Roman" SIZE="3">ID</font><font SIZE="3">．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">ON_NOTIFY_RANGE( wNotifyCode, id, idLast, memberFxn )</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">相应的消息处理函数应按下面的形式声明，与普通的</font><font FACE="Times New Roman" SIZE="3">WM_NOTIFY</font><font SIZE="3">消息处理函数相比，该函数多了一个参数</font><font FACE="Times New Roman" SIZE="3">id</font><font SIZE="3">用来说明发送通知消息的控件</font><font FACE="Times New Roman" SIZE="3">ID</font><font SIZE="3">．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">afx_msg void memberFxn( UINT id, NMHDR * pNotifyStruct, LRESULT * 
    result );</p>
    <p ALIGN="JUSTIFY">ClassWizard</font><font SIZE="3">不支持</font><font FACE="Times New Roman" SIZE="3">ON_NOTIFY_RANGE</font><font SIZE="3">宏，所以需要手工建立消息映射和消息处理函数．</font><font FACE="Times New Roman" SIZE="3"></p>
    <b><p ALIGN="JUSTIFY"></b></font><font color="#3973DE" FACE="Times New Roman" SIZE="3">6.2.2 
    </font><font SIZE="3" color="#3973DE">旋转按钮控件</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">旋转按钮</font><font FACE="Times New Roman" SIZE="3">(Spin Button)</font><font SIZE="3">有时也被称为上下控件</font><font FACE="Times New Roman" SIZE="3">(Up-Down Control)</font><font SIZE="3">．</font><font FACE="Times New Roman" SIZE="3">Windows 95</font><font SIZE="3">控制面板中的日期</font><font FACE="Times New Roman" SIZE="3">/</font><font SIZE="3">时间程序中就有两个典型的旋转按钮，如图</font><font FACE="Times New Roman" SIZE="3">6.2</font><font SIZE="3">所示．旋转按钮由两个箭头按钮组成，用户在箭头按钮上单击鼠标可以在某一范围内增加或减少某一个值．旋转按钮一般不会单独存在，而是和编辑框或静态正文组成一个多部件控件来共同显示和控制某一个值，用户可以用旋转按钮修改编辑框中的数字，也可以直接在编辑框中修改．例如，在图</font><font FACE="Times New Roman" SIZE="3">6.2</font><font SIZE="3">中，在旋转按钮的左测有一个编辑框，用户可以在编辑框中直接输入新的年份，也可以用旋转按钮来增减编辑框中的年份．通常，把与旋转按钮在一块的编辑框或静态正文称为＂伙伴＂</font><font FACE="Times New Roman" SIZE="3">(buddy)</font><font SIZE="3">．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><img src="T6_2.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap6/T6_2.gif" alt="T6_2.tif (164162 bytes)" WIDTH="462" HEIGHT="333"><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><font SIZE="3">图</font><font FACE="Times New Roman" SIZE="3">6.2 
    </font><font SIZE="3">日期</font><font FACE="Times New Roman" SIZE="3">/</font><font SIZE="3">时间程序中的旋转按钮</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">MFC</font><font SIZE="3">的</font><font FACE="Times New Roman" SIZE="3">CSpinButtonCtrl</font><font SIZE="3">类封装了旋转按钮的功能．</font><font FACE="Times New Roman" SIZE="3">CSpinButtonCtrl</font><font SIZE="3">的成员函数</font><font FACE="Times New Roman" SIZE="3">Create</font><font SIZE="3">负责创建控件，该函数的声明为</p>
    <blockquote>
      <blockquote>
        <blockquote>
          </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">BOOL Create( DWORD 
          dwStyle, const RECT&amp; rect, CWnd* pParentWnd, UINT nID );</font></p>
        </blockquote>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</p>
    <p ALIGN="JUSTIFY">参数</font><font FACE="Times New Roman" SIZE="3">dwStyle</font><font SIZE="3">是如表</font><font FACE="Times New Roman" SIZE="3">6.23</font><font SIZE="3">所示的各种控件风格的组合．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><b><font SIZE="3">　</p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.23 </font><font SIZE="3">旋转按钮控件的风格</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="36%"><font SIZE="3"><b><p ALIGN="JUSTIFY">控件风格</b></font></td>
        <td WIDTH="64%"><font SIZE="3"><b><p ALIGN="JUSTIFY">含义</b></font></td>
      </tr>
      <tr>
        <td WIDTH="36%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UDS_HORZ</font></td>
        <td WIDTH="64%"><font SIZE="3"><p ALIGN="JUSTIFY">指定一个水平旋转按钮．若不指定该风格则创建一个垂直的旋转按钮．</font></td>
      </tr>
      <tr>
        <td WIDTH="36%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UDS_WRAP</font></td>
        <td WIDTH="64%"><font SIZE="3"><p ALIGN="JUSTIFY">当旋转按钮增大到超过最大值时，自动重置为最小值，当减小至低于最小值时，自动重置为最大值．</font></td>
      </tr>
      <tr>
        <td WIDTH="36%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UDS_ARROWKEYS</font></td>
        <td WIDTH="64%"><font SIZE="3"><p ALIGN="JUSTIFY">当用户按下向下或向上箭头键时，旋转按钮值递增或递减．</font></td>
      </tr>
      <tr>
        <td WIDTH="36%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UDS_SETBUDDYINT</font></td>
        <td WIDTH="64%"><font SIZE="3"><p ALIGN="JUSTIFY">旋转按钮将自动更新伙伴控件中显示的数值，如果伙伴控件能接受输入，则可在伙伴控件中输入新的旋转按钮值．</font></td>
      </tr>
      <tr>
        <td WIDTH="36%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UDS_NOTHOUSANDS</font></td>
        <td WIDTH="64%"><font SIZE="3"><p ALIGN="JUSTIFY">伙伴控件中显示的数值每隔三位没有千位分隔符．</font></td>
      </tr>
      <tr>
        <td WIDTH="36%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UDS_AUTOBUDDY</font></td>
        <td WIDTH="64%"><font SIZE="3"><p ALIGN="JUSTIFY">自动使旋转按钮拥有一个伙伴控件．</font></td>
      </tr>
      <tr>
        <td WIDTH="36%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UDS_ALIGNRIGHT</font></td>
        <td WIDTH="64%"><font SIZE="3"><p ALIGN="JUSTIFY">旋转按钮在伙伴控件的右侧．</font></td>
      </tr>
      <tr>
        <td WIDTH="36%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UDS_ALIGNLEFT</font></td>
        <td WIDTH="64%"><font SIZE="3"><p ALIGN="JUSTIFY">旋转按钮在伙伴控件的左侧．</font></td>
      </tr>
    </table>
    <p><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font></b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">除上表的风格外，一般还要为旋转按钮指定</font><font FACE="Times New Roman" SIZE="3">WS_CHILD</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">WS_VISIBLE</font><font SIZE="3">风格．创建一个有伙伴的垂直旋转按钮控件，一般应指定的风格为</font><font FACE="Times New Roman" SIZE="3">WS_CHILD|WS_VISIBLE|UDS_AUTOBUDDY| UDS_SETBUDDYINT</font><font SIZE="3">．对于用对话框模板创建的旋转按钮控件，可以在控件的属性对话框中指定上表中列出的控件风格。例如，在属性对话框中选择</font><font FACE="Times New Roman" SIZE="3">Auto buddy</font><font SIZE="3">，相当于指定了</font><font FACE="Times New Roman" SIZE="3">UDS_AUTOBUDDY</font><font SIZE="3">风格．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">在对话框模板中，可以方便地为旋转按钮指定一个伙伴控件．首先，应该在旋转按钮控件的属性对话框中选择</font><font FACE="Times New Roman" SIZE="3">Auto buddy</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">Set buddy integer</font><font SIZE="3">属性，并在</font><font FACE="Times New Roman" SIZE="3">Alignment</font><font SIZE="3">栏中选择</font><font FACE="Times New Roman" SIZE="3">Left</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">Right</font><font SIZE="3">，然后就可以确定伙伴控件了．需要指出的是，旋转按钮并不是把离它最近的控件作为伙伴的．伙伴的选择是以</font><font FACE="Times New Roman" SIZE="3">tab</font><font SIZE="3">顺序为参照的，伙伴控件的</font><font FACE="Times New Roman" SIZE="3">tab</font><font SIZE="3">顺序必需紧挨着按钮控件且比它小．例如，如果某一控件的</font><font FACE="Times New Roman" SIZE="3">tab</font><font SIZE="3">顺序是</font><font FACE="Times New Roman" SIZE="3">3</font><font SIZE="3">，而旋转按钮的</font><font FACE="Times New Roman" SIZE="3">tab</font><font SIZE="3">顺序是</font><font FACE="Times New Roman" SIZE="3">4</font><font SIZE="3">，则不论这两个控件距离有多远，在程序运行时，旋转按钮都会自动与该控件结合在一起，形成伙伴关系．</font><font FACE="Times New Roman" SIZE="3"></p>
    </font><div align="center"><center><table border="2" cellpadding="2" cellspacing="0" width="100%" bgcolor="#97CBFF">
      <tr>
        <td width="100%"><font SIZE="3">提示：在本章的开头说过，用</font><font FACE="Times New Roman" SIZE="3">ClassWizard</font><font SIZE="3">无法为</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件创建数据变量．但我们可以为旋转按钮的伙伴控件（如编辑框）创建一个数据变量，该变量可看成是旋转按钮的数据变量．</font></td>
      </tr>
    </table>
    </center></div><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY"></font><font SIZE="3">通过</font><font FACE="Times New Roman" SIZE="3">CSpinButtonCtrl</font><font SIZE="3">的成员函数，可以对旋转按钮进行查询和设置：</p>
    <blockquote>
      <blockquote>
        <p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">GetRange</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetRange</font><font SIZE="3">来查询和设置旋转按钮值的范围，缺省时值的范围是</font><font FACE="Times New Roman" SIZE="3">1-100</font><font SIZE="3">．这两个函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">void GetRange( int &amp;lower, int&amp; upper 
        ) const;<br>
        void SetRange( int nLower, int nUpper );<br>
        </font><font SIZE="3">第一个参数是最小值，该值不能小于</font><font FACE="Times New Roman" SIZE="3">UD_MINVAL</font><font SIZE="3">，第二个参数是最大值，该值不能大于</font><font FACE="Times New Roman" SIZE="3">UD_MAXVAL</font><font SIZE="3">．值的范围不能超过</font><font FACE="Times New Roman" SIZE="3">UD_MAXVAL</font><font SIZE="3">．</p>
        <p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">GetPos</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetPos</font><font SIZE="3">来查询和设置旋转按钮的当前值．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">int GetPos( ) const;<br>
        int SetPos( int nPos );</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">GetBase</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetBase</font><font SIZE="3">来查询和设置旋转按钮值的计数制．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">UINT GetBase( ) const;<br>
        int SetBase( int nBase );<br>
        </font><font SIZE="3">如果参数</font><font FACE="Times New Roman" SIZE="3">nBase</font><font SIZE="3">是</font><font FACE="Times New Roman" SIZE="3">10</font><font SIZE="3">，则伙伴控件中显示的数值是十进制的，如果</font><font FACE="Times New Roman" SIZE="3">nBase</font><font SIZE="3">是</font><font FACE="Times New Roman" SIZE="3">16</font><font SIZE="3">，则是十六进制的．</p>
        <p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">GetBuddy</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetBuddy</font><font SIZE="3">来查询和设置旋转按钮的伙伴．上面已讲了在对话框模板中设置伙伴控件的方法，如果是用</font><font FACE="Times New Roman" SIZE="3">Create</font><font SIZE="3">手工创建旋转按钮，则可以用</font><font FACE="Times New Roman" SIZE="3">SetBuddy</font><font SIZE="3">来设置伙伴．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">CWnd* GetBuddy( ) const;<br>
        CWnd* SetBuddy( CWnd* pWndBuddy );<br>
        </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">pWndBuddy</font><font SIZE="3">是指向伙伴控件对象的</font><font FACE="Times New Roman" SIZE="3">CWnd</font><font SIZE="3">型指针．</p>
        <p ALIGN="JUSTIFY">可以用</font><font FACE="Times New Roman" SIZE="3">GetAccel</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetAccel</font><font SIZE="3">来查询和设置旋转按钮的加速值．在平时，在旋转按钮上按一下只会增</font><font FACE="Times New Roman" SIZE="3">/</font><font SIZE="3">减一个单位，而当按住按钮超过一定时间时，递增或递减的幅度将会加大到指定的加速值，从而加快了增减的速度．如果对缺省的加速值不满意，可以用</font><font FACE="Times New Roman" SIZE="3">SetAccel</font><font SIZE="3">设置新的加速值．可以有一套以上的加速值．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">UINT GetAccel( int nAccel, UDACCEL* pAccel ) 
        const;<br>
        BOOL SetAccel( int nAccel, UDACCEL* pAccel );<br>
        </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">nAccel</font><font SIZE="3">指定了</font><font FACE="Times New Roman" SIZE="3">UDACCEL</font><font SIZE="3">结构数组的大小．参数</font><font FACE="Times New Roman" SIZE="3">pAccel</font><font SIZE="3">指向一个</font><font FACE="Times New Roman" SIZE="3">UDACCEL</font><font SIZE="3">结构数组．</font><font FACE="Times New Roman" SIZE="3">UDACCEL</font><font SIZE="3">结构含有加速值的信息，其定义如下<br>
        </font><font FACE="Times New Roman" SIZE="3">typedef struct {</p>
        <blockquote>
          <p ALIGN="JUSTIFY">int nSec; //</font><font SIZE="3">加速值生效需要的时间（以秒为单位）</p>
          </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">int nInc; //</font><font SIZE="3">加速值</p>
        </blockquote>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">} UDACCEL;</p>
      </blockquote>
    </blockquote>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">旋转按钮常被认为是一个简化的滚动条．除了表</font><font FACE="Times New Roman" SIZE="3">6.22</font><font SIZE="3">列出的通知消息外，旋转按钮特有的滚动通知消息是通过</font><font FACE="Times New Roman" SIZE="3">WM_HSCROLL</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">WM_VSCROLL</font><font SIZE="3">消息发出的．消息处理函数</font><font FACE="Times New Roman" SIZE="3">OnHScroll</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">OnVScroll</font><font SIZE="3">分别用来处理水平或垂直旋转按钮的事件通知．由于伙伴控件中的内容会自动随旋转按钮变化，所以旋转按钮的通知消息意义不大．如果非要处理通知消息，一个典型的</font><font FACE="Times New Roman" SIZE="3">OnVscroll</font><font SIZE="3">函数如下所示：</p>
    <blockquote>
      </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">void 
      CMyDialog::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar)</p>
      <p ALIGN="JUSTIFY">{</p>
      <p ALIGN="JUSTIFY">CSpinButtonCtrl* pSpin=(CSpinButtonCtrl*)pScrollBar;</p>
      <p ALIGN="JUSTIFY">int nPosition;</p>
      <p ALIGN="JUSTIFY">if(pSpin= =&amp;m_Spin) //</font><font SIZE="3">判断是否是该旋转按钮发来的消息</p>
      </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">{</p>
      <p ALIGN="JUSTIFY">nPosition=m_Spin.GetPos( ); //</font><font SIZE="3">获取旋转按钮的当前值</p>
      </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY"><b>. . . . . .</p>
      </b><p ALIGN="JUSTIFY">}</p>
      <p ALIGN="JUSTIFY"><b>. . . . . .</p>
      </b><p ALIGN="JUSTIFY">}<br>
      </p>
    </blockquote>
    <b><p ALIGN="JUSTIFY"></b></font><font color="#3973DE" FACE="Times New Roman" SIZE="3">6.2.3 
    </font><font SIZE="3" color="#3973DE">滑尺控件</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">滑尺</font><font FACE="Times New Roman" SIZE="3">(Slider)</font><font SIZE="3">有时也被称作轨道条</font><font FACE="Times New Roman" SIZE="3">(Trackbar)</font><font SIZE="3">，在轨道条中有一个滑尺，在轨道条上通常会标有刻度，用户通过移动滑尺，可以在一个指定的范围内选择一个不精确的值．轨道条可用来调节一个模拟量，也可以用来在一些离散值中进行选择．在</font><font FACE="Times New Roman" SIZE="3">Windows 95</font><font SIZE="3">中，大量使用了轨道条控件，例如，在控制面板中的键盘和鼠标设置程序中就使用了轨道条控件，如图</font><font FACE="Times New Roman" SIZE="3">6.3</font><font SIZE="3">所示．轨道条不仅接受鼠标输入，也可以接受象左右箭头键、</font><font FACE="Times New Roman" SIZE="3">PgUp</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">PgDown</font><font SIZE="3">这样的键盘输入．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><img src="T6_3.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap6/T6_3.gif" alt="T6_3.tif (182219 bytes)" WIDTH="403" HEIGHT="421"><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><font SIZE="3">图</font><font FACE="Times New Roman" SIZE="3">6.3 
    </font><font SIZE="3">鼠标设置程序中的轨道条控件</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">与选择按钮不同，轨道条是一种模糊型的输入控件，用户不需要进行精确的选择，只要大致调整一下大小就行了．轨道条的这种特性非常符合人的行为习惯，因而在有些情况下是很有用，例如，对于音量的调节，显然用轨道条比用旋转按钮更符合人的日常习惯．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">轨道条的滑尺的移动具有离散性．例如，如果指定轨道条的范围是</font><font FACE="Times New Roman" SIZE="3">5</font><font SIZE="3">，那么滑尺只能在包括轨道条两端在内的</font><font FACE="Times New Roman" SIZE="3">6</font><font SIZE="3">个均匀的位置上移动．当然，如果范围很大，则用户就感觉不出是离散的了．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">轨道条控件与传统的滚动条控件有很多相似之处，实际上，前者是对后者的一种改进．除了表</font><font FACE="Times New Roman" SIZE="3">6.22</font><font SIZE="3">列出的通知消息外，轨道条控件是依靠</font><font FACE="Times New Roman" SIZE="3">WM_HSCROLL</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">WM_VSCROLL</font><font SIZE="3">来发送与滑尺有关的通知消息的，并且通知消息与滚动条极为相似．通知消息包括</font><font FACE="Times New Roman" SIZE="3">TB_BOTTOM</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">TB_LINEDOWN</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">TB_LINEUP</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">TB_TOP</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">TB_PAGEDOWN</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">TB_PAGEUP</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">TB_ENDTRACK</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">TB_THUMBPOSITION</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">TB_THUMBTRACK</font><font SIZE="3">．对照滚动条的通知消息，读者不难明白这些消息码的含义．其中前四个消息只有在用键盘移动滑尺时才会发出，最后两个消息只有在用鼠标拖动滑尺时才会发出．与滚动条不同的是，</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">会自动把滑尺移动到新位置上．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">MFC</font><font SIZE="3">的</font><font FACE="Times New Roman" SIZE="3">CSliderCtrl</font><font SIZE="3">类封装了轨道条．</font><font FACE="Times New Roman" SIZE="3">CSliderCtrl</font><font SIZE="3">类的</font><font FACE="Times New Roman" SIZE="3">Create</font><font SIZE="3">成员函数负责控件的创建，该函数的声明为</p>
    <blockquote>
      <blockquote>
        <blockquote>
          </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">BOOL Create( DWORD 
          dwStyle, const RECT&amp; rect, CWnd* pParentWnd, UINT nID );</font></p>
        </blockquote>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</p>
    <p ALIGN="JUSTIFY">参数参数</font><font FACE="Times New Roman" SIZE="3">dwStyle</font><font SIZE="3">是如表</font><font FACE="Times New Roman" SIZE="3">6.24</font><font SIZE="3">所示的各种控件风格的组合．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><b><font SIZE="3">　</p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.24 </font><font SIZE="3">轨道条控件的风格</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="577">
      <tr>
        <td WIDTH="32%"><font SIZE="3"><b><p ALIGN="JUSTIFY">控件风格</b></font></td>
        <td WIDTH="68%"><font SIZE="3"><b><p ALIGN="JUSTIFY">含义</b></font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_HORZ</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">指定一个水平轨道条．该风格是默认的．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_VERT</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">指定一个垂直轨道条．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_AUTOTICKS</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">在范围设定后，自动为轨道条加上刻度．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_NOTICKS</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">轨道条无刻度．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_BOTTOM</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">在水平轨道条的底部显示刻度，可与</font><font FACE="Times New Roman" SIZE="3">TBS_TOP</font><font SIZE="3">一起使用．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_TOP</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">在水平轨道条的顶部显示刻度，可与</font><font FACE="Times New Roman" SIZE="3">TBS_BOTTOM</font><font SIZE="3">一起使用．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_RIGHT</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">在垂直轨道条的右侧显示刻度，可与</font><font FACE="Times New Roman" SIZE="3">TBS_LEFT</font><font SIZE="3">一起使用．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_LEFT</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">在垂直轨道条的左侧显示刻度，可与</font><font FACE="Times New Roman" SIZE="3">TBS_RIGHT</font><font SIZE="3">一起使用．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_BOTH</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">在轨道条的上下部或左右两侧都显示刻度．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TBS_ENABLESELRANGE</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">在轨道条中显示一个选择范围．</font></td>
      </tr>
    </table>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">除上表的风格外，一般还要为轨道条指定</font><font FACE="Times New Roman" SIZE="3">WS_CHILD</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">WS_VISIBLE</font><font SIZE="3">风格．要创建一个具有刻度的水平轨道条，一般应指定风格为</font><font FACE="Times New Roman" SIZE="3">WS_CHILD|WS_VISIBLE|TBS_HORZ| TBS_AUTOTICKS</font><font SIZE="3">．对于用对话框模板创建的轨道条控件，可以在控件的属性对话框中指定上表中列出的控件风格。例如，在属性对话框中选择</font><font FACE="Times New Roman" SIZE="3">Autoticks</font><font SIZE="3">，相当于指定了</font><font FACE="Times New Roman" SIZE="3">TBS_AUTOTICKS</font><font SIZE="3">风格．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">通过调用</font><font FACE="Times New Roman" SIZE="3">CSliderCtrl</font><font SIZE="3">类的成员函数，可以对轨道条进行查询和设置：</p>
    <blockquote>
      <blockquote>
        <p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">GetRange</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetRange</font><font SIZE="3">来查询和设置轨道条的范围，缺省的范围是</font><font FACE="Times New Roman" SIZE="3">0-100</font><font SIZE="3">．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">void GetRange( int&amp; nMin, int&amp; nMax ) 
        const;<br>
        void SetRange( int nMin, int nMax, BOOL bRedraw = FALSE );<br>
        </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">nMin</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">nMax</font><font SIZE="3">分别是最小和最大值，参数</font><font FACE="Times New Roman" SIZE="3">bRedraw</font><font SIZE="3">为</font><font FACE="Times New Roman" SIZE="3">TRUE</font><font SIZE="3">时将重绘控件．</p>
        <p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">GetPos</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetPos</font><font SIZE="3">来查询和设置轨道条的当前值．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">int GetPos( ) const;<br>
        void SetPos( int nPos );</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">GetLineSize</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetLineSize</font><font SIZE="3">来查询和设置在按一下左箭头键或右箭头键时滑尺的移动量，该移动量的缺省值是</font><font FACE="Times New Roman" SIZE="3">1</font><font SIZE="3">个单位．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">int GetLineSize( ) const;<br>
        int SetLineSize( int nSize );</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">GetPageSize</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetPageSize</font><font SIZE="3">来查询和设置滑尺的块移动量，块移动量是指当按下</font><font FACE="Times New Roman" SIZE="3">PgUp</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">PgDown</font><font SIZE="3">键时滑尺的移动量．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">int GetPageSize( ) const;<br>
        int SetPageSize( int nSize );</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">SetTicFreq</font><font SIZE="3">设置轨道条的刻度的频度．缺省的频度是每个单位都有一个刻度，在范围较大时，为了使刻度不至于过密，需要调用该函数设置一个合理的频度．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">void SetTicFreq( int nFreq );<br>
        </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">nFreq</font><font SIZE="3">说明了两个刻度之间的间隔．</p>
        <p ALIGN="JUSTIFY">用函数</font><font FACE="Times New Roman" SIZE="3">SetTic</font><font SIZE="3">来在指定位置设置刻度．</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">自动显示的刻度是均匀的，利用该函数可以人为设置不均匀的刻度，该函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">BOOL SetTic( int nTic );</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">用函数</font><font FACE="Times New Roman" SIZE="3">ClearTics</font><font SIZE="3">来清除所有的刻度．该函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">void ClearTics( BOOL bRedraw = FALSE );</p>
      </blockquote>
    </blockquote>
    <p></font><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font></b><font color="#3973DE" FACE="Times New Roman" SIZE="3">6.2.4 </font><font SIZE="3" color="#3973DE">进度条控件</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">进度条</font><font FACE="Times New Roman" SIZE="3">(Progress Bar)</font><font SIZE="3">的用途是向用户显示程序的进度．进度条是</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件中最简单的控件，只需少数设置即可．</font><font FACE="Times New Roman" SIZE="3">Windows 95</font><font SIZE="3">中使用进度条的一个例子是磁盘扫描</font><font FACE="Times New Roman" SIZE="3">(ScanDisk)</font><font SIZE="3">程序，如图</font><font FACE="Times New Roman" SIZE="3">6.4</font><font SIZE="3">所示．进度条显示的数据是不精确的，它是一种模糊型的输出控件．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><img src="T6_4.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap6/T6_4.gif" alt="T6_4.tif (172432 bytes)" WIDTH="465" HEIGHT="348"><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><font SIZE="3">图</font><font FACE="Times New Roman" SIZE="3">6.4 
    </font><font SIZE="3">磁盘扫描程序中的进度条</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">MFC</font><font SIZE="3">的</font><font FACE="Times New Roman" SIZE="3">CProgressCtrl</font><font SIZE="3">类封装了进度条控件．该类的</font><font FACE="Times New Roman" SIZE="3">Create</font><font SIZE="3">成员函数负责创建控件，该函数的声明为</p>
    <blockquote>
      <blockquote>
        <blockquote>
          </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">BOOL Create( DWORD 
          dwStyle, const RECT&amp; rect, CWnd* pParentWnd, UINT nID );</font></p>
        </blockquote>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</p>
    <p ALIGN="JUSTIFY">进度条没有专门的风格，所以参数</font><font FACE="Times New Roman" SIZE="3">dwStyle</font><font SIZE="3">只能指定普通的窗口风格，一般只需指定</font><font FACE="Times New Roman" SIZE="3">WS_CHILD|WS_VISIBLE</font><font SIZE="3">就可以了．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">CProgressCtrl</font><font SIZE="3">类提供了少量的成员函数用来设置进度条：</p>
    <blockquote>
      <blockquote>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">void SetRange( int nLower, 
        int nUpper );<br>
        </font><font SIZE="3">该函数用来设置进度条的范围．参数</font><font FACE="Times New Roman" SIZE="3">nLow</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">nUpper</font><font SIZE="3">分别指定了最小和最大值，缺省时进度条的范围是</font><font FACE="Times New Roman" SIZE="3">0-100</font><font SIZE="3">．</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">int SetPos( int nPos );<br>
        </font><font SIZE="3">用来设置进度条的当前进度．函数返回的是进度条的前一个进度．</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">int StepIt( );<br>
        </font><font SIZE="3">使进度增加一个步长，步长值是由</font><font FACE="Times New Roman" SIZE="3">SetStep</font><font SIZE="3">函数设置的，缺省的步长值是</font><font FACE="Times New Roman" SIZE="3">10</font><font SIZE="3">．函数返回进度条的前一个进度．</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">int SetStep( int nStep );<br>
        </font><font SIZE="3">用来设置步长值．函数返回原来的步长值．</p>
        </font><font FACE="Times New Roman" SIZE="3">
      </blockquote>
    </blockquote>
    <p></font><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font></b><font color="#3973DE" FACE="Times New Roman" SIZE="3">6.2.5 </font><font SIZE="3" color="#3973DE">树形视图控件</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">树形视图</font><font FACE="Times New Roman" SIZE="3">(Tree View)</font><font SIZE="3">是一种特殊的列表，它能以树形分层结构显示数据．在</font><font FACE="Times New Roman" SIZE="3">Windows 95</font><font SIZE="3">的资源管理器</font><font FACE="Times New Roman" SIZE="3">(Windows Explorer)</font><font SIZE="3">的左侧窗口中就有一个用于显示目录的典型的树形视图，如图</font><font FACE="Times New Roman" SIZE="3">6.5</font><font SIZE="3">所示．在树形视图中，每个表项显示一个标题</font><font FACE="Times New Roman" SIZE="3">(Label)</font><font SIZE="3">，有时还会显示一幅图象，图象和标题分别提供了对数据的形象和抽象描述．通过图</font><font FACE="Times New Roman" SIZE="3">6.5</font><font SIZE="3">可以看出，树形视图可以很清楚的显示出数据的分支和层次关系．由此可见，树形视图非常适合显示象目录，网络结构等这样的复杂数据．传统的列表框不能分层显示数据，因此树形视图可以看作是对列表框的一种重要改进．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><img src="T6_5.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap6/T6_5.gif" alt="T6_5.tif (269628 bytes)" WIDTH="488" HEIGHT="351"><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><font SIZE="3">图</font><font FACE="Times New Roman" SIZE="3">6.5 
    </font><font SIZE="3">资源管理器中的树形视图和列表视图</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3"><br>
    树形视图是一种复杂的控件，它的复杂性体现在数据项之间具有分支和层次关系．例如，如果要向树形视图中加入新的项，则必需描述出该项与树形视图中已有项的相互关系，而不可能象往列表框中加入新项那样，调用一下</font><font FACE="Times New Roman" SIZE="3">AddString</font><font SIZE="3">就完事了．另外，树形视图可以在每一项标题的左边显示一幅图象，这使控件显得更加形象生动，但同时也增加了控件的复杂程度．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">在讨论如何使用树形视图控件以前，有必要先介绍一下与该控件有关的一些数据类型：</p>
    <blockquote>
      <blockquote>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">HTREEITEM</font><font SIZE="3">型句柄．</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">用</font><font FACE="Times New Roman" SIZE="3">HTREEITEM</font><font SIZE="3">型句柄来代表树形视图的一项，程序通过</font><font FACE="Times New Roman" SIZE="3">HTREEITEM</font><font SIZE="3">句柄来区分和访问树形视图的各个项．</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TV_ITEM</font><font SIZE="3">结构．该结构用来描述一个表项，它包含了表项的各种属性，其定义如下</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct _TV_ITEM </p>
        <p ALIGN="JUSTIFY">{ tvi </p>
        <blockquote>
          <p ALIGN="left">UINT&nbsp; mask; /*</font><font SIZE="3">包含一些屏蔽位（下面的括号中列出）的组合，用来表明结构的哪些成员是有效的</font><font FACE="Times New Roman" SIZE="3">*/</p>
        </blockquote>
        <blockquote>
          <p ALIGN="JUSTIFY">HTREEITEM hItem; //</font><font SIZE="3">表项的句柄</font><font FACE="Times New Roman" SIZE="3">(TVIF_HANDLE)</p>
          <p ALIGN="JUSTIFY">UINT state; //</font><font SIZE="3">表项的状态</font><font FACE="Times New Roman" SIZE="3">(TVIF_STATE)</p>
          <p ALIGN="JUSTIFY">UINT stateMask; //</font><font SIZE="3">状态的屏蔽组合</font><font FACE="Times New Roman" SIZE="3">(TVIF_STATE)</p>
          <p ALIGN="JUSTIFY">LPSTR pszText; //</font><font SIZE="3">表项的标题正文</font><font FACE="Times New Roman" SIZE="3">(TVIF_TEXT)</p>
          <p ALIGN="JUSTIFY">int cchTextMax; //</font><font SIZE="3">正文缓冲区的大小</font><font FACE="Times New Roman" SIZE="3">(TVIF_TEXT)</p>
          <p ALIGN="JUSTIFY">int iImage; //</font><font SIZE="3">表项的图象索引</font><font FACE="Times New Roman" SIZE="3">(TVIF_IMAGE)</p>
        </blockquote>
        <blockquote>
          <p ALIGN="JUSTIFY">int iSelectedImage; //</font><font SIZE="3">选中的项的图象索引</font><font FACE="Times New Roman" SIZE="3">(TVIF_SELECTEDIMAGE)</p>
          <p ALIGN="JUSTIFY">int cChildren; /*</font><font SIZE="3">表明项是否有子项</font><font FACE="Times New Roman" SIZE="3">(TVIF_CHILDREN)</font><font SIZE="3">，为</font><font FACE="Times New Roman" SIZE="3">1</font><font SIZE="3">则有，为</font><font FACE="Times New Roman" SIZE="3">0</font><font SIZE="3">则没有</font><font FACE="Times New Roman" SIZE="3">*/</p>
        </blockquote>
        <blockquote>
          <p ALIGN="JUSTIFY">LPARAM lParam; //</font><font SIZE="3">一个</font><font FACE="Times New Roman" SIZE="3">32</font><font SIZE="3">位的附加数据</font><font FACE="Times New Roman" SIZE="3">(TVIF_PARAM)</p>
        </blockquote>
        <p ALIGN="JUSTIFY">} TV_ITEM, FAR *LPTV_ITEM;</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">如果要使树形视图的表项显示图象，需要为树形视图建立一个位图序列，这时，</font><font FACE="Times New Roman" SIZE="3">iImage</font><font SIZE="3">说明表项显示的图象在位图序列中的索引，</font><font FACE="Times New Roman" SIZE="3">iSelectedImage</font><font SIZE="3">则说明了选中的表项应显示的图象，在绘制图标时，树形视图可以根据这两个参数提供的索引在位图序列中找到对应的位图．</font><font FACE="Times New Roman" SIZE="3">lParam</font><font SIZE="3">可用来放置与表项相关的数据，这常常是很有用的．</font><font FACE="Times New Roman" SIZE="3">state</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">stateMask</font><font SIZE="3">的常用值在表</font><font FACE="Times New Roman" SIZE="3">6.25</font><font SIZE="3">中列出，其中</font><font FACE="Times New Roman" SIZE="3">stateMask</font><font SIZE="3">用来说明要获取或设置哪些状态．</p>
        </font>
      </blockquote>
    </blockquote>
    <p><b><font SIZE="3">　</p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.25 </font><font SIZE="3">树形视图表项项的常用状态</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="29%"><font SIZE="3"><b><p ALIGN="JUSTIFY">状态</b></font></td>
        <td WIDTH="21%"><font SIZE="3"><b><p ALIGN="JUSTIFY">对应的状态屏蔽</b></font></td>
        <td WIDTH="49%"><font SIZE="3"><b><p ALIGN="JUSTIFY">含义</b></font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVIS_SELECTED</font></td>
        <td WIDTH="21%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项被选中．</font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVIS_EXPANDED</font></td>
        <td WIDTH="21%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项的子项被展开．</font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVIS_EXPANDEDONCE</font></td>
        <td WIDTH="21%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项的子项曾经被展开过．</font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVIS_CUT</font></td>
        <td WIDTH="21%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项被选择用来进行剪切和粘贴操作．</font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVIS_FOCUSED</font></td>
        <td WIDTH="21%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项具有输入焦点．</font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVIS_DROPHILITED</font></td>
        <td WIDTH="21%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项成为拖动操作的目标．</font></td>
      </tr>
    </table>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <blockquote>
      <blockquote>
        <p ALIGN="JUSTIFY">TV_INSERTSTRUCT</font><font SIZE="3">结构．在向树形视图中插入新项时要用到该结构，其定义为</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct 
        _TV_INSERTSTRUCT {</p>
        <p ALIGN="JUSTIFY">HTREEITEM hParent; //</font><font SIZE="3">父项的句柄 </font><font FACE="Times New Roman" SIZE="3"></p>
        <p ALIGN="JUSTIFY">HTREEITEM hInsertAfter; //</font><font SIZE="3">说明应插入到同层中哪一项的后面</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TV_ITEM item; </p>
        <p ALIGN="JUSTIFY">} TV_INSERTSTRUCT;</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">如果</font><font FACE="Times New Roman" SIZE="3">hParent</font><font SIZE="3">的值为</font><font FACE="Times New Roman" SIZE="3">TVI_ROOT</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">NULL</font><font SIZE="3">，那么新项将被插入到树形视图的最高层（根位置）．</font><font FACE="Times New Roman" SIZE="3">hInsertAfter</font><font SIZE="3">的值可以是</font><font FACE="Times New Roman" SIZE="3">TVI_FIRST</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">TVI_LAST</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">TVI_SORT</font><font SIZE="3">，其含义分别是将新项插入到同一层中的开头、最后或排序插入．</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">NM_TREEVIEW</font><font SIZE="3">结构．树形视图的大部分通知消息都会附带指向该结构的指针以提供一些必要的信息．该结构的定义为</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct 
        _NM_TREEVIEW { nmtv </p>
        <p ALIGN="JUSTIFY">NMHDR hdr; //</font><font SIZE="3">标准的</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UINT action; //</font><font SIZE="3">表明是用户的什么行为触发了该通知消息</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TV_ITEM itemOld; //</font><font SIZE="3">旧项的信息</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TV_ITEM itemNew; //</font><font SIZE="3">新项的信息</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">POINT ptDrag; //</font><font SIZE="3">事件发生时鼠标的客户区坐标</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">} NM_TREEVIEW; </p>
        <p ALIGN="JUSTIFY">TV_KEYDOWN</font><font SIZE="3">结构．提供与键盘事件有关的信息．该结构的定义为</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">pedef struct _TV_KEYDOWN { 
        tvkd </p>
        <p ALIGN="JUSTIFY">NMHDR hdr; //</font><font SIZE="3">标准的</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">WORD wVKey; //</font><font SIZE="3">虚拟键盘码</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UINT flags; //</font><font SIZE="3">为</font><font FACE="Times New Roman" SIZE="3">0</p>
        <p ALIGN="JUSTIFY">} TV_KEYDOWN;</p>
        <p ALIGN="JUSTIFY">TV_DISPINFO</font><font SIZE="3">结构．提供与表项的显示有关的信息．该结构的定义为</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct 
        _TV_DISPINFO { tvdi </p>
        <p ALIGN="JUSTIFY">NMHDR hdr; </p>
        <p ALIGN="JUSTIFY">TV_ITEM item; </p>
        <p ALIGN="JUSTIFY">} TV_DISPINFO;</p>
      </blockquote>
    </blockquote>
    <p ALIGN="JUSTIFY">MFC</font><font SIZE="3">的</font><font FACE="Times New Roman" SIZE="3">CTreeCtrl</font><font SIZE="3">类封装了树形视图．该类的</font><font FACE="Times New Roman" SIZE="3">Create</font><font SIZE="3">成员函数负责控件的创建，该函数的声明为</p>
    <blockquote>
      <blockquote>
        <blockquote>
          </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">BOOL Create( DWORD 
          dwStyle, const RECT&amp; rect, CWnd* pParentWnd, UINT nID );</font></p>
        </blockquote>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</p>
    <p ALIGN="JUSTIFY">其中参数</font><font FACE="Times New Roman" SIZE="3">dwStyle</font><font SIZE="3">是如表</font><font FACE="Times New Roman" SIZE="3">6.26</font><font SIZE="3">所示的控件风格的组合．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><b><font SIZE="3">　</p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.26 </font><font SIZE="3">树形视图的风格</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="32%"><font SIZE="3"><b><p ALIGN="JUSTIFY">控件风格</b></font></td>
        <td WIDTH="68%"><font SIZE="3"><b><p ALIGN="JUSTIFY">含义</b></font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVS_HASLINES</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">在父项与子项间连线以清楚地显示结构．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVS_LINESATROOT</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">只在根部画线．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVS_HASBUTTONS</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">显示带有＂</font><font FACE="Times New Roman" SIZE="3">+</font><font SIZE="3">＂或＂</font><font FACE="Times New Roman" SIZE="3">-</font><font SIZE="3">＂的小方框来表示某项能否被展开或已展开．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVS_EDITLABELS</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">用户可以编辑表项的标题．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVS_SHOWSELALWAYS</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">即使控件失去输入焦点，仍显示出项的选择状态．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVS_DISABLEDRAGDROP</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">不支持拖动操作．</font></td>
      </tr>
    </table>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">除上表的风格外，一般还要指定</font><font FACE="Times New Roman" SIZE="3">WS_CHILD</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">WS_VISIBLE</font><font SIZE="3">窗口风格．对于用对话框模板创建的树形视图控件，可以在控件的属性对话框中指定上表中列出的控件风格。例如，在属性对话框中选择</font><font FACE="Times New Roman" SIZE="3">Has buttons</font><font SIZE="3">，相当于指定了</font><font FACE="Times New Roman" SIZE="3">TVS_HASBUTTONS</font><font SIZE="3">风格．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">CTreeCtrl</font><font SIZE="3">类提供了大量的成员函数．对于常用的函数，这里结合实际应用的需要，介绍如下：</p>
    <blockquote>
      <blockquote>
        <p ALIGN="JUSTIFY">向树形视图中插入新的表项．首先应提供一个</font><font FACE="Times New Roman" SIZE="3">TV_INSERTSTRUCT</font><font SIZE="3">结构并在该结构中对插入项进行描述．如果要在树形视图中显示图象，则应该先创建一个</font><font FACE="Times New Roman" SIZE="3">CImageList</font><font SIZE="3">对象并使该对象包含一个位图序列，然后调用</font><font FACE="Times New Roman" SIZE="3">SetImageList</font><font SIZE="3">为树形视图设置位图序列．然后调用</font><font FACE="Times New Roman" SIZE="3">InsertItem</font><font SIZE="3">函数把新项插入到树形视图中．函数的声明为</p>
        <blockquote>
          <blockquote>
            </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CImageList* SetImageList( 
            CImageList * pImageList, int nImageListType );<br>
            </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">pImageList</font><font SIZE="3">指向一个</font><font FACE="Times New Roman" SIZE="3">CImageList</font><font SIZE="3">对象，参数</font><font FACE="Times New Roman" SIZE="3">nImageListType</font><font SIZE="3">一般应为</font><font FACE="Times New Roman" SIZE="3">TVSIL_NORMAL</font><font SIZE="3">．</p>
            </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">HTREEITEM InsertItem( 
            LPTV_INSERTSTRUCT lpInsertStruct );<br>
            </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">lpInsertStruct</font><font SIZE="3">指向一个</font><font FACE="Times New Roman" SIZE="3">TV_INSERTSTRUCT</font><font SIZE="3">结构．函数返回新插入项的句柄．</p>
          </blockquote>
        </blockquote>
        <p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">DeleteItem</font><font SIZE="3">来删除指定项，用</font><font FACE="Times New Roman" SIZE="3">DeleteAllItems</font><font SIZE="3">删除所有项．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">BOOL DeleteItem( HTREEITEM hItem );<br>
        BOOL DeleteAllItems( );<br>
        </font><font SIZE="3">操作成功则函数返回</font><font FACE="Times New Roman" SIZE="3">TRUE</font><font SIZE="3">，否则返回</font><font FACE="Times New Roman" SIZE="3">FALSE</font><font SIZE="3">．</p>
        <p ALIGN="JUSTIFY">树形视图控件会根据用户的输入自动展开或折叠子项．但有时需要在程序中展开或折叠指定项，则应该调用</font><font FACE="Times New Roman" SIZE="3">Expand</font><font SIZE="3">，该函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">BOOL Expand( HTREEITEM hItem, UINT nCode );<br>
        </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">hItem</font><font SIZE="3">指定了要展开或折叠的项．参数</font><font FACE="Times New Roman" SIZE="3">nCode</font><font SIZE="3">是一个标志，指定了函数应执行的操作，它可以是</font><font FACE="Times New Roman" SIZE="3">TVE_COLLAPSE</font><font SIZE="3">（折叠）、</font><font FACE="Times New Roman" SIZE="3">TVE_COLLAPSERESET(</font><font SIZE="3">折叠并移走所有的子项）、</font><font FACE="Times New Roman" SIZE="3">TVE_EXPAND</font><font SIZE="3">（展开）或</font><font FACE="Times New Roman" SIZE="3">TVE_TOGGLE</font><font SIZE="3">（在展开和折叠状态之间翻转）．</p>
        <p ALIGN="JUSTIFY">要查询或设置选择项，应调用</font><font FACE="Times New Roman" SIZE="3">GetSelectedItem</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">SelectItem</font><font SIZE="3">．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">HTREEITEM GetSelectedItem( );<br>
        BOOL SelectItem( HTREEITEM hItem );</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">要对指定的项查询或设置，可调用</font><font FACE="Times New Roman" SIZE="3">GetItem</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetItem</font><font SIZE="3">．用这两个功能强大的函数，几乎可以查询和设置项的所有属性，包括表项的正文、图像及选择状态．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">BOOL GetItem( TV_ITEM* pItem );<br>
        BOOL SetItem( TV_ITEM* pItem );<br>
        </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">pItem</font><font SIZE="3">是指向</font><font FACE="Times New Roman" SIZE="3">TV_ITEM</font><font SIZE="3">结构的指针，函数是通过该结构来查询或设置指定项的，在调用函数前应该使该结构的</font><font FACE="Times New Roman" SIZE="3">hItem</font><font SIZE="3">成员有效以指定表项．</font><font FACE="Times New Roman" SIZE="3">CTreeCtrl</font><font SIZE="3">还提供了一系列函数可完成</font><font FACE="Times New Roman" SIZE="3">GetItem</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetItem</font><font SIZE="3">的部分功能，其中</font><font FACE="Times New Roman" SIZE="3">GetItemState</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetItemText</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetItemData</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetItemImage</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">ItemHasChildren</font><font SIZE="3">函数用于查询，</font><font FACE="Times New Roman" SIZE="3">SetItemState</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">SetItemText</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">SetItemData</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetItemImage</font><font SIZE="3">函数用于设置．</p>
        <p ALIGN="JUSTIFY">在使用树形视图控件时，一个经常遇到的问题是对于一个已知表项，如何找到与该项有某种关系的项，例如，父项、子项、兄弟项、下一个或前一个可见的项．利用功能强大的</font><font FACE="Times New Roman" SIZE="3">GetNextItem</font><font SIZE="3">函数，可以解决这个问题．该函数也可以用来搜索具有某种状态的表项．</font><font FACE="Times New Roman" SIZE="3">GetNextItem</font><font SIZE="3">在遍历树形视图时是很有用的，它的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">HTREEITEM GetNextItem( HTREEITEM hItem, UINT 
        nCode );<br>
        </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">hItem</font><font SIZE="3">指定了一个项．参数</font><font FACE="Times New Roman" SIZE="3">nCode</font><font SIZE="3">是一个标志，标明了与指定项的关系，</font><font FACE="Times New Roman" SIZE="3">nCode</font><font SIZE="3">可以是如表</font><font FACE="Times New Roman" SIZE="3">6.27</font><font SIZE="3">所示的各种标志．如果找到相关的项，函数返回该项的句柄，否则函数返回</font><font FACE="Times New Roman" SIZE="3">NULL</font><font SIZE="3">．</p>
        </font>
      </blockquote>
    </blockquote>
    <p><b><font SIZE="3">　</p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.27 </font><font SIZE="3">关系标志</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="47%"><font SIZE="3"><p ALIGN="JUSTIFY">标志</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">含义</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_CARET</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回当前的选择项．</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_CHILD</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回指定表项的子项．</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_DROPHILITE</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回拖动操作的目标项．</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_FIRSTVISIBLE</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回第一个可见项．</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_NEXT</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回指定项的下一个兄弟项</font><font FACE="Times New Roman" SIZE="3">(Sibling Item)</font><font SIZE="3">．</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_NEXTVISIBLE</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回指定项的后一个可见项．</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_PARENT</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回指定项的父项．</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_PREVIOUS</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回指定项的前一个兄弟项．</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_PREVIOUSVISIBLE</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回指定项的前一个可见项．</font></td>
      </tr>
      <tr>
        <td WIDTH="47%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVGN_ROOT</font></td>
        <td WIDTH="53%"><font SIZE="3"><p ALIGN="JUSTIFY">返回位于最高层（根位置）的第一个表项．</font></td>
      </tr>
    </table>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <blockquote>
      <blockquote>
        <p ALIGN="JUSTIFY">CTreeCtrl</font><font SIZE="3">类提供了一系列的成员函数来完成</font><font FACE="Times New Roman" SIZE="3">GetNextItem</font><font SIZE="3">的某一项功能，包括</font><font FACE="Times New Roman" SIZE="3">GetRootItem</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetFirstVisibleItem</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetNextVisibleItem</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetPrevVisibleItem</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetChildItem</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetNextSiblingItem</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetPrevSiblingItem</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetParentItem</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetSelectedItem</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">GetDropHilightItem</font><font SIZE="3">．</font></p>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">除了表</font><font FACE="Times New Roman" SIZE="3">6.22</font><font SIZE="3">列出的控件消息外，树形视图控件还会发送自己特有的通知消息，其中常用的有下面这几个：</p>
    <blockquote>
      <blockquote>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVN_SELCHANGING</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">TVN_SELCHANGED</font><font SIZE="3">．在用户改变了对表项的选择时，控件会发送这两个消息．消息会附带一个指向</font><font FACE="Times New Roman" SIZE="3">NM_TREEVIEW</font><font SIZE="3">结构的指针，程序可从该结构中获得必要的信息．两个消息都会在该结构的</font><font FACE="Times New Roman" SIZE="3">itemOld</font><font SIZE="3">成员中包含原来的选择项的信息，在</font><font FACE="Times New Roman" SIZE="3">itemNew</font><font SIZE="3">成员中包含新选择项的信息，在</font><font FACE="Times New Roman" SIZE="3">action</font><font SIZE="3">成员中表明是用户的什么行为触发了该通知消息</font><font FACE="Times New Roman" SIZE="3">(</font><font SIZE="3">若是</font><font FACE="Times New Roman" SIZE="3">TVC_BYKEYBOARD</font><font SIZE="3">则表明是键盘，若是</font><font FACE="Times New Roman" SIZE="3">TVC_BYMOUSE</font><font SIZE="3">则表明是鼠标，若是</font><font FACE="Times New Roman" SIZE="3">TVC_UNKNOWN</font><font SIZE="3">则表示未知）．两个消息的不同之处在于，如果</font><font FACE="Times New Roman" SIZE="3">TVN_SELCHANGING</font><font SIZE="3">的消息处理函数返回</font><font FACE="Times New Roman" SIZE="3">TRUE</font><font SIZE="3">，那么就阻止选择的改变，如果返回</font><font FACE="Times New Roman" SIZE="3">FALSE</font><font SIZE="3">，则允许改变．</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVN_KEYDOWN</font><font SIZE="3">．该消息表明了一个键盘事件．消息会附带一个指向</font><font FACE="Times New Roman" SIZE="3">TV_KEYDOWN</font><font SIZE="3">结构的指针，通过该结构程序可以获得按键的信息．</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">TVN_BEGINLABELEDIT</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">TVN_ENDLABELEDIT</font><font SIZE="3">．分别在用户开始编辑和结束编辑项的标题时发送．消息会附带一个指向</font><font FACE="Times New Roman" SIZE="3">TV_DISPINFO</font><font SIZE="3">结构的指针，程序可从该结构中获得必要的信息．在前者的消息处理函数中，可以调用</font><font FACE="Times New Roman" SIZE="3">GetEditControl</font><font SIZE="3">成员函数返回一个指向用于编辑标题的编辑框的指针，如果处理函数返回</font><font FACE="Times New Roman" SIZE="3">FALSE</font><font SIZE="3">，则允许编辑，如果返回</font><font FACE="Times New Roman" SIZE="3">TRUE</font><font SIZE="3">，则禁止编辑．在后者的消息处理函数中，</font><font FACE="Times New Roman" SIZE="3">TV_DISPINFO</font><font SIZE="3">结构中的</font><font FACE="Times New Roman" SIZE="3">item.pszText</font><font SIZE="3">指向编辑后的新标题，如果</font><font FACE="Times New Roman" SIZE="3">pszText</font><font SIZE="3">为</font><font FACE="Times New Roman" SIZE="3">NULL</font><font SIZE="3">，那么说明用户放弃了编辑，否则，程序应负责更新项的标题，这可以由</font><font FACE="Times New Roman" SIZE="3">SetItem</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">SetItemText</font><font SIZE="3">函数来完成．</font></p>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">树形视图控件还可以支持拖放操作，限于篇幅，这里就不作介绍了．</font><font FACE="Times New Roman" SIZE="3"></p>
    <b><p ALIGN="JUSTIFY"></b></font><font color="#3973DE" FACE="Times New Roman" SIZE="3">6.2.6 
    </font><font SIZE="3" color="#3973DE">列表视图控件</font><font SIZE="3"></p>
    <p ALIGN="JUSTIFY">　　列表视图</font><font FACE="Times New Roman" SIZE="3">(List 
    View)</font><font SIZE="3">用来成列地显示数据．在</font><font FACE="Times New Roman" SIZE="3">Windows 95</font><font SIZE="3">的资源管理器的右侧窗口中就有一个典型的列表视图，如图</font><font FACE="Times New Roman" SIZE="3">6.5</font><font SIZE="3">所示．列表视图的表项通常包括图标</font><font FACE="Times New Roman" SIZE="3">(Icon)</font><font SIZE="3">和标题</font><font FACE="Times New Roman" SIZE="3">(Label)</font><font SIZE="3">两部分，它们分别提供了对数据的形象和抽象描述．列表视图控件是对传统的列表框的重大改进，它能够以下列四种格式显示数据．读者可以在资源管理器中的视图</font><font FACE="Times New Roman" SIZE="3">(View)</font><font SIZE="3">菜单中切换列表视图的显示格式，来看看四种格式的不同之处．</p>
    <blockquote>
      <ul>
        <li><p ALIGN="JUSTIFY">大图标格式<font FACE="Times New Roman" SIZE="3">(Large Icons)</font>．可逐行显示多列表项，图标的大小可由应用程序指定，通常是<font FACE="Times New Roman" SIZE="3">32</font>×<font FACE="Times New Roman" SIZE="3">32</font>像素，在图标的下面显示标题．</p>
        </li>
        <li><p ALIGN="JUSTIFY">小图标格式<font FACE="Times New Roman" SIZE="3">(Small Icons)</font>．可逐行显示多列表项，图标的大小可由应用程序指定，通常是<font FACE="Times New Roman" SIZE="3">16</font>×<font FACE="Times New Roman" SIZE="3">16</font>像素，在图标的右面显示标题．表项以行的方式组织．</p>
        </li>
        <li><p ALIGN="JUSTIFY">列表格式<font FACE="Times New Roman" SIZE="3">(List)</font>．与小图标格式类似．不同之处在于表项是逐列多列显示的．</p>
        </li>
        <li><p ALIGN="JUSTIFY">报告格式<font FACE="Times New Roman" SIZE="3">(Report</font>或<font FACE="Times New Roman" SIZE="3">Details)</font>．每行仅显示一个表项，在标题的左边显示一个图标，表项可以不显示图标而只显示标题．表项的右边可以附加若干列子项<font FACE="Times New Roman" SIZE="3">(Subitem)</font>，子项只显示正文．在控件的顶端还可以显示一个列表头用来说明各列的类型．列表视图的报告格式很适合显示报表（如数据库报表）．</p>
        </li>
      </ul>
      </font>
    </blockquote>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">在讨论如何使用列表视图控件以前，显向读者介绍一下与该控件有关的一些数据类型：</p>
    <blockquote>
      <blockquote>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LV_COLUMN</font><font SIZE="3">结构．该结构仅用于报告式列表视图，用来描述表项的某一列．要想向表项中插入新的一列，需要用到该结构．</font><font FACE="Times New Roman" SIZE="3">LV_COLUMN</font><font SIZE="3">结构的定义为</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct _LV_COLUMN 
        { </p>
        <p ALIGN="JUSTIFY">UINT mask; //</font><font SIZE="3"><font SIZE="3">屏蔽位的组合（见下面括号），表明哪些成员是有效的．</font><font FACE="Times New Roman" SIZE="3"></p>
        <p ALIGN="JUSTIFY">int fmt; /*</font><font SIZE="3">该列的表头和子项的标题显示格式</font><font FACE="Times New Roman" SIZE="3">(LVCF_FMT)</font><font SIZE="3">．可以是</font><font FACE="Times New Roman" SIZE="3">LVCFMT_CENTER</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">LVCFMT_LEFT</font><font SIZE="3">或</font></font><font FACE="Times New Roman" SIZE="3">LVCFMT_RIGHT*/</p>
        <p ALIGN="JUSTIFY">int cx; //</font><font SIZE="3">以像素为单位的列的宽度</font><font FACE="Times New Roman" SIZE="3">(LVCF_FMT)</p>
        <p ALIGN="JUSTIFY">LPTSTR pszText; //</font><font SIZE="3">指向存放列表头标题正文的缓冲区</font><font FACE="Times New Roman" SIZE="3">(LVCF_TEXT)</p>
        <p ALIGN="JUSTIFY">int cchTextMax; //</font><font SIZE="3">标题正文缓冲区的长度</font><font FACE="Times New Roman" SIZE="3">(LVCF_TEXT)</p>
        <p ALIGN="JUSTIFY">int iSubItem; //</font><font SIZE="3">说明该列的索引</font><font FACE="Times New Roman" SIZE="3">(LVCF_SUBITEM)</p>
        <p ALIGN="JUSTIFY">} LV_COLUMN;</p>
        <p ALIGN="JUSTIFY">LV_ITEM</font><font SIZE="3">结构．该结构用来描述一个表项或子项，它包含了项的各种属性，其定义为</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct _LV_ITEM { </p>
        <p ALIGN="JUSTIFY">UINT mask; //</font><font SIZE="3">屏蔽位的组合（见下面括号），表明哪些成员是有效的</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">int iItem; //</font><font SIZE="3">从</font><font FACE="Times New Roman" SIZE="3">0</font><font SIZE="3">开始编号的表项索引（行索引）</p>
        <font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">int iSubItem; /*</font>从<font FACE="Times New Roman" SIZE="3">1</font>开始编号的子项索引（列索引），若值为<font FACE="Times New Roman" SIZE="3">0</font>则说明该成员无效，结构描述的是一个表项而不是子项</font><font FACE="Times New Roman" SIZE="3">*/</p>
        <p ALIGN="JUSTIFY">UINT state; //</font><font SIZE="3">项的状态</font><font FACE="Times New Roman" SIZE="3">(LVIF_STATE)</p>
        <p ALIGN="JUSTIFY">UINT stateMask; //</font><font SIZE="3">项的状态屏蔽</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LPTSTR pszText; //</font><font SIZE="3">指向存放项的正文的缓冲区</font><font FACE="Times New Roman" SIZE="3">(LVIF_TEXT)</p>
        <p ALIGN="JUSTIFY">int cchTextMax; //</font><font SIZE="3">正文缓冲区的长度</font><font FACE="Times New Roman" SIZE="3">(LVIF_TEXT)</p>
        <p ALIGN="JUSTIFY">int iImage; //</font><font SIZE="3">图标的索引</font><font FACE="Times New Roman" SIZE="3">(LVIF_IMAGE)</p>
        <p ALIGN="JUSTIFY">LPARAM lParam; // 32</font><font SIZE="3">位的附加数据</font><font FACE="Times New Roman" SIZE="3">(LVIF_PARAM)</p>
        <p ALIGN="JUSTIFY">} LV_ITEM;</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">其中</font><font FACE="Times New Roman" SIZE="3">lParam</font><font SIZE="3">成员可用来存储与项相关的数据，这在有些情况下是很有用的．</font><font FACE="Times New Roman" SIZE="3">state</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">stateMask</font><font SIZE="3">的值如表</font><font FACE="Times New Roman" SIZE="3">6.28</font><font SIZE="3">所示，</font><font FACE="Times New Roman" SIZE="3">stateMask</font><font SIZE="3">用来说明要获取或设置哪些状态．</p>
      </blockquote>
    </blockquote>
    <p><b>　</p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.28 </font><font SIZE="3">列表视图的状态</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="29%"><font SIZE="3"><b><p ALIGN="JUSTIFY">状态</b></font></td>
        <td WIDTH="22%"><font SIZE="3"><b><p ALIGN="JUSTIFY">对应的状态屏蔽</b></font></td>
        <td WIDTH="49%"><font SIZE="3"><b><p ALIGN="JUSTIFY">含义</b></font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVIS_CUT</font></td>
        <td WIDTH="22%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项被选择用来进行剪切和粘贴操作．</font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVIS_DROPHILITED</font></td>
        <td WIDTH="22%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项成为拖动操作的目标．</font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVIS_FOCUSED</font></td>
        <td WIDTH="22%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项具有输入焦点．</font></td>
      </tr>
      <tr>
        <td WIDTH="29%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVIS_SELECTED</font></td>
        <td WIDTH="22%"><font SIZE="3"><p ALIGN="JUSTIFY">同左</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">项被选中．</font></td>
      </tr>
    </table>
    <font FACE="Times New Roman" SIZE="3"><blockquote>
      <blockquote>
        <p ALIGN="JUSTIFY">NM_LISTVIEW</font><font SIZE="3">结构．该结构用于存储列表视图的通知消息的有关信息，大部分列表视图的通知消息都会附带指向该结构的指针．</font><font FACE="Times New Roman" SIZE="3">NM_LISTVIEW</font><font SIZE="3">的定义为</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct 
        tagNM_LISTVIEW { </p>
        <p ALIGN="JUSTIFY">NMHDR hdr; //</font><font SIZE="3">标准的</font><font FACE="Times New Roman" SIZE="3">NMHDR</font><font SIZE="3">结构</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">int iItem; //</font><font SIZE="3">表项的索引，若为</font><font FACE="Times New Roman" SIZE="3">-1</font><font SIZE="3">则无效</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">int iSubItem; //</font><font SIZE="3">子项的索引，若为</font><font FACE="Times New Roman" SIZE="3">0</font><font SIZE="3">则无效</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UINT uNewState; //</font><font SIZE="3">项的新状态</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UINT uOldState; //</font><font SIZE="3">项原来的状态</p>
        <font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UINT uChanged; /*</font>取值与<font FACE="Times New Roman" SIZE="3">LV_ITEM</font>的<font FACE="Times New Roman" SIZE="3">mask</font>成员相同，用来表明哪些状态发生了变化</font><font FACE="Times New Roman" SIZE="3">*/</p>
        <p ALIGN="JUSTIFY">POINT ptAction; //</font><font SIZE="3">事件发生时鼠标的客户区坐标</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LPARAM lParam; //32</font><font SIZE="3">位的附加数据</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">} NM_LISTVIEW;</p>
        <p ALIGN="JUSTIFY">LV_DISPINFO</font><font SIZE="3">结构．该结构包含了与项的显示有关的信息，其定义为</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct 
        tagLV_DISPINFO { </p>
        <p ALIGN="JUSTIFY">NMHDR hdr; </p>
        <p ALIGN="JUSTIFY">LV_ITEM item; </p>
        <p ALIGN="JUSTIFY">} LV_DISPINFO;</p>
        <p ALIGN="JUSTIFY">LV_KEYDOWN</font><font SIZE="3">结构．该结构包含一些与键盘有关的信息，其定义为</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">typedef struct 
        tagLV_KEYDOWN { </p>
        <p ALIGN="JUSTIFY">NMHDR hdr; </p>
        <p ALIGN="JUSTIFY">WORD wVKey; //</font><font SIZE="3">虚拟键盘码</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">UINT flags; //</font><font SIZE="3">总为</font><font FACE="Times New Roman" SIZE="3">0</p>
        <p ALIGN="JUSTIFY">} LV_KEYDOWN;</p>
      </blockquote>
    </blockquote>
    <p ALIGN="JUSTIFY">MFC</font><font SIZE="3">的</font><font FACE="Times New Roman" SIZE="3">CListCtrl</font><font SIZE="3">类封装了列表视图控件．该类的</font><font FACE="Times New Roman" SIZE="3">Create</font><font SIZE="3">函数负责创建控件，函数的声明为</p>
    <blockquote>
      <blockquote>
        <blockquote>
          </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">BOOL Create( DWORD 
          dwStyle, const RECT&amp; rect, CWnd* pParentWnd, UINT nID );</font></p>
        </blockquote>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</p>
    <p ALIGN="JUSTIFY">其中参数</font><font FACE="Times New Roman" SIZE="3">dwStyle</font><font SIZE="3">是如表</font><font FACE="Times New Roman" SIZE="3">6.29</font><font SIZE="3">所示的控件风格的组合．<br>
    <b></p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.29 </font><font SIZE="3">列表视图的风格</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="32%"><font SIZE="3"><b><p ALIGN="JUSTIFY">控件风格</b></font></td>
        <td WIDTH="68%"><font SIZE="3"><b><p ALIGN="JUSTIFY">含义</b></font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_ALIGNLEFT</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">当显示格式是大图标或小图标时，标题放在图标的左边．缺省情况下标题放在图标的下面．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_ALIGNTOP</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">当显示格式是大图标或小图标时，标题放在图标的上边．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_AUTOARRANGE</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">当显示格式是大图标或小图标时，自动排列控件中的表项．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_EDITLABELS</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">用户可以修改标题．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_ICON</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">指定大图标显示格式．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_LIST</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">指定列表显示格式．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_NOCOLUMNHEADER</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">在报告格式中不显示列的表头．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_NOLABELWRAP</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">当显示格式是大图标时，使标题单行显示．缺省时是多行显示．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_NOSCROLL</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">列表视图无滚动条．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_NOSORTHEADER</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">报告列表视图的表头不能作为排序按钮使用．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_OWNERDRAWFIXED</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">由控件的拥有者负责绘制表项．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_REPORT</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">指定报告显示格式．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_SHAREIMAGELISTS</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">使列表视图共享图像序列．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_SHOWSELALWAYS</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">即使控件失去输入焦点，仍显示出项的选择状态．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_SINGLESEL</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">指定一个单选择列表视图．缺省时可以多项选择．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_SMALLICON</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">指定小图标显示格式．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_SORTASCENDING</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">按升序排列表项．</font></td>
      </tr>
      <tr>
        <td WIDTH="32%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVS_SORTDESCENDING</font></td>
        <td WIDTH="68%"><font SIZE="3"><p ALIGN="JUSTIFY">按降序排列表项．</font></td>
      </tr>
    </table>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3"><br>
    除上表的风格外，一般还要指定</font><font FACE="Times New Roman" SIZE="3">WS_CHILD</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">WS_VISIBLE</font><font SIZE="3">窗口风格．风格组合</font><font FACE="Times New Roman" SIZE="3">WS_CHILD| 
    WS_VISIBLE|LVS_REPORT|LVS_AUTOARRANGE|LVS_EDITLABLES|LVS_SINGLESEL</font><font SIZE="3">将指定一个自动排列的、可编辑标题的、单选择报告式列表视图控件．要指定大图标、小图标或列表式的列表视图控件，则应该把</font><font FACE="Times New Roman" SIZE="3">LVS_REPORT</font><font SIZE="3">换成</font><font FACE="Times New Roman" SIZE="3">LVS_ICON</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">LVS_SMALLICON</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">LVS_LIST</font><font SIZE="3">．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">对于用对话框模板创建的列表视图控件，可以在控件的属性对话框中指定上表中列出的控件风格。例如，在属性对话框的</font><font FACE="Times New Roman" SIZE="3">Styles</font><font SIZE="3">页的</font><font FACE="Times New Roman" SIZE="3">View</font><font SIZE="3">栏中选择</font><font FACE="Times New Roman" SIZE="3">Icon</font><font SIZE="3">，相当于指定了</font><font FACE="Times New Roman" SIZE="3">LVS_ICON</font><font SIZE="3">风格．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">CListCtrl</font><font SIZE="3">类提供了大量的成员函数．在这里，我们结合实际应用来介绍一些常用的函数：</p>
    <blockquote>
      <blockquote>
        <p ALIGN="JUSTIFY">列的插入和删除．在以报告格式显示列表视图时，一般会显示一列表项和多列子项．在初始化列表视图时，先要调用</font><font FACE="Times New Roman" SIZE="3">InsertColumn</font><font SIZE="3">插入各个列，该函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">int InsertColumn( int nCol, const LV_COLUMN* 
        pColumn );<br>
        </font><font SIZE="3">其中参数</font><font FACE="Times New Roman" SIZE="3">nCol</font><font SIZE="3">是新列的索引，参数</font><font FACE="Times New Roman" SIZE="3">pColumn</font><font SIZE="3">指向一个</font><font FACE="Times New Roman" SIZE="3">LV_COLUMN</font><font SIZE="3">结构，函数根据该结构来创建新的列．若插入成功，函数返回新列的索引，否则返回</font><font FACE="Times New Roman" SIZE="3">-1</font><font SIZE="3">．<br>
        要删除某列，应调用</font><font FACE="Times New Roman" SIZE="3">DeleteColumn</font><font SIZE="3">函数，其声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">BOOL DeleteColumn( int nCol );</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">表项的插入．要插入新的表项，应调用</font><font FACE="Times New Roman" SIZE="3">InsertItem</font><font SIZE="3">．如果要显示图标，则应该先创建一个</font><font FACE="Times New Roman" SIZE="3">CImageList</font><font SIZE="3">对象并使该对象包含用作显示图标的位图序列．然后调用</font><font FACE="Times New Roman" SIZE="3">SetImageList</font><font SIZE="3">来为列表视图设置位图序列．函数的声明为</p>
        <blockquote>
          <blockquote>
            </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">int InsertItem( const 
            LV_ITEM* pItem );<br>
            </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">pItem</font><font SIZE="3">指向一个</font><font FACE="Times New Roman" SIZE="3">LV_ITEM</font><font SIZE="3">结构，该结构提供了对表项的描述．若插入成功则函数返回新表项的索引，否则返回</font><font FACE="Times New Roman" SIZE="3">-1</font><font SIZE="3">．</p>
            </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CImageList* SetImageList( 
            CImageList* pImageList, int nImageList );<br>
            </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">pImageList</font><font SIZE="3">指向一个</font><font FACE="Times New Roman" SIZE="3">CImageList</font><font SIZE="3">对象，参数</font><font FACE="Times New Roman" SIZE="3">nImageList</font><font SIZE="3">用来指定图标的类型，若其值为</font><font FACE="Times New Roman" SIZE="3">LVSIL_NORMAL</font><font SIZE="3">，则位图序列用作显示大图标，若值为</font><font FACE="Times New Roman" SIZE="3">LVSIL_SMALL</font><font SIZE="3">，则位图序列用作显示小图标．可用该函数同时指定一套大图标和一套小图标．</p>
          </blockquote>
        </blockquote>
        <p ALIGN="JUSTIFY">要删除某表项，应调用</font><font FACE="Times New Roman" SIZE="3">DeleteItem</font><font SIZE="3">，要删除所有的项，应调用</font><font FACE="Times New Roman" SIZE="3">DeleteAllItems</font><font SIZE="3">．一旦表项被删除，其子项也被删除．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">BOOL DeleteItem( int nItem );<br>
        BOOL DeleteAllItems( );</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">调用</font><font FACE="Times New Roman" SIZE="3">GetItemText</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetItemText</font><font SIZE="3">来查询和设置表项及子项显示的正文．</font><font FACE="Times New Roman" SIZE="3">SetItemText</font><font SIZE="3">的一个重要用途是对子项进行初始化．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">int GetItemText( int nItem, int nSubItem, 
        LPTSTR lpszText, int nLen ) const;<br>
        CString GetItemText( int nItem, int nSubItem ) const;<br>
        BOOL SetItemText( int nItem, int nSubItem, LPTSTR lpszText );<br>
        </font><font SIZE="3">其中参数</font><font FACE="Times New Roman" SIZE="3">nItem</font><font SIZE="3">是表项的索引（行索引），</font><font FACE="Times New Roman" SIZE="3">nSubItem</font><font SIZE="3">是子项的索引（列索引），若</font><font FACE="Times New Roman" SIZE="3">nSubItem</font><font SIZE="3">为</font><font FACE="Times New Roman" SIZE="3">0</font><font SIZE="3">则说明函数是针对表项的．参数</font><font FACE="Times New Roman" SIZE="3">lpszText</font><font SIZE="3">指向正文缓冲区，参数</font><font FACE="Times New Roman" SIZE="3">nLen</font><font SIZE="3">说明了缓冲区的大小．第二个版本的</font><font FACE="Times New Roman" SIZE="3">GetItemText</font><font SIZE="3">返回一个含有项的正文的</font><font FACE="Times New Roman" SIZE="3">Cstring</font><font SIZE="3">对象．</p>
        <p ALIGN="JUSTIFY">调用</font><font FACE="Times New Roman" SIZE="3">GetItem</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetItem</font><font SIZE="3">来查询和设置．用这两个功能强大的函数，几乎可以查询和设置指定项的所有属性，包括正文、图标及选择状态．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">BOOL GetItem( LV_ITEM* pItem ) const;<br>
        BOOL SetItem( const LV_ITEM* pItem );<br>
        </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">pItem</font><font SIZE="3">是指向</font><font FACE="Times New Roman" SIZE="3">LV_ITEM</font><font SIZE="3">结构的指针，函数是通过该结构来查询或设置指定项的，在调用函数前应该使该结构的</font><font FACE="Times New Roman" SIZE="3">iItem</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">iSubItem</font><font SIZE="3">成员有效以指定表项或子项．</font><font FACE="Times New Roman" SIZE="3">CListCtrl</font><font SIZE="3">还提供了一系列函数可完成</font><font FACE="Times New Roman" SIZE="3">GetItem</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetItem</font><font SIZE="3">的部分功能，其中</font><font FACE="Times New Roman" SIZE="3">GetItemState</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">GetItemText</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">GetItemData</font><font SIZE="3">函数用于查询，</font><font FACE="Times New Roman" SIZE="3">SetItemState</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">SetItemText</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">SetItemData</font><font SIZE="3">函数用于设置．</p>
        <p ALIGN="JUSTIFY">要查询表项的数目，应该调用</font><font FACE="Times New Roman" SIZE="3">GetItemCount</font><font SIZE="3">，其声明为 </font><font FACE="Times New Roman" SIZE="3">int GetItemCount( );</p>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">要寻找与指定表项项相关的表项，或寻找具有某种状态的表项，应该调用</font><font FACE="Times New Roman" SIZE="3">GetNextItem</font><font SIZE="3">．该函数的一个重要用处是搜索被选择的表项．函数的声明为<br>
        </font><font FACE="Times New Roman" SIZE="3">int GetNextItem( int nItem, int nFlags ) 
        const;<br>
        </font><font SIZE="3">参数</font><font FACE="Times New Roman" SIZE="3">nItem</font><font SIZE="3">是指定项的索引，参数</font><font FACE="Times New Roman" SIZE="3">nFlags</font><font SIZE="3">是如表</font><font FACE="Times New Roman" SIZE="3">6.30</font><font SIZE="3">所示的标志，用来指定查询的关系．函数返回搜索到的表项的索引，若未找到则返回</font><font FACE="Times New Roman" SIZE="3">-1</font><font SIZE="3">．</p>
        </font><font FACE="Times New Roman" SIZE="3"><blockquote>
          <blockquote>
            </font><b><font SIZE="3"><p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.30 
            </font><font SIZE="3">关系标志</font></b></p>
          </blockquote>
        </blockquote>
      </blockquote>
    </blockquote>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="38%"><font SIZE="3"><p ALIGN="JUSTIFY">标志</font></td>
        <td WIDTH="62%"><font SIZE="3"><p ALIGN="JUSTIFY">含义</font></td>
      </tr>
      <tr>
        <td WIDTH="38%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVNI_ABOVE</font></td>
        <td WIDTH="62%"><font SIZE="3"><p ALIGN="JUSTIFY">返回位于指定表项上方的表项．</font></td>
      </tr>
      <tr>
        <td WIDTH="38%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVNI_ALL</font></td>
        <td WIDTH="62%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省标志，返回指定表项的下一个表项（以索引为序）．</font></td>
      </tr>
      <tr>
        <td WIDTH="38%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVNI_BELOW</font></td>
        <td WIDTH="62%"><font SIZE="3"><p ALIGN="JUSTIFY">返回位于指定表项下方的表项．</font></td>
      </tr>
      <tr>
        <td WIDTH="38%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVNI_TOLEFT</font></td>
        <td WIDTH="62%"><font SIZE="3"><p ALIGN="JUSTIFY">返回位于指定表项左边的表项．</font></td>
      </tr>
      <tr>
        <td WIDTH="38%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVNI_TORIGHT</font></td>
        <td WIDTH="62%"><font SIZE="3"><p ALIGN="JUSTIFY">返回位于指定表项右边的表项．</font></td>
      </tr>
      <tr>
        <td WIDTH="38%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVNI_DROPHILITED</font></td>
        <td WIDTH="62%"><font SIZE="3"><p ALIGN="JUSTIFY">返回拖动操作的目标表项．</font></td>
      </tr>
      <tr>
        <td WIDTH="38%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVNI_FOCUSED</font></td>
        <td WIDTH="62%"><font SIZE="3"><p ALIGN="JUSTIFY">返回具有输入焦点的表项．</font></td>
      </tr>
      <tr>
        <td WIDTH="38%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVNI_SELECTED</font></td>
        <td WIDTH="62%"><font SIZE="3"><p ALIGN="JUSTIFY">返回被选择的表项．</font></td>
      </tr>
    </table>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <blockquote>
      <blockquote>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">要对表项进行排列、排序和搜索，可分别调用</font><font FACE="Times New Roman" SIZE="3">Arrange</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">SortItems</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">FindItems</font><font SIZE="3">函数来完成．</p>
        <p ALIGN="JUSTIFY">有时需要在列表视图创建后动态地改变其显示格式，例如，资源管理器中的列表视图就可以在四中显示格式之间切换．改变显示格式其实就是改变列表视图的风格，要改变控件的风格，应先调用</font><font FACE="Times New Roman" SIZE="3">::GetWindowLong</font><font SIZE="3">获取控件原来的风格，并对其进行修改，然后调用</font><font FACE="Times New Roman" SIZE="3">::SetWindowLong</font><font SIZE="3">设置新的风格．这两个函数不是成员函数，而是</font><font FACE="Times New Roman" SIZE="3">Windows API</font><font SIZE="3">函数，用来查询和设置窗口的风格．</font></p>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">除了表</font><font FACE="Times New Roman" SIZE="3">6.22</font><font SIZE="3">列出的控件消息外，列表视图控件还会发送自己特有的通知消息，其中常用的有下面这几个：</p>
    <blockquote>
      <blockquote>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVN_ITEMCHANGING</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">LVN_ITEMCHANGED</font><font SIZE="3">．当列表视图的状态发生变化时，会发送这两个通知消息．例如，当用户选择了新的表项时，程序就会收到这两个消息．消息会附带一个指向</font><font FACE="Times New Roman" SIZE="3">NM_LISTVIEW</font><font SIZE="3">结构的指针，消息处理函数可从该结构中获得状态信息．两个消息的不同之处在于，前者的消息处理函数如果返回</font><font FACE="Times New Roman" SIZE="3">TRUE</font><font SIZE="3">，那么就阻止选择的改变，如果返回</font><font FACE="Times New Roman" SIZE="3">FALSE</font><font SIZE="3">，则允许改变．</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVN_KEYDOWN</font><font SIZE="3">．该消息表明了一个键盘事件．消息会附带一个指向</font><font FACE="Times New Roman" SIZE="3">LV_KEYDOWN</font><font SIZE="3">结构的指针，通过该结构程序可以获得按键的信息．</p>
        </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">LVN_BEGINLABELEDIT</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">LVN_ENDLABELEDIT</font><font SIZE="3">．分别在用户开始编辑和结束编辑标题时发送．消息会附带一个指向</font><font FACE="Times New Roman" SIZE="3">LV_DISPINFO</font><font SIZE="3">结构的指针．在前者的消息处理函数中，可以调用</font><font FACE="Times New Roman" SIZE="3">GetEditControl</font><font SIZE="3">成员函数返回一个指向用于编辑标题的编辑框的指针，如果处理函数返回</font><font FACE="Times New Roman" SIZE="3">FALSE</font><font SIZE="3">，则允许编辑，如果返回</font><font FACE="Times New Roman" SIZE="3">TRUE</font><font SIZE="3">，则禁止编辑．在后者的消息处理函数中，</font><font FACE="Times New Roman" SIZE="3">LV_DISPINFO</font><font SIZE="3">结构中的</font><font FACE="Times New Roman" SIZE="3">item.pszText</font><font SIZE="3">指向编辑后的新标题，如果</font><font FACE="Times New Roman" SIZE="3">pszText</font><font SIZE="3">为</font><font FACE="Times New Roman" SIZE="3">NULL</font><font SIZE="3">，那么说明用户放弃了编辑，否则，程序应负责更新表项的标题，这可以由</font><font FACE="Times New Roman" SIZE="3">SetItem</font><font SIZE="3">或</font><font FACE="Times New Roman" SIZE="3">SetItemText</font><font SIZE="3">函数来完成．</font></p>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">列表视图控件还可以支持拖放操作，这里就不详细介绍了．</font><font FACE="Times New Roman" SIZE="3"></p>
    <b><p ALIGN="JUSTIFY">6.2.7 </font><font SIZE="3">测试新型</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件的一个例子</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font></b><font SIZE="3">本小节将向读者提供一个测试</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件的例子．测试程序名为</font><font FACE="Times New Roman" SIZE="3">Ctrl32</font><font SIZE="3">，其界面如图</font><font FACE="Times New Roman" SIZE="3">6.6</font><font SIZE="3">所示，该程序对前面介绍的五种</font><font FACE="Times New Roman" SIZE="3">Win32</font><font SIZE="3">控件均进行了测试：</p>
    <blockquote>
      <ul>
        <li><p ALIGN="JUSTIFY">对树形视图的测试着重演示了如何在各个层次上加入表项以及如何使表项显示图象，表项在平常状态下和选中状态下将显示不同的图象．</p>
        </li>
        <li><p ALIGN="JUSTIFY">对列表视图的测试包括如何生成一个报告式列表视图，如何在四个显示格式间切换以及如何使表项显示图标．读者可以在列表视图下面的下拉列表式组合框选择不同的显示格式．</p>
        </li>
        <li><p ALIGN="JUSTIFY">轨道条的测试包括初始化及<font FACE="Times New Roman" SIZE="3">WM_HSCROLL</font>消息的处理．进度条的进度将会随着滑尺位置的改变而改变．</p>
        </li>
        <li><p ALIGN="JUSTIFY">演示了如何为旋转按钮指定伙伴控件以及旋转按钮的初始化．</p>
        </li>
      </ul>
      </font><font FACE="Times New Roman" SIZE="3">
    </blockquote>
    <p ALIGN="center"></font><img src="T6_6.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap6/T6_6.gif" alt="T6_6.tif (129420 bytes)" WIDTH="456" HEIGHT="264"><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><font SIZE="3">图</font><font FACE="Times New Roman" SIZE="3">6.6 
    Ctrl32</font><font SIZE="3">测试程序</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">请读者按下列步骤操作：</p>
    <blockquote>
      <blockquote>
        <p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">AppWizard</font><font SIZE="3">建立一个基于对话框的</font><font FACE="Times New Roman" SIZE="3">MFC</font><font SIZE="3">应用程序，程序名为</font><font FACE="Times New Roman" SIZE="3">Ctrl32</font><font SIZE="3">．</p>
        <p ALIGN="JUSTIFY">插入两个位图</font><font FACE="Times New Roman" SIZE="3">(Bitmap)</font><font SIZE="3">资源，其</font><font FACE="Times New Roman" SIZE="3">ID</font><font SIZE="3">分别是</font><font FACE="Times New Roman" SIZE="3">IDB_BITMAP1</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">IDB_BITMAP2</font><font SIZE="3">，树形视图和列表视图将这用两幅位图来为表项显示图象．两个位图的尺寸分别为</font><font FACE="Times New Roman" SIZE="3">64</font><font SIZE="3">×</font><font FACE="Times New Roman" SIZE="3">16</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">128</font><font SIZE="3">×</font><font FACE="Times New Roman" SIZE="3">32</font><font SIZE="3">．每个位图都包含</font><font FACE="Times New Roman" SIZE="3">4</font><font SIZE="3">个子图，每个子图中都有一个颜色不同的矩形或圆，请按图</font><font FACE="Times New Roman" SIZE="3">6.7</font><font SIZE="3">和表</font><font FACE="Times New Roman" SIZE="3">6.31</font><font SIZE="3">绘制．两个位图的子图都是一样的，只不过大小不同，一个是</font><font FACE="Times New Roman" SIZE="3">16</font><font SIZE="3">×</font><font FACE="Times New Roman" SIZE="3">16</font><font SIZE="3">，一个是</font><font FACE="Times New Roman" SIZE="3">32</font><font SIZE="3">×</font><font FACE="Times New Roman" SIZE="3">32</font><font SIZE="3">．</p>
        </font><font FACE="Times New Roman" SIZE="3">
      </blockquote>
    </blockquote>
    <p ALIGN="center"></font><img src="T6_7.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap6/T6_7.gif" alt="T6_7.tif (129504 bytes)" WIDTH="427" HEIGHT="173"><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="center"></font><font SIZE="3">图</font><font FACE="Times New Roman" SIZE="3">6.7 
    </font><font SIZE="3">用于树形视图和列表视图的位图</font><font FACE="Times New Roman" SIZE="3"></p>
    </font><b><font SIZE="3"><p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.31</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="33%"><font SIZE="3"><b><p ALIGN="JUSTIFY">子图的形状</b></font></td>
        <td WIDTH="33%"><font SIZE="3"><b><p ALIGN="JUSTIFY">前景色</b></font></td>
        <td WIDTH="33%"><font SIZE="3"><b><p ALIGN="JUSTIFY">背景色</b></font></td>
      </tr>
      <tr>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">矩形</font></td>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">蓝色</font></td>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">黄色</font></td>
      </tr>
      <tr>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">矩形</font></td>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">红色</font></td>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">淡蓝色</font></td>
      </tr>
      <tr>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">圆</font></td>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">蓝色</font></td>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">黄色</font></td>
      </tr>
      <tr>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">圆</font></td>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">红色</font></td>
        <td WIDTH="33%"><font SIZE="3"><p ALIGN="JUSTIFY">淡蓝色</font></td>
      </tr>
    </table>
    <font FACE="Times New Roman" SIZE="3"><blockquote>
      <blockquote>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">打开</font><font FACE="Times New Roman" SIZE="3">IDD_CTRL32_DIALOG</font><font SIZE="3">对话框模板资源，清除</font><font FACE="Times New Roman" SIZE="3">OK</font><font SIZE="3">按钮外的所有控件并把</font><font FACE="Times New Roman" SIZE="3">OK</font><font SIZE="3">按钮的标题改为</font><font FACE="Times New Roman" SIZE="3">C&amp;lose</font><font SIZE="3">．将对话框的大小调整为</font><font FACE="Times New Roman" SIZE="3">300</font><font SIZE="3">×</font><font FACE="Times New Roman" SIZE="3">150</font><font SIZE="3">，然后按图</font><font FACE="Times New Roman" SIZE="3">6.6</font><font SIZE="3">和表</font><font FACE="Times New Roman" SIZE="3">6.32</font><font SIZE="3">加入控件，并按表</font><font FACE="Times New Roman" SIZE="3">6.32</font><font SIZE="3">用</font><font FACE="Times New Roman" SIZE="3">ClassWizard</font><font SIZE="3">为</font><font FACE="Times New Roman" SIZE="3">CCtrl32Dlg</font><font SIZE="3">类加入成员变量，注意，这些成员变量都是控件对象．</p>
        </font>
      </blockquote>
    </blockquote>
    <p><b><font SIZE="3">　</p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.32</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="17%"><font SIZE="3"><b><p ALIGN="JUSTIFY">控件类型</b></font></td>
        <td WIDTH="13%"><b><font SIZE="3"><p ALIGN="JUSTIFY">控件</font><font FACE="Times New Roman" SIZE="3">ID</font></b></td>
        <td WIDTH="49%"><font SIZE="3"><b><p ALIGN="JUSTIFY">需设置的属性</b></font></td>
        <td WIDTH="21%"><font SIZE="3"><b><p ALIGN="JUSTIFY">对应的控件对象名</b></font></td>
      </tr>
      <tr>
        <td WIDTH="17%"><font SIZE="3"><p ALIGN="JUSTIFY">树形视图</font></td>
        <td WIDTH="13%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">选择</font><font FACE="Times New Roman" SIZE="3">Has buttons</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">Has lines</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">Lines at root</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">Edit labels</font><font SIZE="3">．</font></td>
        <td WIDTH="21%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">m_Tree</font></td>
      </tr>
      <tr>
        <td WIDTH="17%"><font SIZE="3"><p ALIGN="JUSTIFY">列表视图</font></td>
        <td WIDTH="13%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">选择</font><font FACE="Times New Roman" SIZE="3">Report</font><font SIZE="3">格式、</font><font FACE="Times New Roman" SIZE="3">Auto arrange</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">Edit lables</font></td>
        <td WIDTH="21%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">m_List</font></td>
      </tr>
      <tr>
        <td WIDTH="17%"><font SIZE="3"><p ALIGN="JUSTIFY">轨道条</font></td>
        <td WIDTH="13%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">选择</font><font FACE="Times New Roman" SIZE="3">Tick marks</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">Autoticks</font><font SIZE="3">．</font></td>
        <td WIDTH="21%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">m_Slider</font></td>
      </tr>
      <tr>
        <td WIDTH="17%"><font SIZE="3"><p ALIGN="JUSTIFY">进度条</font></td>
        <td WIDTH="13%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省</font></td>
        <td WIDTH="21%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">m_Progress</font></td>
      </tr>
      <tr>
        <td WIDTH="17%"><font SIZE="3"><p ALIGN="JUSTIFY">组合框</font></td>
        <td WIDTH="13%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">选择</font><font FACE="Times New Roman" SIZE="3">Drop List</font><font SIZE="3">类型，不选择</font><font FACE="Times New Roman" SIZE="3">Sort</font><font SIZE="3">．加入</font><font FACE="Times New Roman" SIZE="3">4</font><font SIZE="3">个表项：</font><font FACE="Times New Roman" SIZE="3">Icon</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">Small icon</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">List</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">Report</font><font SIZE="3">．</font></td>
        <td WIDTH="21%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">m_ListBox</font></td>
      </tr>
      <tr>
        <td WIDTH="17%"><font SIZE="3"><p ALIGN="JUSTIFY">编辑框</font></td>
        <td WIDTH="13%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省．要注意其</font><font FACE="Times New Roman" SIZE="3">tab</font><font SIZE="3">顺序比旋转按钮小</font><font FACE="Times New Roman" SIZE="3">1</font><font SIZE="3">．</font></td>
        <td WIDTH="21%">　</td>
      </tr>
      <tr>
        <td WIDTH="17%"><font SIZE="3"><p ALIGN="JUSTIFY">旋转按钮</font></td>
        <td WIDTH="13%"><font SIZE="3"><p ALIGN="JUSTIFY">缺省</font></td>
        <td WIDTH="49%"><font SIZE="3"><p ALIGN="JUSTIFY">选择</font><font FACE="Times New Roman" SIZE="3">Auto buddy</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">Set buddy integer</font></td>
        <td WIDTH="21%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">m_Spin</font></td>
      </tr>
    </table>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <blockquote>
      <blockquote>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">在</font><font FACE="Times New Roman" SIZE="3">CCtrl32Dlg</font><font SIZE="3">类的定义处为改类加入下面两个成员，这两个</font><font FACE="Times New Roman" SIZE="3">CImageList</font><font SIZE="3">对象用来向树形视图和列表视图提供位图序列．<br>
        </font><font FACE="Times New Roman" SIZE="3"><b>CImageList m_SmallImageList;<br>
        CImageList m_LargeImageList;</p>
        </b></font><font SIZE="3"><p ALIGN="JUSTIFY">用</font><font FACE="Times New Roman" SIZE="3">ClassWizard</font><font SIZE="3">为</font><font FACE="Times New Roman" SIZE="3">CCtrl32Dlg</font><font SIZE="3">类加入如表</font><font FACE="Times New Roman" SIZE="3">6.33</font><font SIZE="3">所示的消息处理函数．其中</font><font FACE="Times New Roman" SIZE="3">OnHScroll</font><font SIZE="3">函数用来处理轨道条的通知消息，</font><font FACE="Times New Roman" SIZE="3">OnSelchangeCombo</font><font SIZE="3">用来切换列表视图的显示格式．</p>
        </font><b>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</p>
    <p ALIGN="CENTER">表</font><font FACE="Times New Roman" SIZE="3">6.33 CCtrl32Dlg</font><font SIZE="3">类的控件通知消息处理函数</font></b></p>
    <table BORDER="1" CELLSPACING="1" CELLPADDING="1" WIDTH="579">
      <tr>
        <td WIDTH="31%"><font FACE="Times New Roman" SIZE="3"><b><p ALIGN="JUSTIFY">Object IDS</b></font></td>
        <td WIDTH="30%"><font FACE="Times New Roman" SIZE="3"><b><p ALIGN="JUSTIFY">Messages</b></font></td>
        <td WIDTH="39%" COLSPAN="2"><font FACE="Times New Roman" SIZE="3"><b><p ALIGN="JUSTIFY">Member 
        functions</b></font></td>
      </tr>
      <tr>
        <td WIDTH="31%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CCtrl32Dlg</font></td>
        <td WIDTH="30%" COLSPAN="2"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">WM_HSCROLL</font></td>
        <td WIDTH="39%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">OnHScroll</font></td>
      </tr>
      <tr>
        <td WIDTH="31%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">IDC_COMBO1</font></td>
        <td WIDTH="30%" COLSPAN="2"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">CBN_SELCHANGE</font></td>
        <td WIDTH="39%"><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">OnSelchangeCombo</font></td>
      </tr>
    </table>
    <p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <blockquote>
      <blockquote>
        </font><font SIZE="3"><p ALIGN="JUSTIFY">最后，请读者按清单</font><font FACE="Times New Roman" SIZE="3">6.2</font><font SIZE="3">修改程序．</p>
        </font>
      </blockquote>
    </blockquote>
    <p><b><font SIZE="3">　</p>
    <p ALIGN="JUSTIFY">清单</font><font FACE="Times New Roman" SIZE="3">6.2 CCtrl32Dlg</font><font SIZE="3">类的部分源代码</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">// Ctrl32Dlg.cpp : implementation file</p>
    <p></font><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">. . . . . .</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">char *szLabel[2]={&quot;Rectangle&quot;,&quot;Circle&quot;};</p>
    <p ALIGN="JUSTIFY">char *szColumn[3]={&quot;Shape&quot;,&quot;Fore color&quot;,&quot;Back 
    color&quot;};</p>
    <p ALIGN="JUSTIFY">char *szData[4][3]=</p>
    <p ALIGN="JUSTIFY">{{&quot;Rectangle&quot;,&quot;Blue&quot;,&quot;Yellow&quot;},</p>
    <p ALIGN="JUSTIFY">{&quot;Rectangle&quot;,&quot;Red&quot;,&quot;Blue&quot;},</p>
    <p ALIGN="JUSTIFY">{&quot;Circle&quot;,&quot;Blue&quot;,&quot;Yellow&quot;},</p>
    <p ALIGN="JUSTIFY">{&quot;Circle&quot;,&quot;Red&quot;,&quot;Blue&quot;}};</p>
    <p ALIGN="JUSTIFY">DWORD nStyle[4]={LVS_ICON,LVS_SMALLICON,LVS_LIST,LVS_REPORT};</b></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">BOOL CCtrl32Dlg::OnInitDialog()</p>
    <p ALIGN="JUSTIFY">{</p>
    <p ALIGN="JUSTIFY">CDialog::OnInitDialog();</p>
    <p ALIGN="JUSTIFY"><b>. . . . . .</b></p>
    <p ALIGN="JUSTIFY">// TODO: Add extra initialization here</p>
    <p></font><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">//</font><font SIZE="3">初始化旋转按钮</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">m_Spin.SetRange(0,200); </p>
    <p ALIGN="JUSTIFY">m_Spin.SetPos(0);</p>
    <p ALIGN="JUSTIFY">//</font><font SIZE="3">初始化轨道条</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">m_Slider.SetRange(0,20); </p>
    <p ALIGN="JUSTIFY">m_Slider.SetTicFreq(2);</p>
    <p ALIGN="JUSTIFY">m_Slider.SetLineSize(2);</p>
    <p ALIGN="JUSTIFY">m_Slider.SetPageSize(4);</p>
    <p ALIGN="JUSTIFY">m_Slider.SetPos(0);</p>
    <p ALIGN="JUSTIFY">//</font><font SIZE="3">初始化进度条</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">m_Progress.SetRange(0,20); </p>
    <p ALIGN="JUSTIFY">m_Progress.SetPos(0);</p>
    <p ALIGN="JUSTIFY">//</font><font SIZE="3">创建位图序列，用于树形视图和列表视图显示图像</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">m_SmallImageList.Create(IDB_BITMAP1,16,0,FALSE); //16*16</font><font SIZE="3">的位图序列</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">m_LargeImageList.Create(IDB_BITMAP2,32,0,FALSE); //32*32</font><font SIZE="3">的位图序列</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">//</font><font SIZE="3">初始化树形视图</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">TV_INSERTSTRUCT tvInsert; </p>
    <p ALIGN="JUSTIFY">HTREEITEM hItem;</p>
    <p ALIGN="JUSTIFY">int i,j;</p>
    <p ALIGN="JUSTIFY">char buffer[20];</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">m_Tree.SetImageList(&amp;m_SmallImageList,TVSIL_NORMAL);</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">tvInsert.item.mask=TVIF_TEXT|TVIF_IMAGE|TVIF_SELECTEDIMAGE;</p>
    <p ALIGN="JUSTIFY">for(i=0;i&lt;2;i++)</p>
    <p ALIGN="JUSTIFY">{</p>
    <p ALIGN="JUSTIFY">tvInsert.hParent=NULL; //</font><font SIZE="3">指定该项位于最高层</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">tvInsert.hInsertAfter=TVI_LAST;</p>
    <p ALIGN="JUSTIFY">tvInsert.item.pszText=szLabel[i];</p>
    <p ALIGN="JUSTIFY">tvInsert.item.iImage=i*2; //</font><font SIZE="3">指定表项显示的图象</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">tvInsert.item.iSelectedImage=i*2+1; //</font><font SIZE="3">指定选择状态下应显示的图象</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">hItem=m_Tree.InsertItem(&amp;tvInsert);</p>
    <p ALIGN="JUSTIFY">for(j=0;j&lt;3;j++)</p>
    <p ALIGN="JUSTIFY">{ </p>
    <p ALIGN="JUSTIFY">tvInsert.hParent=hItem; //</font><font SIZE="3">指定该项为子项</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">tvInsert.hInsertAfter=TVI_SORT;</p>
    <p ALIGN="JUSTIFY">sprintf(buffer,&quot;%s%d&quot;,szLabel[i],j);</p>
    <p ALIGN="JUSTIFY">tvInsert.item.pszText=buffer;</p>
    <p ALIGN="JUSTIFY">m_Tree.InsertItem(&amp;tvInsert);</p>
    <p ALIGN="JUSTIFY">}</p>
    <p ALIGN="JUSTIFY">}</p>
    <p ALIGN="JUSTIFY">//</font><font SIZE="3">初始化列表视图</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">LV_COLUMN lvc;</p>
    <p ALIGN="JUSTIFY">LV_ITEM lvi;</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">m_List.SetImageList(&amp;m_SmallImageList,LVSIL_SMALL);</p>
    <p ALIGN="JUSTIFY">m_List.SetImageList(&amp;m_LargeImageList,LVSIL_NORMAL);</p>
    <p ALIGN="JUSTIFY">m_ComboBox.SelectString(-1,&quot;Report&quot;);</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">lvc.mask=LVCF_FMT|LVCF_WIDTH|LVCF_TEXT|LVCF_SUBITEM;</p>
    <p ALIGN="JUSTIFY">lvc.fmt=LVCFMT_LEFT;</p>
    <p ALIGN="JUSTIFY">for(i=0;i&lt;3;i++) //</font><font SIZE="3">插入各列</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">{</p>
    <p ALIGN="JUSTIFY">lvc.pszText=szColumn[i];</p>
    <p ALIGN="JUSTIFY">if(i==0)</p>
    <p ALIGN="JUSTIFY">lvc.cx=m_List.GetStringWidth(szColumn[0])+50;</p>
    <p ALIGN="JUSTIFY">else</p>
    <p ALIGN="JUSTIFY">lvc.cx=m_List.GetStringWidth(szColumn[i])+15;</p>
    <p ALIGN="JUSTIFY">lvc.iSubItem=i;</p>
    <p ALIGN="JUSTIFY">m_List.InsertColumn(i,&amp;lvc);</p>
    <p ALIGN="JUSTIFY">}</p>
    <p ALIGN="JUSTIFY">lvi.mask=LVIF_TEXT|LVIF_IMAGE;</p>
    <p ALIGN="JUSTIFY">lvi.iSubItem=0;</p>
    <p ALIGN="JUSTIFY">for(i=0;i&lt;4;i++) //</font><font SIZE="3">插入表项</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">{</p>
    <p ALIGN="JUSTIFY">lvi.pszText=szData[i][0];</p>
    <p ALIGN="JUSTIFY">lvi.iItem=i;</p>
    <p ALIGN="JUSTIFY">lvi.iImage=i;</p>
    <p ALIGN="JUSTIFY">m_List.InsertItem(&amp;lvi);</p>
    <p ALIGN="JUSTIFY">for(j=1;j&lt;3;j++)</p>
    <p ALIGN="JUSTIFY">m_List.SetItemText(i,j,szData[i][j]);</p>
    <p ALIGN="JUSTIFY">}</b></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">return TRUE; // return TRUE unless you set the focus to a control</p>
    <p ALIGN="JUSTIFY">}</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">void CCtrl32Dlg::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* 
    pScrollBar) </p>
    <p ALIGN="JUSTIFY">{</p>
    <p ALIGN="JUSTIFY">// TODO: Add your message handler code here and/or call default</p>
    <p></font><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">CSliderCtrl* pSlider=(CSliderCtrl*)pScrollBar;</p>
    <p ALIGN="JUSTIFY">//</font><font SIZE="3">判断是否是</font><font FACE="Times New Roman" SIZE="3">m_Slider</font><font SIZE="3">轨道条发送的消息</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">if(&amp;m_Slider!=pSlider) return; </p>
    <p ALIGN="JUSTIFY">m_Progress.SetPos(m_Slider.GetPos());</b></p>
    <p ALIGN="JUSTIFY">CDialog::OnHScroll(nSBCode, nPos, pScrollBar);</p>
    <p ALIGN="JUSTIFY">}</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">void CCtrl32Dlg::OnSelchangeCombo() </p>
    <p ALIGN="JUSTIFY">{</p>
    <p ALIGN="JUSTIFY">// TODO: Add your control notification handler code here</p>
    <p></font><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">long lStyle;</p>
    <p ALIGN="JUSTIFY">lStyle=GetWindowLong(m_List.GetSafeHwnd(),GWL_STYLE);</p>
    <p ALIGN="JUSTIFY">//</font><font SIZE="3">清除所有与显示格式有关的风格标志</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">lStyle&amp;=~(LVS_ICON|LVS_SMALLICON|LVS_LIST|LVS_REPORT);</p>
    <p ALIGN="JUSTIFY">lStyle|=nStyle[m_ComboBox.GetCurSel()];</p>
    <p ALIGN="JUSTIFY">//</font><font SIZE="3">设置新的风格</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">SetWindowLong(m_List.GetSafeHwnd(),GWL_STYLE,lStyle); </p>
    <p ALIGN="JUSTIFY">m_List.Invalidate(); //</font><font SIZE="3">刷新</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">}</p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">对控件的初始化工作在</font><font FACE="Times New Roman" SIZE="3">OnInitDialog</font><font SIZE="3">中完成．函数中使用的各种结构和函数在前面均介绍过，并不难懂．唯一需要说明的是</font><font FACE="Times New Roman" SIZE="3">CImageList</font><font SIZE="3">对象的使用．</font><font FACE="Times New Roman" SIZE="3">CImageList</font><font SIZE="3">对象用来存储多个大小相同的图象，如果程序中要用到大量的尺寸相同的位图或图标，可以用</font><font FACE="Times New Roman" SIZE="3">CImageList</font><font SIZE="3">对象把它们组织成图象序列来使用，通过指定序列的索引，可以获得序列中的图象．树形视图和列表视图均使用</font><font FACE="Times New Roman" SIZE="3">CImageList</font><font SIZE="3">对象来设置图象序列．在</font><font FACE="Times New Roman" SIZE="3">OnInitDialog</font><font SIZE="3">函数中，调用了</font><font FACE="Times New Roman" SIZE="3">CImageList::Create</font><font SIZE="3">来创建一个图象序列．该函数的声明为</p>
    <blockquote>
      <blockquote>
        <blockquote>
          </font><font FACE="Times New Roman" SIZE="3"><p ALIGN="JUSTIFY">BOOL Create( UINT 
          nBitmapID, int cx, int nGrow, COLORREF crMask );</font></p>
        </blockquote>
      </blockquote>
    </blockquote>
    <p><font SIZE="3">　</p>
    <p ALIGN="JUSTIFY">参数</font><font FACE="Times New Roman" SIZE="3">nBitmapID</font><font SIZE="3">是位图资源的</font><font FACE="Times New Roman" SIZE="3">ID</font><font SIZE="3">，在该位图中包含了一些尺寸相同的子图，参数</font><font FACE="Times New Roman" SIZE="3">cx</font><font SIZE="3">说明了序列中每幅图象的宽度（以像素为单位），参数</font><font FACE="Times New Roman" SIZE="3">nGrow</font><font SIZE="3">说明了当对象包含的图象序列增大时应预留的空位个数，参数</font><font FACE="Times New Roman" SIZE="3">crMask</font><font SIZE="3">如果为</font><font FACE="Times New Roman" SIZE="3">TRUE</font><font SIZE="3">，则说明图象序列中包含屏蔽图象．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">在函数中调用了</font><font FACE="Times New Roman" SIZE="3">CTreeCtrl::SetImageList</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">CListCtrl::SetImageList</font><font SIZE="3">来为树形视图和列表视图设置图象序列．注意列表视图对象</font><font FACE="Times New Roman" SIZE="3">m_List</font><font SIZE="3">设置了两个图象序列，分别用于小图标和大图标显示格式．在插入表项时，只要指定了图象序列的索引，表项就可以显示相应的图象．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">OnHScroll</font><font SIZE="3">函数负责处理轨道条发出的通知消息，函数根据轨道条的当前位置设置进度条的进度．</font><font FACE="Times New Roman" SIZE="3">OnSelchangeCombo</font><font SIZE="3">函数响应用户对下拉列表式组合框的选择，函数先调用</font><font FACE="Times New Roman" SIZE="3">CWnd::GetWindowLong</font><font SIZE="3">获取列表视图原来的风格，然后调用</font><font FACE="Times New Roman" SIZE="3">CWnd::SetWindowLong</font><font SIZE="3">设置新的风格（注意调用</font><font FACE="Times New Roman" SIZE="3">CWnd::GetSafeHwnd</font><font SIZE="3">可以获得窗口的句柄），最后调用</font><font FACE="Times New Roman" SIZE="3">CWnd::Invalidate</font><font SIZE="3">刷新列表视图．</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">Ctrl32</font><font SIZE="3">程序只是对常用的</font><font FACE="Times New Roman" SIZE="3">Win 32</font><font SIZE="3">控件进行了一些基本的测试。</font><font FACE="Times New Roman" SIZE="3">Visual C++</font><font SIZE="3">提供了一个全面测试</font><font FACE="Times New Roman" SIZE="3">Win 32</font><font SIZE="3">控件的</font><font FACE="Times New Roman" SIZE="3">MFC</font><font SIZE="3">例子</font><font FACE="Times New Roman" SIZE="3">cmnctrls</font><font SIZE="3">（在</font><font FACE="Times New Roman" SIZE="3">samples \ mfc \ general \ cmnctrls</font><font SIZE="3">目录下），有兴趣的读者可以研究一下。</font><font FACE="Times New Roman" SIZE="3"></p>
    </font><div align="center"><center><table border="0" cellpadding="0" cellspacing="0" width="615">
      <tr>
        <td><a href="chap6_1.htm" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap6/chap6_1.htm">上一页</a></td>
        <td><p align="right"><a href="chap6_3.htm" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap6/chap6_3.htm">下一页</a></td>
      </tr>
    </table>
    </center></div><font SIZE="5"><hr noshade color="#3973DE" size="1">
    <p align="center"></font><font size="2" color="#000000">本教程由<a href="javascript:if(confirm('http://vcdynasty.yeah.net/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://vcdynasty.yeah.net/'" tppabs="http://vcdynasty.yeah.net/">Visual C++王朝（Where programmers come together）</a>协助制作<br>
    未经许可，请勿以任何形式复制</font></td>
    <b>
  </tr>
</table>
</center></div>

<p ALIGN="CENTER"></b><font SIZE="5">　</font><font FACE="Times New Roman" SIZE="5"></p>
</font><font FACE="Times New Roman" SIZE="3">

<p></font><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
</font></b>

<p><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>

<p></font>　</p>
</body>
</html>
