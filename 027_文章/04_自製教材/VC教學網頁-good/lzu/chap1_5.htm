<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>面向对象和Windows编程</title>
</head>

<body stylesrc="chap1_4.htm" style="text-decoration: none" bgcolor="#FFFFFF" text="#000000" link="#3973DE" alink="#3973DE">
<div align="center"><center>

<table border="0" width="615" cellspacing="0" cellpadding="0">
  <tr>
    <td><div align="center"><center><table border="0" width="615" cellpadding="0" cellspacing="0">
      <tr>
        <td width="451" bgcolor="#15397D"></td>
        <td width="164" bgcolor="#000000"><p align="right"><a href="javascript:if(confirm('http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/index.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/index.htm'" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/index.htm"><strong><font color="#FFFFFF">Visual C++网络教程</font></strong></a></td>
      </tr>
    </table>
    </center></div><b><font FACE="Times New Roman" SIZE="3"><p ALIGN="center"></font><font color="#3973DE" FACE="Times New Roman" size="4">1.5 </font><font color="#3973DE" size="4">面向对象和</font><font color="#3973DE" FACE="Times New Roman" size="4">Windows</font><font color="#3973DE" size="4">编程</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">面向对象技术是目前流行的系统设计开发技术，它包括面向对象分析和面向对象程序设计。面向对象程序设计技术的提出，主要是为了解决传统程序设计方法――结构化程序设计所不能解决的代码重用问题。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">结构化程序设计从系统的功能入手，按照工程的标准和严格的规范将系统分解为若干功能模块，系统是实现模块功能的函数和过程的集合。由于用户的需求和软、硬件技术的不断发展变化，按照功能划分设计的系统模块必然是易变的和不稳定的。这样开发出来的模块可重用性不高。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">面向对象程序设计从所处理的数据入手，以数据为中心而不是以服务（功能）为中心来描述系统。它把编程问题视为一个数据集合，数据相对于功能而言，具有更强的稳定性。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">面向对象程序设计同结构化程序设计相比最大的区别就在于：前者首先关心的是所要处理的数据，而后者首先关心的是功能。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">面向对象程序设计是一种围绕真实世界的概念来组织模型的程序设计方法，它采用对象来描述问题空间的实体。关于对象这一概念，目前还没有统一的定义。一般的认为，对象是包含现实世界物体特征的抽象实体，它反映了系统为之保存信息和（或）与它交互的能力。它是一些属性及服务的一个封装体，在程序设计领域，可以用“对象</font><font FACE="Times New Roman" SIZE="3">=</font><font SIZE="3">数据</font><font FACE="Times New Roman" SIZE="3">+</font><font SIZE="3">作用于这些数据上的操作”这一公式来表达。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">类是具有相同操作功能和相同的数据格式（属性）的对象的集合。类可以看作抽象数据类型的具体实现。抽象数据类型是数据类型抽象的表示形式。数据类型是指数据的集合和作用于其上的操作的集合，而抽象数据类型不关心操作实现的细节。从外部看，类型的行为可以用新定义的操作加以规定。类为对象集合的抽象，它规定了这些对象的公共属性和方法；对象为类的一个实例。苹果是一个类，而放在桌上的那个苹果则是一个对象。对象和类的关系相当于一般的程序设计语言中变量和变量类型的关系。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">消息是向某对象请求服务的一种表达方式。对象内有方法和数据，外部的用户或对象对该对象提出的服务请求，可以称为向该对象发送消息。合作是指两个对象之间共同承担责任和分工。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">面向对象的编程方法具有四个基本特征：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>1.</font><font SIZE="3">抽象：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。比如，我们要设计一个学生成绩管理系统，考察学生这个对象时，我们只关心他的班级、学号、成绩等，而不用去关心他的身高、体重这些信息。抽象包括两个方面，一是过程抽象，二是数据抽象。过程抽象是指任何一个明确定义功能的操作都可被使用者看作单个的实体看待，尽管这个操作实际上可能由一系列更低级的操作来完成。数据抽象定义了数据类型和施加于该类型对象上的操作，并限定了对象的值只能通过使用这些操作修改和观察。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>2.</font><font SIZE="3">继承：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。这也体现了大自然中一般与特殊的关系。继承性很好的解决了软件的可重用性问题。比如说，所有的</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序都有一个窗口，它们可以看作都是从一个窗口类派生出来的。但是有的应用程序用于文字处理，有的应用程序用于绘图，这是由于派生出了不同的子类，各个子类添加了不同的特性。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>3.</font><font SIZE="3">封装：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">封装是面向对象的特征之一，是对象和类概念的主要特性。封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。一旦定义了一个对象的特性，则有必要决定这些特性的可见性，即哪些特性对外部世界是可见的，哪些特性用于表示内部状态。在这个阶段定义对象的接口。通常，应禁止直接访问一个对象的实际表示，而应通过操作接口访问对象，这称为信息隐藏。事实上，信息隐藏是用户对封装性的认识，封装则为信息隐藏提供支持。封装保证了模块具有较好的独立性，使得程序维护修改较为容易。对应用程序的修改仅限于类的内部，因而可以将应用程序修改带来的影响减少到最低限度。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>4. </font><font SIZE="3">多态性：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">多态性是指允许不同类的对象对同一消息作出响应。比如同样的加法，把两个时间加在一起和把两个整数加在一起肯定完全不同。又比如，同样的选择编辑</font><font FACE="Times New Roman" SIZE="3">-</font><font SIZE="3">粘贴操作，在字处理程序和绘图程序中有不同的效果。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">面向对象程序设计具有许多优点：</font><font SIZE="3" FACE="Times New Roman"><ul>
      <li><p ALIGN="JUSTIFY"></font><font SIZE="3">开发时间短，效率高，可靠性高，所开发的程序更强壮。由于面向对象编程的可重用性，可以在应用程序中大量采用成熟的类库，从而缩短了开发时间。</font><font SIZE="3" FACE="Times New Roman"></p>
      </li>
      <li><p ALIGN="JUSTIFY"></font><font SIZE="3">应用程序更易于维护、更新和升级。继承和封装使得应用程序的修改带来的影响更加局部化。</font><font FACE="Times New Roman" SIZE="3"></p>
      </li>
    </ul>
    <p ALIGN="JUSTIFY">Windows</font><font SIZE="3">的最初开发是在</font><font FACE="Times New Roman" SIZE="3">80</font><font SIZE="3">年代早期，在</font><font FACE="Times New Roman" SIZE="3">C++</font><font SIZE="3">出现之前，但是当时已经提出了面向对象式的程序设计思想。</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">的开发者们已经意识到将界面上不同的项看作对象的好处，但是他们仍然被迫采用传统的</font><font FACE="Times New Roman" SIZE="3">C</font><font SIZE="3">语言来处理这些对象。在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">的界面设计和软件开发环境中，可以说处处贯穿着面向对象的思想。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">中，程序的基本单位不是过程和函数，而是窗口。一个窗口是一组数据的集合和处理这些数据的方法和窗口函数。从面向对象的角度来看，窗口本身就是一个对象。</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">程序的执行过程本身就是窗口和其他对象的创建、处理和消亡过程。</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">中的消息的发送可以理解为一个窗口对象向别的窗口对象请求对象的服务过程。因此，用面向对象方法来进行</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">程序的设计与开发是极其方便的和自然的。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">采用面向对象的方法来进行</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">程序设计还可以简化对资源的管理。当我们将资源映射成一个</font><font FACE="Times New Roman" SIZE="3">C++</font><font SIZE="3">对象时，对资源的使用可以翻译成以下</font><font FACE="Times New Roman" SIZE="3">C++</font><font SIZE="3">顺序：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>1.</font><font SIZE="3">创建一个对象：如定义一个画笔对象</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>2.</font><font SIZE="3">使用对象：用画笔绘图</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>3.</font><font SIZE="3">撤消该对象</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">一个对象的创建是对一个对象的定义过程，可以由对象的构造函数处理对资源的请求过程。当某一个对象退出活动范围时，它的撤消可以由编译器来自动管理。各种资源和</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">结构都能以这种方式处理，如设备上下文、画笔、字体、画刷等等。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="CENTER"></font>　<b><font SIZE="4"></p>
    <p ALIGN="CENTER">小 结</font><font FACE="Times New Roman" SIZE="3"></p>
    </b><p></font><font SIZE="3">在这一讲中，我们主要向读者介绍了：</font><font FACE="Times New Roman" SIZE="3"><ul>
      <li>Windows</font><font SIZE="3">操作系统的特点：面向对象的图形用户界面，一致的用户接口，设备无关的图形输出以及多任务。</font><font FACE="Times New Roman" SIZE="3"></li>
    </ul>
    </font><ul>
      <font FACE="Times New Roman" SIZE="3">
      <li>Windows</font><font SIZE="3">编程的四个特点：事件驱动、消息循环、图形输出、资源共享</font><font FACE="Times New Roman" SIZE="3"></li>
      </font>
    </ul>
    <ul>
      <font FACE="Times New Roman" SIZE="3">
      <li>Windows</font><font SIZE="3">的基本用户界面对象：包括窗口、标题栏、图标、光标、插入符号、对话框、控件等。</font><font FACE="Times New Roman" SIZE="3"></li>
      </font>
    </ul>
    <ul>
      <font FACE="Times New Roman" SIZE="3">
      <li>Windows</font><font SIZE="3">应用程序的基本组成和生成过程：</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序包含</font><font FACE="Times New Roman" SIZE="3">C</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">CPP</font><font SIZE="3">、头文件和资源文件；</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序的生成要经过编译和连接两个阶段。</font><font FACE="Times New Roman" SIZE="3"></li>
      </font>
    </ul>
    <ul>
      <font FACE="Times New Roman" SIZE="3">
      <li>Windows</font><font SIZE="3">应用程序的开发工具</font><font FACE="Times New Roman" SIZE="3">Visual C++</font><font FACE="Times New Roman" SIZE="3"></li>
      </font>
    </ul>
    <ul>
      <font SIZE="3" FACE="Times New Roman">
      <li></font><font SIZE="3">面向对象编程的基础知识和运用面向对象技术进行</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">编程：对象、类、消息的概念；面向对象的编程特征：抽象，继承，封装和多态性。在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">编程中，窗口本身就是一个重要的对象。</font><font FACE="Times New Roman" SIZE="3"></li>
      </font>
    </ul>
    <p>　<font FACE="Times New Roman" SIZE="3"></p>
    </font><p ALIGN="right"><font FACE="Times New Roman" size="2">[</font><a href="chap1_4.htm" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/chap1_4.htm"><font size="2">上一页</font></a><font FACE="Times New Roman" size="2">]</font></p>
    <font size="3"><hr noshade color="#3973DE" size="1">
    <p align="center"></font><font size="2" color="#000000">本教程由<a href="javascript:if(confirm('http://vcdynasty.yeah.net/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://vcdynasty.yeah.net/'" tppabs="http://vcdynasty.yeah.net/">Visual C++王朝（Where programmers come together）</a>协助制作,1999<br>
    未经许可，请勿以任何形式复制或转载</font><font SIZE="5"></font></td>
  </tr>
</table>
</center></div>
</body>
</html>
