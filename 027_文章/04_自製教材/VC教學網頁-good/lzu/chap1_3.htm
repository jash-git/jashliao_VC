<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
<title>Windows应用程序设计的特点</title>
</head>

<body bgcolor="#FFFFFF" text="#000000" link="#3973DE" alink="#3973DE" style="text-decoration: none">
<div align="center"><center>

<table border="0" width="615" cellspacing="0" cellpadding="0">
  <tr>
    <td><div align="center"><center><table border="0" width="615" cellpadding="0" cellspacing="0">
      <tr>
        <td width="451" bgcolor="#15397D"></td>
        <td width="164" bgcolor="#000000"><p align="right"><a href="javascript:if(confirm('http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/index.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/index.htm'" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/index.htm"><strong><font color="#FFFFFF">Visual C++网络教程</font></strong></a></td>
      </tr>
    </table>
    </center></div><b><font FACE="Times New Roman" SIZE="3"><p ALIGN="CENTER"></font><font SIZE="3"><br>
    </font><font color="#3973DE" FACE="Times New Roman" SIZE="3">1.3 Windows</font><font SIZE="3" color="#3973DE">应用程序设计的特点</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">如前所述，</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">操作系统具有</font><font FACE="Times New Roman" SIZE="3">MS-DOS</font><font SIZE="3">操作系统无可比拟的优点，因而受到了广大软件开发人员的亲睐。但是，熟悉</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">环境下软件开发的程序员很快就会发现，</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">编程与</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">环境下编程相比有很大的不同。</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">要求以一种全新的思维方式进行程序设计，主要表现为以下几点：</font><b><font FACE="Times New Roman" SIZE="3"></p>
    <p>1.3.1</font><font SIZE="3">事件驱动的程序设计</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">传统的</font><font FACE="Times New Roman" SIZE="3">MS-DOS</font><font SIZE="3">程序主要采用顺序的、关联的、过程驱动的程序设计方法。一个程序是一系列预先定义好的操作序列的组合，它具有一定的开头、中间过程和结束。程序直接控制程序事件和过程的顺序。这样的程序设计方法是面向程序而不是面向用户的，交互性差，用户界面不够友好，因为它强迫用户按照某种不可更改的模式进行工作。它的基本模型如图</font><font FACE="Times New Roman" SIZE="3">1.1</font><font SIZE="3">所示。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">事件驱动程序设计是一种全新的程序设计方法，它不是由事件的顺序来控制，而是由事件的发生来控制，而这种事件的发生是随机的、不确定的，并没有预定的顺序，这样就允许程序的的用户用各种合理的顺序来安排程序的流程。对于需要用户交互的应用程序来说，事件驱动的程序设计有着过程驱动方法无法替代的优点。它是一种面向用户的程序设计方法，它在程序设计过程中除了完成所需功能之外，更多的考虑了用户可能的各种输入，并针对性的设计相应的处理程序。它是一种“被动”式程序设计方法，程序开始运行时，处于等待用户输入事件状态，然后取得事件并作出相应反应，处理完毕又返回并处于等待事件状态。它的框图如图</font><font FACE="Times New Roman" SIZE="3">1.2</font><font SIZE="3">所示</font><font FACE="Times New Roman" SIZE="3">:</p>
    <p></font><font SIZE="3">在图中，输入界面</font><font FACE="Times New Roman" SIZE="3">1-4</font><font SIZE="3">并没有固定的顺序，用户可以随机选取，以任何合理的顺序来输入数据。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="CENTER"></font><img src="T1_1.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/T1_1.gif" alt="T1_1.tif (69737 bytes)" WIDTH="189" HEIGHT="321"><font SIZE="3"></p>
    <p ALIGN="CENTER"></font><font size="1">图<font FACE="Times New Roman">1.1 </font>过程驱动模型</p>
    <p ALIGN="CENTER"></font><img src="T1_2.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/T1_2.gif" alt="T1_2.tif (200700 bytes)" WIDTH="565" HEIGHT="302"><b><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="CENTER"></font><font size="1">图</font><font FACE="Times New Roman" size="2"><small>1.2</small></font><font size="1">事件驱动程序模型</font><font FACE="Times New Roman" size="2"></p>
    <p></font><font FACE="Times New Roman" SIZE="3">1.3.2 </font><font SIZE="3">消息循环与输入</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">事件驱动围绕着消息的产生与处理展开，一条消息是关于发生的事件的消息。事件驱动是靠消息循环机制来实现的。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">消息是一种报告有关事件发生的通知。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">消息类似于</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">下的用户输入，但比</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">的输入来源要广，</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序的消息来源有以下四种：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">（</font><font FACE="Times New Roman" SIZE="3">1</font><font SIZE="3">）输入消息：包括键盘和鼠标的输入。这一类消息首先放在系统消息队列中，然后由</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">将它们送入应用程序消息队列中，由应用程序来处理消息。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">（</font><font FACE="Times New Roman" SIZE="3">2</font><font SIZE="3">）控制消息：用来与</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">的控制对象，如列表框、按钮、检查框等进行双向通信。当用户在列表框中改动当前选择或改变了检查框的状态时发出此类消息。这类消息一般不经过应用程序消息队列，而是直接发送到控制对象上去。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">（</font><font FACE="Times New Roman" SIZE="3">3</font><font SIZE="3">）系统消息：对程序化的事件或系统时钟中断作出反应。一些系统消息，象</font><font FACE="Times New Roman" SIZE="3">DDE</font><font SIZE="3">消息（动态数据交换消息）要通过</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">的系统消息队列，而有的则不通过系统消息队列而直接送入应用程序的消息队列，如创建窗口消息。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">（</font><font FACE="Times New Roman" SIZE="3">4</font><font SIZE="3">）用户消息：这是程序员自己定义并在应用程序中主动发出的，一般由应用程序的某一部分内部处理。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">在</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">应用程序下，可以通过</font><font FACE="Times New Roman" SIZE="3">getchar()</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">getch()</font><font SIZE="3">等函数直接等待键盘输入，并直接向屏幕输出。而在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">下，由于允许多个任务同时运行，应用程序的输入输出是由</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">来统一管理的。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>Windows</font><font SIZE="3">操作系统包括三个内核基本元件：</font><font FACE="Times New Roman" SIZE="3">GDI, KERNEL ,USER</font><font SIZE="3">。其中</font><font FACE="Times New Roman" SIZE="3">GDI(</font><font SIZE="3">图形设备接口</font><font FACE="Times New Roman" SIZE="3">)</font><font SIZE="3">负责在屏幕上绘制像素、打印硬拷贝输出，绘制用户界面包括窗口、菜单、对话框等。系统内核</font><font FACE="Times New Roman" SIZE="3">KERNEL</font><font SIZE="3">支持与操作系统密切相关的功能：如进程加载，文本切换、文件</font><font FACE="Times New Roman" SIZE="3">I/O</font><font SIZE="3">，以及内存管理、线程管理等。</font><font FACE="Times New Roman" SIZE="3">USER</font><font SIZE="3">为所有的用户界面对象提供支持，它用于接收和管理所有输入消息、系统消息并把它们发给相应的窗口的消息队列。消息队列是一个系统定义的内存块，用于临时存储消息；或是把消息直接发给窗口过程。每个窗口维护自己的消息队列，并从中取出消息，利用窗口函数进行处理。框图如下：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="CENTER"></font><img src="T1_3.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/T1_3.gif" alt="T1_3.tif (207496 bytes)" WIDTH="456" HEIGHT="327"><font SIZE="3"></p>
    <p ALIGN="CENTER"></font><font size="2">图<font FACE="Times New Roman">1.3 </font>消息驱动模型<font FACE="Times New Roman"></p>
    <p></font></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>1.3.3 </font><font SIZE="3">图形输出</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p>Windows</font><font SIZE="3">程序不仅在输入上与</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">程序不同，而且在程序输出上也与</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">有着很大不同，主要表现为：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>1.DOS</font><font SIZE="3">程序独占整个显示屏幕，其他程序在后台等待。而</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">的每一个应用程序对屏幕的一部分进行处理。</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">程序可以直接往屏幕上输出，而</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">是一个多窗口的操作系统，由操作系统来统一管理屏幕输出；每个窗口要输出内容时，必须首先向操作系统发出请求</font><font FACE="Times New Roman" SIZE="3">(GDI</font><font SIZE="3">请求</font><font FACE="Times New Roman" SIZE="3">)</font><font SIZE="3">，由操作系统完成实际的屏幕输出工作。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>2.Windows</font><font SIZE="3">程序的所有输出都是图形。</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">提供了丰富的图形函数用于图形输出，这对输出图形是相当方便的，但是由于字符也被作为图形来处理，输出时的定位要比</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">复杂的多。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">比如，在</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">字符方式下，我们可以写出如下程序用于输出两行文字：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>printf(</font><font SIZE="3">“</font><font FACE="Times New Roman" SIZE="3">Hello,\n</font><font SIZE="3">”</font><font FACE="Times New Roman" SIZE="3">);</p>
    <p>printf(</font><font SIZE="3">“</font><font FACE="Times New Roman" SIZE="3">This is 
    DOS program.\n</font><font SIZE="3">”</font><font FACE="Times New Roman" SIZE="3">);</p>
    <p></font><font SIZE="3">而在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">下要输出这两行文字所做的工作要复杂的多。因为</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">输出是基于图形的，它输出文本时不会象</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">那样自动换行，而必须以像素为单位精确定位每一行的输出位置。另外，由于</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">提供了丰富的字体，所以在计算坐标偏移量时还必须知道当前所用字体的高度和宽度。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">3.Windows</font><font SIZE="3">下的输出是设备无关的。在</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">下编写过</font><font FACE="Times New Roman" SIZE="3">Foxpro</font><font SIZE="3">程序的读者常常会有这样的体会，在编写打印报表程序时，要针对不同的打印机在程序中插入不同的打印控制码，用以控制换页、字体设置等选项。这样的程序编写起来繁琐，而且不容易移植（因为换一台不同型号的打印机就要重新修改程序）。而</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">下的应用程序使用图形设备接口（</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">）来进行图形输出。</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">屏蔽了不同设备的差异，提供了设备无关的图形输出能力，</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序只要发出设备无关的</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">请求（如调用</font><font FACE="Times New Roman" SIZE="3">Rectangle</font><font SIZE="3">画一个矩形），由</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">去完成实际的图形输出操作。对于一台具有打印矩形功能的</font><font FACE="Times New Roman" SIZE="3">PostScript</font><font SIZE="3">打印机来说，</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">可能只需要将矩形数据传给驱动程序就可以了，然后由驱动程序产生</font><font FACE="Times New Roman" SIZE="3">PostScript</font><font SIZE="3">命令绘制出相应的矩形；而对于一台没有矩形输出功能的点阵打印机来说，</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">可能需要将矩形转化为四条线，然后向驱动程序发出画线的指令，在打印机上输出矩形。当然，这两种输出在用户看来并没有什么区别。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>Windows</font><font SIZE="3">的图形输出是由图形设备接口（</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">）来完成的，</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">是系统原始的图形输出库，它用于在屏幕上输出像素、在打印机上输出硬拷贝以及绘制</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">用户界面。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>GDI</font><font SIZE="3">提供两种基本服务：创建图形输出和存储图象。</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">提供了大量用于图形输出的函数，这些函数接收应用程序发出来的绘图请求、处理绘图数据并根据当前使用设备调用相应的设备驱动程序产生绘图输出。这些绘图函数分为三类：一是文字输出，二是矢量图形函数，用于画线、圆等几何图形，三是光栅（位图）图形函数，用于绘制位图。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>GDI</font><font SIZE="3">识别四种类型的设备：显示屏幕、硬拷贝设备（打印机、绘图机）、位图和图元文件。前两者是物理设备，后两者是伪设备。一个伪设备提供了一种在</font><font FACE="Times New Roman" SIZE="3">RAM</font><font SIZE="3">里或磁盘里存储图象的方法。位图存放的是图形的点位信息，占用较多的内存，但速度很快。图元文件保存的是</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">函数的调用和调用参数，占用内存较少，但依赖于</font><font FACE="Times New Roman" SIZE="3">GDI</font><font SIZE="3">，因此不可能用某个设备来创建图元文件，而且速度比位图要慢。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>GDI</font><font SIZE="3">的图形输出是面向窗口的，面向窗口包含两层含义：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">（</font><font FACE="Times New Roman" SIZE="3">1</font><font SIZE="3">）每个窗口作为一个独立的绘图接口来处理，有它自己的绘图坐标。当程序在一个窗口中绘图时，首先建立缺省的绘图坐标，原点（</font><font FACE="Times New Roman" SIZE="3">0</font><font SIZE="3">，</font><font FACE="Times New Roman" SIZE="3">0</font><font SIZE="3">）位于窗口用户区的左上角。每个窗口必须独立的维护自己的输出。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">（</font><font FACE="Times New Roman" SIZE="3">2</font><font SIZE="3">）绘图仅对于本窗口有效，图形在窗口边界会被自动裁剪，也就是说窗口中的每一个图形都不会越出边界。即使想越出边界，也是不可能的，窗口会自动的防止其他窗口传过来的任何像素。这样，你在窗口内绘图时，就不必担心会偶然覆盖其他程序的窗口，从而保证了</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">下同时运行多个任务时各个窗口的独立性。</font><b><font FACE="Times New Roman" SIZE="3"></p>
    <p>1.3.4 </font><font SIZE="3">用户界面对象</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p>Windows</font><font SIZE="3">支持丰富的用户接口对象，包括：窗口、图标、菜单、对话框等等。程序员只需简单的几十行代码，就可以设计出一个非常漂亮的图形用户界面。而在</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">环境下，则需要大量的代码来完成同样的工作，而且效果也没有</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">提供的那么好。下面我们介绍一下用户界面对象中的一些术语和相关概念。<b></p>
    <p>窗口</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">窗口是用户界面中最重要的部分。它是屏幕上与一个应用程序相对应的矩形区域，是用户与产生该窗口的应用程序之间的可视界面。每当用户开始运行一个应用程序时，应用程序就创建并显示一个窗口；当用户操作窗口中的对象时，程序会作出相应反应。用户通过关闭一个窗口来终止一个程序的运行；通过选择相应的应用程序窗口来选择相应的应用程序。一个典型的窗口外观如图</font><font FACE="Times New Roman" SIZE="3">1.4</font><font SIZE="3">所示。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p align="center"><img src="T1_4.jpg" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/T1_4.jpg" alt="T1_4.jpg (15734 bytes)" WIDTH="469" HEIGHT="324"></p>
    <p align="center"></font><font size="2">图<font FACE="Times New Roman">1.4 </font>窗口<b></p>
    <p></font><font SIZE="3">边框</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">绝大多数窗口都有一个边框，用于指示窗口的边界。同时也用来指明该窗口是否为活动窗口，当窗口活动时，边框的标题栏部分呈高亮显示。用户可以用鼠标拖动边框来调整窗口的大小。<b></p>
    <p>系统菜单框</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">系统菜单框位于窗口左上角，以当前窗口的图标方式显示，用鼠标点一下该图标（或按</font><font FACE="Times New Roman" SIZE="3">ALT+</font><font SIZE="3">空格键）就弹出系统菜单。系统菜单提供标准的应用程序选项，包括：</font><font FACE="Times New Roman" SIZE="3">Restore(</font><font SIZE="3">还原窗口原有的大小</font><font FACE="Times New Roman" SIZE="3">)</font><font SIZE="3">，</font><font FACE="Times New Roman" SIZE="3">Move(</font><font SIZE="3">使窗口可以通过键盘上的光标键来移动其位置</font><font FACE="Times New Roman" SIZE="3">)</font><font SIZE="3">，</font><font FACE="Times New Roman" SIZE="3">Size(</font><font SIZE="3">使用光标键调整窗口大小</font><font FACE="Times New Roman" SIZE="3">)</font><font SIZE="3">，</font><font FACE="Times New Roman" SIZE="3">Minimize(</font><font SIZE="3">将窗口缩成图标</font><font FACE="Times New Roman" SIZE="3">)</font><font SIZE="3">，</font><font FACE="Times New Roman" SIZE="3">Maximize(</font><font SIZE="3">最大化：使窗口充满整个屏幕</font><font FACE="Times New Roman" SIZE="3">)</font><font SIZE="3">和</font><font FACE="Times New Roman" SIZE="3">Close(</font><font SIZE="3">关闭窗口</font><font FACE="Times New Roman" SIZE="3">)</font><font SIZE="3">。<b></p>
    <p>标题栏</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">标题栏位于窗口的顶部，其中显示的文本信息用于标注应用程序，一般是应用程序的名字，以便让用户了解哪个应用程序正在运行。标题栏颜色反映该窗口是否是一个活动窗口，当为活动窗口时，标题栏呈现醒目颜色。鼠标双击标题栏可以使窗口在正常大小和最大化状态之间切换。在标题栏上按下鼠标器左键可以拖动并移动该窗口，按右键弹出窗口系统菜单。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><b><font SIZE="3">　</p>
    <p>菜单栏</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">菜单栏位于标题栏下方，横跨屏幕，在它上面列出了应用程序所支持的命令，菜单栏中的项是命令的主要分类，如文件操作、编辑操作。从菜单栏中选中某一项通常会显示一个弹出菜单，其中的项是对应于指定分类中的某个任务。通过选择菜单中的一个项（菜单项），用户可以向程序发出命令，以执行某一功能。如选择“文件</font><font FACE="Times New Roman" SIZE="3">-&gt;</font><font SIZE="3">打开</font><font FACE="Times New Roman" SIZE="3">...</font><font SIZE="3">”菜单项会弹出一个打开文件对话框，让用户选择一个文件，然后打开这个文件。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">一般的，以“</font><font FACE="Times New Roman" SIZE="3">...</font><font SIZE="3">”结尾的菜单项文本表明选择该项时会弹出一个对话框，让用户输入信息，然后执行操作，如“文件</font><font FACE="Times New Roman" SIZE="3">-&gt;</font><font SIZE="3">打开</font><font FACE="Times New Roman" SIZE="3">...</font><font SIZE="3">”。若不以“</font><font FACE="Times New Roman" SIZE="3">...</font><font SIZE="3">”结尾，则表明选择该菜单项直接执行一个动作，如“编辑”菜单下的“粘贴”菜单项。若一个菜单项呈现灰色，则表明该菜单当前不可用。有时菜单项上还有加速键，加速键是一种键盘组合，它是菜单项的一种替代方式，可以让用户通过键盘直接发出命令；在键盘上按下这一键盘组合，就等效于选择了相应的菜单。如“粘贴（</font><font FACE="Times New Roman" SIZE="3">P</font><font SIZE="3">） </font><font FACE="Times New Roman" SIZE="3">CTRL+V</font><font SIZE="3">”，就表示粘贴操作的加速键是</font><font FACE="Times New Roman" SIZE="3">CTRL+V</font><font SIZE="3">，按下</font><font FACE="Times New Roman" SIZE="3">CTRL+V</font><font SIZE="3">就执行粘贴操作。<b></p>
    <p>工具条</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">工具条一般位于菜单栏下方，在它上面有一组位图按钮，代表一些最常用的命令。工具条可以显示或隐藏。让鼠标在某个按钮上停一会儿，在按钮下方会出现一个黄色的小窗口，里面显示关于该按钮的简短说明，叫做工具条提示（</font><font FACE="Times New Roman" SIZE="3">ToolTip</font><font SIZE="3">）。用户还可以用鼠标拖动工具条将其放在窗口的任何一侧。<b></p>
    <p>客户区</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">客户区是窗口中最大的一块空白矩形区域，用于显示应用程序的输出。例如，字处理程序在客户区中显示文档的当前页面。应用程序负责客户区的绘制工作，而且只有和该窗口相对应的应用程序才能向该用户区输出。<b></p>
    <p>垂直滚动条和水平滚动条</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">垂直滚动条和水平滚动条分别位于客户区的左侧和底部，它们各有两个方向相反的箭头和一个深色的长度可变的滚动块。可以用鼠标选中滚动条的箭头上下卷滚（选中垂直滚动条时）或水平卷滚（选中水平滚动条时）客户区的内容。滚动块的位置表示客户区中显示的内容相对于要显示的全部内容的位置，滚动块的长度表示客户区中显示的内容大小相对于全部内容大小的比例。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3"><b>　</p>
    <p>状态栏</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">状态栏是一般位于窗口底部，用于输出菜单的说明和其他一些提示信息（如鼠标器位置、当前时间、某种状态等）。<b></p>
    <p>图标</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">图标是一个用于提醒用户的符号，它是一个小小的图象，用于代表一个应用程序。当一个应用程序的主窗口缩至最小时，就呈现为一个图标。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><b><font SIZE="3">　</p>
    <p>光标</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>Windows</font><font SIZE="3">的光标是显示屏上的一个位图，而不是</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">下的一条下划线。光标用于响应鼠标或其他定位设备的移动。程序可以通过改变光标的形状来指出系统中的变化。例如，程序常显示一个计时的光标，用于指示用户一些漫长的操作正在进行之中。程序也可以通过改变光标让用户知道程序进入了一种特殊模式，例如，绘图程序经常改变光标来反映被绘制对象的类型，是直线还是圆或其他。<b></p>
    <p>插入符</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">插入符</font><font FACE="Times New Roman" SIZE="3">(caret)</font><font SIZE="3">是一个微小并闪烁的位图，作为一个键盘控制的指针。控制键盘输入的窗口可以创建一个插入符去通知用户：窗口现在可以进行键盘输入。在</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">环境下，一般使用“光标”作为键盘指针，而在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">中，“光标”被作为鼠标指针。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">应用程序必须维护这个插入符。在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">中，在一个时间只允许有一个插入符存在。因此，要使用插入符号作为键盘指针的应用程序必须在取得焦点时创建一个插入符号，并在失去焦点后删除它。<b></p>
    <p>对话框</b></font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">对话框是一种特殊的窗口，它提供了一种接收用户输入、处理数据的标准方法。特别的，当用户输入了一个需要附加信息的命令时，对话框是接收输入的标准方法。比如，假设用户要求系统打开一个文件，对话框就可以提供一个让用户从一组文件中选择一个文件的标准方法。如前所述，在一般情况下，在选择菜单名字后面跟着省略号（</font><font FACE="Times New Roman" SIZE="3">...</font><font SIZE="3">）的菜单项通常会弹出一个对话框。图</font><font FACE="Times New Roman" SIZE="3">1.5</font><font SIZE="3">给出了查找对话框的一个例子。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p align="center"><img src="T1_5.jpg" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/T1_5.jpg" alt="T1_5.jpg (8482 bytes)" WIDTH="389" HEIGHT="126"></p>
    <p align="center"></font><font size="2">图<font FACE="Times New Roman">1.5 </font>查找对话框<b></p>
    <p></font><font SIZE="3">控件</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">在图</font><font FACE="Times New Roman" SIZE="3">1.5</font><font SIZE="3">中，查找对话框是一个独立的窗口，它显示信息并接收用户的输入。在对话框中，还包含了许多小的窗口，这些窗口被称为控件。控件是应用程序用来获得用户特定信息的窗口，比如要打开文件的名字或自动换行的设置等。应用程序也会通过控件获取所需的信息，以便控制程序的某种属性，如自动换行特性的开关。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">控件总是与其他窗口连用，典型的是对话框，但也可以用在普通窗口之中。常见的控件有：按钮、编辑框、列表框、组合框、静态文本等等。<b></p>
    <p>消息框</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font></b><font SIZE="3">消息框是用于给用户一些提示或警告的窗口。例如，消息框能够在应用程序执行某项任务过程中出现问题时通知用户。下图所示的对话框警告用户输入了一个不合法的文件名。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p align="center"></font><img src="T1_6.jpg" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/T1_6.jpg" alt="T1_6.tif (100211 bytes)" WIDTH="185" HEIGHT="115"><font FACE="Times New Roman" size="2"></p>
    <p align="center"></font><font size="2">图</font><font FACE="Times New Roman" size="2">1.6</p>
    <p></font><b><font SIZE="3">　</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>1.3.5 </font><font SIZE="3">资源共享</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">对于</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">程序来说，它运行时独占系统的全部资源，包括显示器、内存等，在程序结束时才释放资源。而</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">是一个多任务的操作系统，各个应用程序共享系统提供的资源，常见的资源包括：设备上下文，画刷，画笔，字体，对话框控制，对话框，图标，定时器，插入符号，通信端口，电话线等。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>Windows</font><font SIZE="3">要求应用程序必须以一种能允许它共享</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">资源的方式进行设计，它的基本模式是这样的：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>1.</font><font SIZE="3">向</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">系统请求资源；</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>2.</font><font SIZE="3">使用该资源；</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>3.</font><font SIZE="3">释放该资源给</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">以供别的程序使用。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">即使最有经验的</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">程序员也常常会忽略第三步。如果忽略了这一步，轻则当时不出错，但过一会儿出现程序运行出现异常情况，或干扰别的程序正常运行；重则立即死机，比如设备上下文没有释放时。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序设计中，</font><font FACE="Times New Roman" SIZE="3">CPU</font><font SIZE="3">也是一种非常重要的资源，因此应用程序应当避免长时间的占用</font><font FACE="Times New Roman" SIZE="3">CPU</font><font SIZE="3">资源（如一个特别长的循环）；如果确实需要这样做，也应当采取一些措施，以让程序能够响应用户的输入。主存也是一个共享资源，要防止同时运行的多个应用程序因协调不好而耗尽内存资源。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">应用程序一般不要直接访问内存或其他硬件设备，如键盘、鼠标、计数器、屏幕或串口、并口等。</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">系统要求绝对控制这些资源，以保证向所有的应用程序提供公平的不中断的运行。如果确实要访问串并口，应当使用通过</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">提供的函数来安全的访问。</font><font FACE="Times New Roman" SIZE="3"></p>
    <b><p>1.3.6 Windows</font><font SIZE="3">应用程序组成</font></b><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">前面介绍了</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序的特点，现在让我们看看编写一个</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">程序需要做哪些工作。编写一个典型的</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序，一般需要：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>1.C,CPP</font><font SIZE="3">源程序文件：源程序文件包含了应用程序的数据、类、功能逻辑模块（包括事件处理、用户界面对象初始化以及一些辅助例程）的定义。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>2.H,HPP</font><font SIZE="3">头文件：头文件包含了</font><font FACE="Times New Roman" SIZE="3">CPP</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">C</font><font SIZE="3">源文件中所有数据、模块、类的声明。当一个</font><font FACE="Times New Roman" SIZE="3">CPP</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">C</font><font SIZE="3">源文件要调用另一个</font><font FACE="Times New Roman" SIZE="3">CPP</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">C</font><font SIZE="3">中所定义的模块功能时，需要包含那个</font><font FACE="Times New Roman" SIZE="3">CPP</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">C</font><font SIZE="3">文件对应的头文件。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">3.</font><font SIZE="3">资源文件：包含了应用程序所使用的全部资源定义，通常以</font><font FACE="Times New Roman" SIZE="3">.RC</font><font SIZE="3">为后缀名。注意这里说的资源不同与前面提到的资源，这里的资源是应用程序所能够使用的一类预定义工具中的一个对象，包括：字符串资源、加速键表、对话框、菜单、位图、光标、工具条、图标、版本信息和用户自定义资源等。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">其中</font><font FACE="Times New Roman" SIZE="3">CPP</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">C</font><font SIZE="3">和头文件同</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">下的类似，需要解释的是资源文件。在</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">程序设计过程中，所有的界面设计工作都在源程序中完成。而在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">程序设计过程中，象菜单、对话框、位图等可视的对象被单独分离出来加以定义，并存放在资源源文件中，然后由资源编译程序编译为应用程序所能使用的对象的映象。资源编译使应用程序可以读取对象的二进制映象和具体数据结构，这样可以减轻为创建复杂对象所需要得程序设计工作。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">程序员在资源文件中定义应用程序所需使用的资源，资源编译程序编译这些资源并将它们存储于应用程序的可执行文件或动态连接库中。在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序中引入资源有以下一些好处：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY">1.</font><font SIZE="3">降低内存需求：当应用程序运行时，资源并不随应用程序一起装入内存，而是在应用程序实际用到这些资源时才装入内存。在资源装入内存时，它们拥有自己的数据段，而不驻留于应用程序数据段中；当内存紧张时，可以废弃这些资源，使其占用的内存空间供他用，而当应用程序用到这些资源时才自动装入，这种方式降低了应用程序的内存需求，使一次可运行更多的程序，这也是</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">内存管理的优点之一。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>2.</font><font SIZE="3">便于统一管理和重复利用：将位图、图标、字符串等按资源文件方式组织便于统一管理和重用。比如，将所有的错误信息放到资源文件里，利用一个函数就可以负责错误提示输出，非常方便。如果在应用程序中要多次用到一个代表公司的徽标位图，就可以将它存放在资源文件中，每次用到时再从资源文件中装入。这种方式比将位图放在一个外部文件更加简单有效。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>3.</font><font SIZE="3">应用程序与界面有一定的独立性，有利于软件的国际化：由于资源文件独立于应用程序设计，使得在修改资源文件时（如调整对话框大小、对话框控制位置），可以不修改源程序，从而简化了用户界面的设计。另外，目前所提供的资源设计工具一般都是采用“所见即所得”方式，这样就可以更加直观、可视的设计应用程序界面。由于资源文件的独立性，软件国际化工作也非常容易。比如，现在开发了一个英文版的应用程序，要想把它汉化，只需要修改资源文件，将其中的对话框、菜单、字符串资源等汉化即可，而无需直接修改源程序。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p></font><font SIZE="3">但是，应用程序资源只是定义了资源的外观和组织，而不是其功能特性。例如，编辑一个对话框资源，可以改变对话框的安排和外观，但是却没有也不可能改变应用程序响应对话框控制的方式。外观的改变可以通过编辑资源来实现，而功能的改变却只能通过改变应用程序的源代码，然后重新编译来实现。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p>Windows</font><font SIZE="3">应用程序的生成同</font><font FACE="Times New Roman" SIZE="3">DOS</font><font SIZE="3">下类似，也要经过编译、链接两个阶段，只是增加了资源编译过程，基本流程如下图：</font><font FACE="Times New Roman" SIZE="3"></p>
    <p align="center"></font><img src="T1_7.gif" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/T1_7.gif" alt="T1_7.tif (156126 bytes)" WIDTH="401" HEIGHT="300"><font FACE="Times New Roman" size="1"></p>
    <p align="center"></font><font size="1">图</font><font FACE="Times New Roman" size="1">1.7 
    </font><font size="1">应用程序生成过程</font><font FACE="Times New Roman" size="1"></p>
    <p></font><font FACE="Times New Roman" SIZE="3">C</font><font SIZE="3">、</font><font FACE="Times New Roman" SIZE="3">CPP</font><font SIZE="3">编译器将</font><font FACE="Times New Roman" SIZE="3">C</font><font SIZE="3">源程序编译成目标程序，然后使用连接程序将所有的目标程序（包括各种库）连接在一起，生成可执行程序。在制作</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">应用程序时，编译器还要为引出函数生成正确的入口和出口代码。</font><font FACE="Times New Roman" SIZE="3"></p>
    <p ALIGN="JUSTIFY"></font><font SIZE="3">连接程序生成的可执行文件还不能在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">环境下运行，必须使用资源编译器对其进行处理。资源编译器对可执行文件的处理是这样的：如果该程序有资源描述文件，它就把已编译为二进制数据的资源加入到可执行文件中；否则，仅对该可执行文件进行相容性标识。应用程序必需经过资源编译器处理才可以在</font><font FACE="Times New Roman" SIZE="3">Windows</font><font SIZE="3">环境下运行。</font><font FACE="Times New Roman" SIZE="3"><b></p>
    </b></font><p ALIGN="right"><font size="2">[<a href="chap1_2.htm" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/chap1_2.htm">上一页</a>][<a href="chap1_4.htm" tppabs="http://www.lzu.edu.cn/netteach/jiaochen/vc++5.0/vc++5.0/chap1/chap1_4.htm">下一页</a>]</font></p>
    <font size="4"><hr noshade color="#3973DE" size="1">
    <p align="center"></font><font size="2" color="#000000">本教程由<a href="javascript:if(confirm('http://vcdynasty.yeah.net/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://vcdynasty.yeah.net/'" tppabs="http://vcdynasty.yeah.net/">Visual C++王朝（Where programmers come together）</a>协助制作,1999<br>
    未经许可，请勿以任何形式复制或转载</font></td>
  </tr>
</table>
</center></div>
</body>
</html>
