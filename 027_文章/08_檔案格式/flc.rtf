{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f16\froman\fcharset238\fprq2 Times New Roman CE;}{\f17\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f19\froman\fcharset161\fprq2 Times New Roman Greek;}{\f20\froman\fcharset162\fprq2 Times New Roman Tur;}{\f21\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f22\fswiss\fcharset238\fprq2 Arial CE;}{\f23\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f25\fswiss\fcharset161\fprq2 Arial Greek;}{\f26\fswiss\fcharset162\fprq2 Arial Tur;}{\f27\fswiss\fcharset186\fprq2 Arial Baltic;}{\f28\fmodern\fcharset238\fprq1 Courier New CE;}{\f29\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f31\fmodern\fcharset161\fprq1 Courier New Greek;}{\f32\fmodern\fcharset162\fprq1 Courier New Tur;}{\f33\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\sb100\sa100\nowidctlpar\adjustright \lang2057 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\nowidctlpar\adjustright \lang2057 \sbasedon0 \snext16 Definition Term;}{
\s16\li360\nowidctlpar\adjustright \lang2057 \sbasedon0 \snext15 Definition List;}{\*\cs17 \additive \i Definition;}{\s18\sb100\sa100\keepn\nowidctlpar\outlinelevel1\adjustright \b\fs48\lang2057\kerning36 \sbasedon0 \snext0 H1;}{
\s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 \sbasedon0 \snext0 H2;}{\s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 \sbasedon0 \snext0 H3;}{
\s21\sb100\sa100\keepn\nowidctlpar\outlinelevel4\adjustright \b\lang2057 \sbasedon0 \snext0 H4;}{\s22\sb100\sa100\keepn\nowidctlpar\outlinelevel5\adjustright \b\fs20\lang2057 \sbasedon0 \snext0 H5;}{
\s23\sb100\sa100\keepn\nowidctlpar\outlinelevel6\adjustright \b\fs16\lang2057 \sbasedon0 \snext0 H6;}{\s24\nowidctlpar\adjustright \i\lang2057 \sbasedon0 \snext0 Address;}{\s25\li360\ri360\sb100\sa100\nowidctlpar\adjustright \lang2057 \sbasedon0 \snext25 
Blockquote;}{\*\cs26 \additive \i CITE;}{\*\cs27 \additive \f2\fs20 CODE;}{\*\cs28 \additive \i \sbasedon10 Emphasis;}{\*\cs29 \additive \ul\cf10 \sbasedon10 Hyperlink;}{\*\cs30 \additive \ul\cf12 \sbasedon10 FollowedHyperlink;}{\*\cs31 \additive 
\b\f2\fs20 Keyboard;}{\s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\tx9590\adjustright \f2\fs20\lang2057 \sbasedon0 \snext32 Preformatted;}{\s33\qc\nowidctlpar\brdrt\brdrdb\brdrw5\brdrcf1 \adjustright 
\v\f1\fs16\lang2057 \snext0 \shidden z-Bottom of Form;}{\s34\qc\nowidctlpar\brdrb\brdrdb\brdrw5\brdrcf1 \adjustright \v\f1\fs16\lang2057 \snext0 \shidden z-Top of Form;}{\*\cs35 \additive \f2 Sample;}{\*\cs36 \additive \b \sbasedon10 Strong;}{\*\cs37 
\additive \f2\fs20 Typewriter;}{\*\cs38 \additive \i Variable;}{\*\cs39 \additive \v\cf6 HTML Markup;}{\*\cs40 \additive \v Comment;}}{\*\listtable{\list\listtemplateid-1\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0
\levelindent0{\leveltext\'01*;}{\levelnumbers;}}{\listname ;}\listid-2}}{\*\listoverridetable{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelold\levelspace0
\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720 }}\ls1}}{\info{\title Animator Pro File Formats}{\author Paul}{\operator Paul}{\creatim\yr1998\mo3\dy29\hr20\min31}{\revtim\yr1998\mo3\dy29\hr20\min31}{\version2}{\edmins0}
{\nofpages23}{\nofwords5224}{\nofchars29780}{\*\company  }{\nofcharsws36571}{\vern89}}{\*\userprops {\propname HTML}\proptype11{\staticval 1}{\propname DocumentEncoding}\proptype30{\staticval windows-1252}}
\paperw11906\paperh16838\margl1273\margr1273\margt1417\margb1134 \widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind5\viewscale100 \fet0{\*\background 
{\shp{\*\shpinst\shpleft0\shptop0\shpright0\shpbottom0\shpfhdr0\shpbxmargin\shpbymargin\shpwr0\shpwrk0\shpfblwtxt1\shpz0\shplid1025{\sp{\sn shapeType}{\sv 1}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn fFilled}{\sv 1}}{\sp{\sn lineWidth}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn fBackground}{\sv 1}}}}}\sectd \linex0\headery1440\footery1440\colsx709\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s18\sb100\sa100\keepn\nowidctlpar\outlinelevel1\adjustright \b\fs48\lang2057\kerning36 {Animator Pro File Formats
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
This chapter details each of the file formats defined by Animator Pro. Formats supported by Animator Pro but defined by another party, such as GIF and TIFF files, are not described in this document.
\par The files created by Autodesk Animator Pro are a supers
et of those created by the original Autodesk Animator. In some cases the Animator Pro formats are identical with the older Animator format. In other cases, new data fields or data compression techniques have been added to the file.
\par All two-byte and four-byte data values in Animator Pro files are stored in Intel-style order, the same as they would appear in memory on an 80x86 machine.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {Common Hierarchial Chunked File Structure
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {In general, Animator Pro files contain one or more chunks of information. Conceptua
lly, a chunk is a combination of control information and data. The most common Animator Pro file format is a header structure followed by hierarchial data chunks.
\par Every chunk begins with a header of at least 6 bytes. The first four bytes contain the length
 of the chunk (including the header itself, and also including the length of all subordinate chunks, if any). The next two bytes are an identifier word which describes the type of data in the chunk. Some chunks have headers longer than six bytes, but the 
size and identifier fields always occupy the first six bytes of the header.
\par The Animator Pro animation file is a good example of a hierarchial chunked file structure. The data in an animation file is arranged as follows:
\par animation file: 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {optional prefix chunk: 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1440\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {settings chunk 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}cel placement chunk 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {frame 1 chunk: 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1440\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {postage stamp chunk: postage stamp data 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}color palette chunk 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}pixel data chunk 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {frame 2 chunk: 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1440\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {pixel data chunk 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {frame 3 chunk: 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1440\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {color palette chunk 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}pixel data chunk 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {frame 4 chunk: 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1440\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {color palette chunk 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li720\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {ring frame chunk: 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li1440\sb100\sa100\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360\pnhang{\pntxtb \'b7}}\ls1\adjustright {color palette chunk 
\par {\pntext\pard\plain\f3 \loch\af3\dbch\af0\hich\f3 \'b7\tab}pixel data chunk 
\par }\pard \sb100\sa100\nowidctlpar\adjustright {It is possible that new types of chunks not described in this document will be added to animation files in the future. We recomm
end that you quietly ignore unknown chunk types you encounter during animation playback. The size fields in the chunk headers make it easy to skip an entire unrecognized chunk.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart FLC}FLC - Animator Pro Flic Files{\*\bkmkend FLC}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {This is the main animation file format created by Animator Pro. The file contains a 128-byte header, followed by an optional prefix chunk, followed by one or more frame chunks.
\par The prefix chunk, if present, contains Animator Pro settings information, CEL placement information, and other auxiliary data.
\par A frame chunk exists for each frame in the animation. In addition, a ring frame follows all the animation frames. Each frame chunk contains color palette information and/or pixel data.
\par The ring frame contains
 delta-compressed information to loop from the last frame of the flic back to the first. It can be helpful to think of the ring frame as a copy of the first frame, compressed in a different way. All flic files will contain a ring frame, including a single
-frame flic.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {The FLC file header
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {A FLC file begins with a 128-byte header, described below. All lengths and offsets are in bytes. All values stored in the header fields are unsigned.
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     size         The size of the entire animation file,
\par                              including this file header.
\par 
\par   4       2     magic        File format identifier. Always hex AF12.
\par 
\par   6       2     frames       Number of frames in the flic.  This 
\par                              count does not include the ring frame.  
\par                              FLC files have a maximum length of 4000 
\par                              frames.
\par 
\par   8       2     width        Screen width in pixels.
\par 
\par   10      2     height       Screen height in pixels.
\par 
\par   12      2     depth        Bits per pixel (always 8).
\par 
\par   14      2     flags        Set to hex 0003 after ring frame is 
\par                              written and flic header is updated.  
\par                              This indicates that the file was properly
\par                              finished and closed.
\par 
\par   16      4     speed        Number of milliseconds to delay between 
\par                              each frame during playback.
\par 
\par   20      2     reserved     Unused word, set to 0.
\par 
\par   22      4     created      The MSDOS-formatted date and time of the
\par                              file's creation.
\par 
\par   26      4     creator      The serial number of the Animator Pro
\par                              program used to create the file.  If the 
\par                              file was created by some other program 
\par                              using the FlicLib development kit, this 
\par                              value is hex 464C4942 ("FLIB").
\par 
\par   30      4     updated      The MSDOS-formatted date and time of the
\par                              file's most recent update.
\par 
\par   34      4     updater      Indicates who last updated the file.  See 
\par                              the description of creator.
\par 
\par   38      2     aspectx      The x-axis aspect ratio at which the file 
\par                              was created.
\par 
\par   40      2     aspecty      The y-axis aspect ratio at which the file 
\par                              was created. Most often, the x:y aspect ratio 
\par                              will be 1:1.  A 320x200 flic has a ratio of 
\par                              6:5.
\par 
\par   42      38    reserved     Unused space, set to zeroes.
\par 
\par   80      4     oframe1      Offset from the beginning of the file to the 
\par                              first animation frame chunk.
\par 
\par   84      4     oframe2      Offset from the beginning of the file to
\par                              the second animation frame chunk.  This value 
\par                              is used when looping from the ring frame back 
\par                              to the second frame during playback.
\par 
\par   88      40    reserved     Unused space, set to zeroes.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {The FLC prefix chunk
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {An optional prefix chunk may immediately follow the animation file header. This chunk is used to store auxiliary data which is not directly invo
lved in the animation playback. The prefix chunk starts with a 16-byte header (identical in structure to a frame header), as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     size         The size of the prefix chunk, including 
\par                              this header and all subordinate chunks 
\par                              that follow.
\par 
\par   4       2     type         Prefix chunk identifier. Always hex F100.
\par 
\par   6       2     chunks       Number of subordinate chunks in the
\par                              prefix chunk.
\par 
\par   8       8     reserved     Unused space, set to zeroes.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {To determine whether a prefix chunk is present, read the 16-byte header following the file header. If the type value is hex F100, it's a prefix chunk. If the value is hex
 F1FA it's the first frame chunk, and no prefix chunk exists. Note 
\par Programs other than Animator Pro should never need to create flic files that contain a prefix chunk. Programs reading a flic file should skip the prefix chunk by using the size value in the prefix header to read and discard the prefix, or by seeking direc
tly to the first frame using the oframe1 field from the file header.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {The FLC frame chunks
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {Frame chunks contain the pixel and color data for the animation. A frame chunk may contain multiple subordinate chunks, each containing a different type of data for th
e current frame. Each frame chunk starts with a 16-byte header that describes the contents of the frame:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     size         The size of the frame chunk, including this
\par                              header and all subordinate chunks that follow.
\par 
\par   4       2     type         Frame chunk identifier. Always hex F1FA.
\par 
\par   6       2     chunks       Number of subordinate chunks in the
\par                              frame chunk.
\par 
\par   8       8     reserved     Unused space, set to zeroes.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
Immediately following the frame header are the frame's subordinate data chunks. When the chunks count in the frame header is zero, it indicates that this frame is identical to the previous frame. This implies that no change is made t
o the screen or color palette, but the appropriate delay is still inserted during playback.
\par Each data chunk within a frame chunk is formatted as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     size         The size of the chunk, including this header.
\par 
\par   4       2     type         Data type identifier.
\par 
\par   6    (size-6) data         The color or pixel data.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {The type values in the chunk headers indicate what type of graphics data the chunk contains and which compression method was used to 
encode the data. The following values (and their associated mnemonic names) are currently found in frame data chunks:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Value     Name        Description
\par 
\par   4    FLI_COLOR256   256-level color palette info
\par   7    FLI_SS2        Word-oriented delta compression
\par   11   FLI_COLOR      64-level color palette info
\par   12   FLI_LC         Byte-oriented delta compression
\par   13   FLI_BLACK      Entire frame is color index 0
\par   15   FLI_BRUN       Byte run length compression
\par   16   FLI_COPY       No compression
\par   18   FLI_PSTAMP     Postage stamp sized image
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {The following sections describe each of these data encoding methods in detail.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Chunk Type 4 (FLI_COLOR256) - 256-Level Color
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {The data in this chunk is organized in pac
kets. The first word following the chunk header is a count of the number of packets in the chunk. Each packet consists of a one-byte color index skip count, a one-byte color count and three bytes of color information for each color defined.
\par At the start of
 the chunk, the color index is assumed to be zero. Before processing any colors in a packet, the color index skip count is added to the current color index. The number of colors defined in the packet is retrieved. A zero in this byte indicates 256 colors 
follow. The three bytes for each color define the red, green, and blue components of the color in that order. Each component can range from 0 (off) to 255 (full on). The data to change colors 2,7,8, and 9 would appear as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par      2                      ; two packets
\par      2,1,r,g,b              ; skip 2, change 1
\par      4,3,r,g,b,r,g,b,r,g,b  ; skip 4, change 3
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Chunk Type 11 (FLI_COLOR) - 64-Level Color
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {This chunk is identical to FLI_COLOR256 except that the values for the red, green and blue components are in the range of 0-63 instead of 0-255.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Chunk Type 13 (FLI_BLACK) - No Data
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {This chunk has no data following the header. All pixels in the frame are set to color index 0.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Chunk Type 16 (FLI_COPY) - No Compression
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {This chunk contains an uncompressed image
 of the frame. The number of pixels following the chunk header is exactly the width of the animation times the height of the animation. The data starts in the upper left corner with pixels copied from left to right and then top to bottom. This type of chu
nk is created when the preferred compression method (SS2 or BRUN) generates more data than the uncompressed frame image; a relatively rare situation.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Chunk Type 15 (FLI_BRUN) - Byte Run Length Compression
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {This chunk contains the entire image in a compressed format. Usually this chunk is used in the first frame of an animation, or within a postage stamp image chunk.
\par The data is organized in lines. Each line contains packets of compressed pixels. The first line is at the top of the animation, followed by subsequent lines moving downward. The number of lines in this chunk is given by the height of the animation.
\par The first byte of each line is a count of packets in the line. This value is ignored, it is a holdover from the original Animator. It is possible to gen
erate more than 255 packets on a line. The width of the animation is now used to drive the decoding of packets on a line; continue reading and processing packets until width pixels have been processed, then proceed to the next line.
\par Each packet consist of 
a type/size byte, followed by one or more pixels. If the packet type is negative it is a count of pixels to be copied from the packet to the animation image. If the packet type is positive it contains a single pixel which is to be replicated; the absolute
 value of the packet type is the number of times the pixel is to be replicated.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Chunk Type 12 (FLI_LC) - Byte Aligned Delta Compression
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
This chunk contains the differences between the previous frame and this frame. This compression method was used by the original Animator, but is not created by Animator Pro. This type of chunk can appear in an Animator Pro file, however, if the file was o
riginally created by Animator, then some (but not all) frames were modified using Animator Pro.
\par The first 16-bit word following the chunk header contains the position of the first line in the chunk. This is a count of lines (down from the top of the image) 
which are unchanged from the prior frame. The second 16-bit word contains the number of lines in the chunk. The data for the lines follows these two words.
\par Each line begins with two bytes. The first byte contains the starting x position of the data on the 
line, and the second byte the number of packets for the line. Unlike BRUN compression, the packet count is significant (because this compression method is only used on 320x200 flics).
\par Each packet consists of a single byte column skip, followed by a packet 
type/size byte. If the packet type is positive it is a count of pixels to be copied from the packet to the animation image. If the packet type is negative it contains a single pixel which is to be replicated; the absolute value of the packet type gives th
e number of times the pixel is to be replicated.
\par Note 
\par The negative/positive meaning of the packet type bytes in LC compression is reversed from that used in BRUN compression. This gives better performance during playback.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Chunk Type 7 (FLI_SS2) - Word Aligned Delta Compression
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
This format contains the differences between consecutive frames. This is the format most often used by Animator Pro for frames other than the first frame of an animation. It is similar to the line coded delta (LC) compression, but is 
word oriented instead of byte oriented. The data is organized into lines and each line is organized into packets.
\par The first word in the data following the chunk header contains the number of lines in the chunk. Each line can begin with some optional words 
that are used to skip lines and set the last byte in the line for animations with odd widths. These optional words are followed by a count of the packets in the line. The line count does not include skipped lines.
\par The high order two bits of the word is used to determine the contents of the word.
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par      Bit 15  Bit 14       Meaning
\par 
\par        0      0           The word contains the packet count.  The
\par                           packets follow this word.  The packet count 
\par                           can be zero; this occurs when only the last 
\par                           pixel on a line changes.
\par 
\par        1      0           The low order byte is to be stored in the 
\par                           last byte of the current line.  The packet 
\par                           count always follows this word.
\par 
\par        1      1           The word contains a line skip count.  The 
\par                           number of lines skipped is given by the 
\par                           absolute value of the word.  This word can 
\par                           be followed by more skip counts, by a last 
\par                           byte word, or by the packet count.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
The packets in each line are similar to the packets for the line coded chunk. The first byte of each packet is a column skip count. The second byte is a packet type. If the packet type is positive, the packet type is a count of words to be copied from the
 
packet to the animation image. If the packet type is negative, the packet contains one more word which is to be replicated. The absolute value of the packet type gives the number of times the word is to be replicated. The high and low order byte in the re
plicated word do not necessarily have the same value.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Chunk Type 18 (FLI_PSTAMP) - Postage Stamp Image
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {This chunk type holds a postage stamp -- a reduced-size image -- of the frame. It generally appears only in the first frame chunk within a flic file.
\par When creating a postage stamp, Animator Pro considers the ideal size to be 100x63 pixels. The actual size will vary as needed to maintain the same aspect ratio as the original.
\par The pixels in a postage stamp image are mapped into a six-cube color space, regardless of the color palette settings for the full frame image. A six-cube color space is formed as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par      start at palette entry 0
\par      for red = 0 thru 5
\par           for green = 0 thru 5
\par                for blue = 0 thru 5
\par                     palette_red   = (red   * 256)/6
\par                     palette_green = (green * 256)/6
\par                     palette_blue  = (blue  * 256)/6
\par                     move to next palette entry
\par                end for blue
\par           end for green
\par      end for red
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {Any arbitrary rgb value (where each component is in the range of 0-255) can be mapped into the six-cube space using the formula:
\par ((6*red)/256)*36 + ((6*green)/256)*6 + ((6*blue)/256) 
\par When a frame data chunk has been identified as a postage stamp, the header for the chunk contains more fields than just size and type. The full postage stamp chunk header is defined as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     size         The size of the postage stamp chunk,
\par                              including this header.
\par 
\par   4       2     type         Postage stamp identifier; always 18.
\par 
\par   6       2     height       Height of the postage stamp image, in
\par                              pixels.
\par 
\par   8       2     width        Width of the postage stamp image, in
\par                              pixels.
\par 
\par   10      2     xlate        Color translation type; always 1,
\par                              indicating six-cube color space.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {Immediately following this header is the postage stamp data. The data is formatted as a chunk with standard size/type header. The type will be one of:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par      Value    Name           Description
\par 
\par      15     FPS_BRUN         Byte run length compression
\par      16     FPS_COPY         No compression
\par      18     FPS_XLAT256      Six-cube color xlate table
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {The FPS_BRUN and FPS_COPY types are identical to the FLI_BRUN and FLI_COPY encoding methods described above.
\par The FPS_XLAT256 type indicates that the chunk contains a 256-byte color translation table instead of pixel data. To process this type of postage 
stamp, read the pixel data for the full-sized frame image, and translate its pixels into six-cube space using a lookup in the 256-byte color translation table. This type of postage stamp appears when the size of the animation frames is smaller than the st
andard 100x63 postage stamp size.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart FLI}FLI - Original Animator Flic Files{\*\bkmkend FLI}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {This animation file format is limited to 320x200 resolution. It is the main animation file format of the original Animator, and is still used by Animator Pro for creating 320x200 ani
mations. The file structure is very similar to that of a FLC file. A FLI file does not contain a prefix chunk, and does not use FLI_PSTAMP or FLI_SS2 data encoding in the frame chunks.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {The FLI file header
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {The file header for a FLI file is a subset of the FLC file header. It is defined as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     size         The size of the entire animation file,
\par                              including this file header.
\par 
\par   4       2     magic        File format identifier. Always hex AF11.
\par 
\par   6       2     frames       Number of frames in the flic. This count
\par                              does not include the ring frame.  FLI files 
\par                              have a maximum length of 4000 frames.
\par 
\par   8       2     width        Screen width in pixels. This is always
\par                              320 in a FLI file.
\par 
\par   10      2     height       Screen height in pixels. This is always
\par                              200 in a FLI file.
\par 
\par   12      2     depth        Bits per pixel (always 8).
\par 
\par   14      2     flags        Always zero in a FLI file.
\par 
\par   16      2     speed        Number of jiffies to delay between each
\par                              frame during playback.  A jiffy is 1/70 
\par                              of a second.
\par 
\par   18      110   reserved     Unused space, set to zeroes.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {The FLI frame chunks
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {One or more frame chunks immediately follow the FLI file header. The frame chunks in a FLI file are identical to those in a FLC file, except that postage stam
p image (FLI_PSTAMP) and word-runlength-compression (FLI_SS2) data chunks never appear in FLI files.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart CEL}CEL - Animation Cel Files{\*\bkmkend CEL}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {CEL files contain one or more frames of image data. Both Animator Pro and the original Animator produce CEL files, but each uses a different file format.
\par To process a CEL file for input, read the first 2 bytes of the file. If they are hex 9119, the file is an original Animator CEL file. If the first two bytes are not 9119, it is an Animator Pro CEL file.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Animator Pro CEL Files
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
An Animator Pro CEL file is identical to a FLC file in all respects. A CEL file should have a Celdata chunk in the file prefix chunk which describes the x,y placement of the CEL. If the Celdata placement chunk is not present, assume a placement of 0,0.

\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Original Animator CEL Files
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
The original Animator also produced CEL files. These were still-picture files, not the multi-frame files Animator Pro now uses. A CEL file from the original Animator is identical to a PIC file from the original Animator in all respects.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart PIC}PIC - Picture Files{\*\bkmkend PIC}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
PIC files contain still images in an uncompressed format. Both the original Animator and Animator Pro produce PIC files. The file formats are different; Animator Pro produces a hierarchial chunked file, while the original Animator file is a simpler 
fixed format. These formats are detailed in the following sections.
\par To process a PIC file for input, read the first 2 bytes of the file. If they are hex 9119, the file is an original Animator PIC format file. If the first two bytes are not 9119, it is an Animator Pro PIC file.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Animator Pro PIC Files
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
Animator Pro uses this format to store a single-frame picture image or bitmap. This format description applies to both PIC and MSK files. The file begins with a 64-byte header defined as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     size         The size of the file, including this header.
\par 
\par   4       2     magic        File format identifier. Always hex 9500.
\par 
\par   6       2     width        The width of the image, in pixels.
\par 
\par   8       2     height       The height of the image, in pixels.
\par 
\par   10      2     xcoord       The X coordinate; typically zero.  (See
\par                              note below).
\par 
\par   12      2     ycoord       The Y coordinate; typically zero.  (See
\par                              note below).
\par 
\par   14      4     userid       An arbitrary 4-byte value; generally
\par                              zero.  Do not count on any particular 
\par                              value in this field.  Set this field to 
\par                              zero when creating a file.
\par 
\par   18      1     depth        The number of bits per pixel. This is 8
\par                              for PIC files and 1 for MSK files.
\par 
\par   19      45    reserved     Unused space; set to zeroes.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {Note 
\par The xcoord and ycoord values in a PIC file header will typically be zero. Non-zero values indicate that the file contains a rectangle from within a larger picture. In this case, the xcoord and ycoord values represent the relation of the saved rectangle to
 the full image. These values can be safely ignored for most purposes.
\par Following the file header are the data chunks for the image. Each data chunk within a PIC or MSK file is formatted as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     size         The size of the chunk, including this header.
\par 
\par   4       2     type         Data type identifier.
\par 
\par   6    (size-6) data         The color or pixel data.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {The type values in the chunk headers indicate what type of graphics data the chunk contain
s. The following values (and their associated mnemonic names) are currently found in PIC/MSK data chunks:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par      Value    Name            Description
\par 
\par      0    PIC_CMAP            Color palette info
\par      1    PIC_BYTEPIXELS      Byte-per-pixel image data
\par      2    PIC_BITPIXELS       Bit-per-pixel mask data
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
In a PIC_CMAP chunk, the first 2-byte word is a version code; currently this is set to zero. Following the version word are all 256 palette entries in rgbrgb... order. Each of the r, g, and b components 
is a single byte in the range of 0-255. This type of chunk appears in PIC files; there will generally be no color map chunk in a MSK file.
\par In a PIC_BYTEPIXELS chunk, the image data appears immediately following the 6-byte chunk header. The data is stored as one byte per pixel, in left-to-right, topD to-bottom sequence. This type of chunk appears in PIC files.
\par In a PIC_BITPIXELS chunk, the bitmap data appears immediately following the 6-byte chunk header. The data is stored as bits packed into bytes such tha
t the leftmost bits appear in the high-order positions of each byte. The bits are stored in left-to-right, top-toD bottom sequence. When the width of the bitmap is not a multiple of 8, there will be unused bits in the lowD order positions of the last byte
 on each line. The number of bytes per line is ((width+7)/8). This type of chunk appears in MSK files.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Original Animator PIC Files
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {The original Animator uses this format to store a single-frame picture image. This format description applies to both PIC and CEL files. The file begins with a 32 byte header, as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       2     type         File type identifier.  Always hex 9119.
\par 
\par   2       2     width        Width of image.  Always 320 in a PIC
\par                              file; may be any value in a CEL file.
\par 
\par   4       2     height       Height of image.  Always 200 in a PIC
\par                              file; may be any value in a CEL file.
\par 
\par   6       2     xcoord       X coordinate for upper left corner of
\par                              the image.  Always zero in a PIC file; 
\par                              may be non-zero in a CEL file.
\par 
\par   8       2     ycoord       Y coordinate for upper left corner of
\par                              the image.  Always zero in a PIC file; 
\par                              may be non-zero in a CEL file.
\par 
\par   10      1     depth        Number of bits per pixel; always 8.
\par 
\par   11      1     compress     Compression flag; always zero.
\par 
\par   12      4     datasize     Size of the image data in bytes.
\par 
\par   16      16    reserved     Unused space; set to zeroes.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {Immediately following the header is the color map. It contains all 256 palette entries in rgbrgb... order. Each of the r, g, and b components is a single byte in the range of 0-63
. Following the color palette is the image data, one byte per pixel. The image data is stored in left-to-right, top-to-bottom sequence.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart MSK}MSK - Mask Data Files{\*\bkmkend MSK}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {MSK files contain a bitmap image. Both Animator Pro and the original Animator produce MSK files, but the formats are different.
\par To process a MSK file for input, check the file size. If it is exactly 8000 bytes, the file is an original Animator MSK file. If the file is any other size, it is an Animator Pro MSK file.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Animator Pro MSK Files
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {An Animator Pro MSK file is identical to an Animator Pro PIC file. It will have a pixel depth of 1.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Original Animator MSK Files
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {A MSK file created by the original Animator is exactly 8000 bytes long. There is no file header or other control information in 
the file. It contains the image bit map, 1 bit per pixel, with the leftmost pixels packed into the high order bits of each byte. The size of the image is fixed at 320x200. The image is stored left-to-right, top-to-bottom.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart COL}COL - Color Map Files{\*\bkmkend COL}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {A COL file stores the rgb values for entries in the color palette. Both Animator Pro and the original Animator produce COL files, but the formats are different.
\par To process a COL file for input, check the file size. If it is exactly 768 bytes, the file is an original Animator COL file. If the file is any other size, it is an Animator Pro COL file.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Animator Pro COL Files
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {An Animator Pro COL file stores color palette information. The file begins with an 8-byte header defined as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     size         The size of the file, including this header.
\par 
\par   4       2     magic        File format identifier. Always hex B123.
\par 
\par   6       2     version      The version of color storage format.
\par                              Currently set to zero, indicating 
\par                              256-level color data in each r,g,b 
\par                              component.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {Following the file header are palette entries in rgbrgb... order. Each of the r, g, and b components is a single byte
 in the range of 0-255. Generally, there will be data for 256 palette entries, but this cannot be assumed. The actual number of palette entries is ((size-8)/3); if this value is not an even multiple of three, the file is corrupted.
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Original Animator COL Files
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
A COL file created by the original Animator is exactly 768 bytes long. There is no file header or other control information in the file. The rgb values for all 256 palette entries is stored in rgbrgb... sequence. Each of the r, g, and b values is in th
e range of 0-63.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart PLY}PLY - Polygon Files{\*\bkmkend PLY}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {A PLY file holds a set of points that describe a polygon. Both Animator Pro and the original Animator create PLY files. The file format is the same for both.
\par A PLY file starts with an 8-byte header, as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       2     points       Count of points in the file.
\par 
\par   2       4     reserved     Unused space; set to zero.
\par 
\par   6       1     closed       Closed-shape flag.  If 1, there is an
\par                              implied connection between the last point 
\par                              and the first.  If zero, the shape is not 
\par                              closed.
\par 
\par   7       1     magic        File format identifier. Always hex 99.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {The points data follows the file header. Each point is described with three 16-bit integers, representing the x, y, and z coordinates of each point. The z coordinates are always zero.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart TWE}TWE - Tween Data Files{\*\bkmkend TWE}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {A TWE file holds information about a tweening operation set up via the Tween men
us. The information includes the starting and ending shapes, and the optional userD specified links between the shapes. Animator Pro creates tween files.
\par A TWE file begins with an 8-byte header defined as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       2     magic        File format identifier. Always hex 1995.
\par 
\par   2       2     version      The file format version; always zero.
\par 
\par   4       4     tcount       The number of tween shapes in the file;
\par                              always 2.
\par 
\par   8       8     reserved     Unused space; set to zeroes.
\par 
\par   16      4     linkcount    The number of link entries in the file.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {
Immediately following the file header are the link entries. If the linkcount value is zero there are no links. Each link entry is a pair of 32-bit integers. The first value in each pair is the index of the point in the first shape, and the second value is
 the index of the point in the ending shape. (IE, a link value of 2,7 says to link the second starting-shape point to the seventh ending-shape point.)
\par Following the link entries is the data block that describes the starting shape, then the data block that d
escribes the ending shape. The format of these blocks is identical to that of the polygon (PLY) file, including file header data. In other words, they appear as if a pair of polygon files are embedded in the tween file at this point.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart OPT}OPT - Optics Menu Settings Files{\*\bkmkend OPT}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {An OPT file holds information about an optics operation set up via the Optics menus. Both Animator Pro and the original Animator create OPT files. The file format is the same for both.
\par An OPT file starts with a 4-byte header, as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       2     magic        File type identifier.  Always hex 1A3F.
\par 
\par   2       2     count        Number of records in the file.
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {Following the file header are optics records of 50 bytes each. A record is generated for each click on CONTINUE MOVE in the OPTICS menu. The move records are formatted as follows:
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par Offset  Length  Name         Description
\par 
\par   0       4     link         In the file, this field is always zero.
\par                              In memory, it's a pointer to the next 
\par                              move record.
\par 
\par   4       6     spincenter   The x,y,z coordinates of the spin
\par                              center point; three 16-bit values.
\par 
\par   10      6     spinaxis     The x,y,z coordinates of the spin axis;
\par                              three 16-bit values.
\par 
\par   16      6     spinturns    The x,y,z coordinates of the spin turns;
\par                              three 16-bit values.
\par 
\par   22      4     spininter    Intermediate turns.  Two 16-bit values.
\par                              These are values for a conjugation matrix 
\par                              that corresponds to spin axis.
\par 
\par   26      6     sizecenter   The x,y,z coordinates of the size
\par                              center point; three 16-bit values.
\par 
\par   32      2     xmultiplier  Determines (along with xdivisor)
\par                              how to scale along x dimension.
\par 
\par   34      2     xdivisor     Determines (along with xmultiplier) how
\par                              to scale along x dimension.
\par 
\par   36      2     ymultiplier  Determines (along with ydivisor)
\par                              how to scale along y dimension.
\par 
\par   38      2     ydivisor     Determines (along with ymultiplier) how
\par                              to scale along y dimension.
\par 
\par   40      2     bothmult     Like xmultiplier, but applied to both
\par                              dimensions.
\par 
\par   42      2     bothdiv      Like xdivisor, but applied to both
\par                              dimensions.
\par 
\par   44      6     linearmove   The x,y,z offset for a linear move;
\par                              three 16-bit values.
\par }\pard\plain \s19\sb100\sa100\keepn\nowidctlpar\outlinelevel2\adjustright \b\fs36\lang2057 {{\*\bkmkstart REC}Internal Usage Files (REC, SET, CFG, GLV, MU){\*\bkmkend REC}
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {Each of these file types is created by Animator Pro to store internal data between sessions. These files must not be touched by other applications.
\par REC files store macros. Animator Pro REC files are not the same as the REC files documented with the original Animator.
\par SET files store internal settings information; they are created by the Quit-Save menu, and by the Save Default Settings menu.
\par CFG files store internal configuration information, such as the video driver and mode.
\par GLV files store Poco Global Variables. The data is stored as a series of nullterminated strings, and must not be modified using a normal text editor.
\par MU files store menu text, prompts, error messages, etc, customized to the proper native language. The data is stored as normal ASCII text, and must not be modified in any way.
\par }{\b End of document.}{ 
\par Below are a few comments that hold text we may want to suck back into the document some day. When the prefix chunk is present, it contains a fixed header structure, followed by one or more prefix sub-chunks. The prefix chunk header is defined as follows:

\par The following constants identify the sub-chunks within a prefix chunk.
\par }\pard\plain \s32\nowidctlpar\tx0\tx959\tx1918\tx2877\tx3836\tx4795\tx5754\tx6713\tx7672\tx8631\adjustright \f2\fs20\lang2057 {
\par      enum \{
\par           FP_FREE        = 0,
\par           FP_FLIPATH          = 1,
\par           FP_VSETTINGS   = 2,
\par           FP_CELDATA          = 3,
\par           \};
\par }\pard\plain \s20\sb100\sa100\keepn\nowidctlpar\outlinelevel3\adjustright \b\fs28\lang2057 {Format for the optional Prefix chunk:
\par }\pard\plain \sb100\sa100\nowidctlpar\adjustright \lang2057 {The prefix chunk at present contains:
\par A settings chunk. This is the same thing as a settings file but as a chunk in a flic. This is how the load settings from a flic is implemented. This is p
resent in flics but not cels. A settings chunk has sub chunks for things like the paths in the file requestors, optics settings, etc.
\par A Celdata chunk. This chunk has the positioning info for a fli used as a cel. This is usually only present in cel files.
\par }}